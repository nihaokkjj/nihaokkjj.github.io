<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3</title>
      <link href="/posts/2025/07/Fronted/Vue3/3a42db2d.html"/>
      <url>/posts/2025/07/Fronted/Vue3/3a42db2d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs&#x2F;core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="images/1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /></li></ul><h2 id="1-1-【性能的提升】"><a href="#1-1-【性能的提升】" class="headerlink" title="1.1. 【性能的提升】"></a>1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】"><a href="#1-2-【-源码的升级】" class="headerlink" title="1.2.【 源码的升级】"></a>1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】"><a href="#1-3-【拥抱TypeScript】" class="headerlink" title="1.3. 【拥抱TypeScript】"></a>1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】"><a href="#1-4-【新的特性】" class="headerlink" title="1.4. 【新的特性】"></a>1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】"><a href="#2-1-【基于-vue-cli-创建】" class="headerlink" title="2.1. 【基于 vue-cli 创建】"></a>2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span><br>vue <span class="hljs-literal">--version</span><br><br><span class="hljs-comment">## 安装或者升级你的@vue/cli </span><br>npm install <span class="hljs-literal">-g</span> @vue/<span class="hljs-built_in">cli</span><br><br><span class="hljs-comment">## 执行创建命令</span><br>vue create vue_test<br><br><span class="hljs-comment">##  随后选择3.x</span><br><span class="hljs-comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span><br><span class="hljs-comment">##  &gt; 3.x</span><br><span class="hljs-comment">##    2.x</span><br><br><span class="hljs-comment">## 启动</span><br><span class="hljs-built_in">cd</span> vue_test<br>npm run serve<br></code></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐"><a href="#2-2-【基于-vite-创建】-推荐" class="headerlink" title="2.2. 【基于 vite 创建】(推荐)"></a>2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：</li></ul><p><img src="images/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" /><img src="images/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></p><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">## 1.创建命令</span><br>npm create vue@latest<br><br><span class="hljs-comment">## 2.具体配置</span><br><span class="hljs-comment">## 配置项目名称</span><br>√ Project name: vue3_test<br><span class="hljs-comment">## 是否添加TypeScript支持</span><br>√ Add TypeScript?  Yes<br><span class="hljs-comment">## 是否添加JSX支持</span><br>√ Add JSX Support?  No<br><span class="hljs-comment">## 是否添加路由环境</span><br>√ Add Vue Router <span class="hljs-keyword">for</span> Single Page Application development?  No<br><span class="hljs-comment">## 是否添加pinia环境</span><br>√ Add Pinia <span class="hljs-keyword">for</span> state management?  No<br><span class="hljs-comment">## 是否添加单元测试</span><br>√ Add Vitest <span class="hljs-keyword">for</span> Unit Testing?  No<br><span class="hljs-comment">## 是否添加端到端测试方案</span><br>√ Add an <span class="hljs-keyword">End</span><span class="hljs-literal">-to-End</span> Testing Solution? » No<br><span class="hljs-comment">## 是否添加ESLint语法检查</span><br>√ Add ESLint <span class="hljs-keyword">for</span> code quality?  Yes<br><span class="hljs-comment">## 是否添加Prettiert代码格式化</span><br>√ Add Prettier <span class="hljs-keyword">for</span> code formatting?  No<br></code></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h1&gt;你好啊！&lt;/h1&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;App&#x27; //组件名<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>  .app &#123;<br>    background-color: #ddd;<br>    box-shadow: 0 0 10px;<br>    border-radius: 10px;<br>    padding: 20px;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="images/volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="images/image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li></ul><h2 id="2-3-【一个简单的效果】"><a href="#2-3-【一个简单的效果】" class="headerlink" title="2.3. 【一个简单的效果】"></a>2.3. 【一个简单的效果】</h2><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;App&#x27;,<br>    data() &#123;<br>      return &#123;<br>        name:&#x27;张三&#x27;,<br>        age:18,<br>        tel:&#x27;13888888888&#x27;<br>      &#125;<br>    &#125;,<br>    methods:&#123;<br>      changeName()&#123;<br>        this.name = &#x27;zhang-san&#x27;<br>      &#125;,<br>      changeAge()&#123;<br>        this.age += 1<br>      &#125;,<br>      showTel()&#123;<br>        alert(this.tel)<br>      &#125;<br>    &#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】"><a href="#3-1-【OptionsAPI-与-CompositionAPI】" class="headerlink" title="3.1.  【OptionsAPI 与 CompositionAPI】"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li></ul><h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="images/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="images/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="images/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="images/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】"><a href="#3-2-【拉开序幕的-setup】" class="headerlink" title="3.2. 【拉开序幕的 setup】"></a>3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;Person&#x27;,<br>    setup()&#123;<br>      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）<br>      let name = &#x27;张三&#x27;<br>      let age = 18<br>      let tel = &#x27;13888888888&#x27;<br><br>      // 方法，原来写在methods中<br>      function changeName()&#123;<br>        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的<br>        console.log(name)<br>      &#125;<br>      function changeAge()&#123;<br>        age += 1 //注意：此时这么修改age页面是不变化的<br>        console.log(age)<br>      &#125;<br>      function showTel()&#123;<br>        alert(tel)<br>      &#125;<br><br>      // 返回一个对象，对象中的内容，模板中可以直接使用<br>      return &#123;name,age,tel,changeName,changeAge,showTel&#125;<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3><ul><li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**</li><li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span> <span class="hljs-string">&#x27;你好啊！&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3><ul><li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li><li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</li><li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li></ul><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  export default &#123;<br>    name:&#x27;Person&#x27;,<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;!-- 下面的写法是setup语法糖 --&gt;<br>&lt;script setup lang=&quot;ts&quot;&gt;<br>  console.log(this) //undefined<br>  <br>  // 数据（注意：此时的name、age、tel都不是响应式数据）<br>  let name = &#x27;张三&#x27;<br>  let age = 18<br>  let tel = &#x27;13888888888&#x27;<br><br>  // 方法<br>  function changName()&#123;<br>    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的<br>  &#125;<br>  function changAge()&#123;<br>    console.log(age)<br>    age += 1 //注意：此时这么修改age页面是不变化的<br>  &#125;<br>  function showTel()&#123;<br>    alert(tel)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li><li>第二步：<code>vite.config.ts</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueSetupExtend</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-vue-setup-extend&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [ <span class="hljs-title class_">VueSetupExtend</span>() ]<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li></ol><h2 id="3-3-【ref-创建：基本类型的响应式数据】"><a href="#3-3-【ref-创建：基本类型的响应式数据】" class="headerlink" title="3.3. 【ref 创建：基本类型的响应式数据】"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2><ul><li>**作用：**定义响应式变量。</li><li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li><li>**返回值：**一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li><li><strong>注意点：</strong><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;<br>    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br>  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。<br>  let name = ref(&#x27;张三&#x27;)<br>  let age = ref(18)<br>  // tel就是一个普通的字符串，不是响应式的<br>  let tel = &#x27;13888888888&#x27;<br><br>  function changeName()&#123;<br>    // JS中操作ref对象时候需要.value<br>    name.value = &#x27;李四&#x27;<br>    console.log(name.value)<br><br>    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。<br>    // name = ref(&#x27;zhang-san&#x27;)<br>  &#125;<br>  function changeAge()&#123;<br>    // JS中操作ref对象时候需要.value<br>    age.value += 1 <br>    console.log(age.value)<br>  &#125;<br>  function showTel()&#123;<br>    alert(tel)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-4-【reactive-创建：对象类型的响应式数据】"><a href="#3-4-【reactive-创建：对象类型的响应式数据】" class="headerlink" title="3.4. 【reactive 创建：对象类型的响应式数据】"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2><ul><li><strong>作用：<strong>定义一个</strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li><li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li><li>**返回值：**一个<code>Proxy</code>的实例对象，简称：响应式对象。</li><li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;<br>    &lt;h2&gt;游戏列表：&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;<br>    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;<br>    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123; reactive &#125; from &#x27;vue&#x27;<br><br>// 数据<br>let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)<br>let games = reactive([<br>  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;<br>])<br>let obj = reactive(&#123;<br>  a:&#123;<br>    b:&#123;<br>      c:&#123;<br>        d:666<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br>function changeCarPrice() &#123;<br>  car.price += 10<br>&#125;<br>function changeFirstGame() &#123;<br>  games[0].name = &#x27;流星蝴蝶剑&#x27;<br>&#125;<br>function test()&#123;<br>  obj.a.b.c.d = 999<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-5-【ref-创建：对象类型的响应式数据】"><a href="#3-5-【ref-创建：对象类型的响应式数据】" class="headerlink" title="3.5. 【ref 创建：对象类型的响应式数据】"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2><ul><li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li><li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;<br>    &lt;h2&gt;游戏列表：&lt;/h2&gt;<br>    &lt;ul&gt;<br>      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;<br>    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;<br>    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123; ref &#125; from &#x27;vue&#x27;<br><br>// 数据<br>let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)<br>let games = ref([<br>  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,<br>  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;<br>])<br>let obj = ref(&#123;<br>  a:&#123;<br>    b:&#123;<br>      c:&#123;<br>        d:666<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br>console.log(car)<br><br>function changeCarPrice() &#123;<br>  car.value.price += 10<br>&#125;<br>function changeFirstGame() &#123;<br>  games.value[0].name = &#x27;流星蝴蝶剑&#x27;<br>&#125;<br>function test()&#123;<br>  obj.value.a.b.c.d = 999<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-6-【ref-对比-reactive】"><a href="#3-6-【ref-对比-reactive】" class="headerlink" title="3.6. 【ref 对比 reactive】"></a>3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="images/自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：<blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote></li></ul><h2 id="3-7-【toRefs-与-toRef】"><a href="#3-7-【toRefs-与-toRef】" class="headerlink" title="3.7. 【toRefs 与 toRef】"></a>3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)<br><br>  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力<br>  let &#123;name,gender&#125; =  toRefs(person)<br><br>  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力<br>  let age = toRef(person,&#x27;age&#x27;)<br><br>  // 方法<br>  function changeName()&#123;<br>    name.value += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    age.value += 1<br>  &#125;<br>  function changeGender()&#123;<br>    gender.value = &#x27;女&#x27;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-8-【computed】"><a href="#3-8-【computed】" class="headerlink" title="3.8. 【computed】"></a>3.8. 【computed】</h2><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="images/computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;<br>    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;<br>    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;<br>    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;<br>  import &#123;ref,computed&#125; from &#x27;vue&#x27;<br><br>  let firstName = ref(&#x27;zhang&#x27;)<br>  let lastName = ref(&#x27;san&#x27;)<br><br>  // 计算属性——只读取，不修改<br>  /* let fullName = computed(()=&gt;&#123;<br>    return firstName.value + &#x27;-&#x27; + lastName.value<br>  &#125;) */<br><br><br>  // 计算属性——既读取又修改<br>  let fullName = computed(&#123;<br>    // 读取<br>    get()&#123;<br>      return firstName.value + &#x27;-&#x27; + lastName.value<br>    &#125;,<br>    // 修改<br>    set(val)&#123;<br>      console.log(&#x27;有人修改了fullName&#x27;,val)<br>      firstName.value = val.split(&#x27;-&#x27;)[0]<br>      lastName.value = val.split(&#x27;-&#x27;)[1]<br>    &#125;<br>  &#125;)<br><br>  function changeFullName()&#123;<br>    fullName.value = &#x27;li-si&#x27;<br>  &#125; <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-9-【watch】"><a href="#3-9-【watch】" class="headerlink" title="3.9.【watch】"></a>3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：<blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote></li></ul><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;<br>    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let sum = ref(0)<br>  // 方法<br>  function changeSum()&#123;<br>    sum.value += 1<br>  &#125;<br>  // 监视，情况一：监视【ref】定义的【基本类型】数据<br>  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)<br>    if(newValue &gt;= 10)&#123;<br>      stopWatch()<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let person = ref(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.value.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.value.age += 1<br>  &#125;<br>  function changePerson()&#123;<br>    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;<br>  &#125;<br>  /* <br>    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视<br>    watch的第一个参数是：被监视的数据<br>    watch的第二个参数是：监视的回调<br>    watch的第三个参数是：配置对象（deep、immediate等等.....） <br>  */<br>  watch(person,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br>  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;<br>    &lt;hr&gt;<br>    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18<br>  &#125;)<br>  let obj = reactive(&#123;<br>    a:&#123;<br>      b:&#123;<br>        c:666<br>      &#125;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changePerson()&#123;<br>    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)<br>  &#125;<br>  function test()&#123;<br>    obj.a.b.c = 888<br>  &#125;<br><br>  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的<br>  watch(person,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person变化了&#x27;,newValue,oldValue)<br>  &#125;)<br>  watch(obj,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18,<br>    car:&#123;<br>      c1:&#x27;奔驰&#x27;,<br>      c2:&#x27;宝马&#x27;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changeC1()&#123;<br>    person.car.c1 = &#x27;奥迪&#x27;<br>  &#125;<br>  function changeC2()&#123;<br>    person.car.c2 = &#x27;大众&#x27;<br>  &#125;<br>  function changeCar()&#123;<br>    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;<br>  &#125;<br><br>  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式<br>  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)<br>  &#125;) */<br><br>  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数<br>  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;<br>    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;<br>    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;<br>    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;<br>    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;reactive,watch&#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let person = reactive(&#123;<br>    name:&#x27;张三&#x27;,<br>    age:18,<br>    car:&#123;<br>      c1:&#x27;奔驰&#x27;,<br>      c2:&#x27;宝马&#x27;<br>    &#125;<br>  &#125;)<br>  // 方法<br>  function changeName()&#123;<br>    person.name += &#x27;~&#x27;<br>  &#125;<br>  function changeAge()&#123;<br>    person.age += 1<br>  &#125;<br>  function changeC1()&#123;<br>    person.car.c1 = &#x27;奥迪&#x27;<br>  &#125;<br>  function changeC2()&#123;<br>    person.car.c2 = &#x27;大众&#x27;<br>  &#125;<br>  function changeCar()&#123;<br>    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;<br>  &#125;<br><br>  // 监视，情况五：监视上述的多个数据<br>  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;<br>    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)<br>  &#125;,&#123;deep:true&#125;)<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】"><a href="#3-10-【watchEffect】" class="headerlink" title="3.10. 【watchEffect】"></a>3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;<br>    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;<br>    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;<br>  // 数据<br>  let temp = ref(0)<br>  let height = ref(0)<br><br>  // 方法<br>  function changePrice()&#123;<br>    temp.value += 10<br>  &#125;<br>  function changeSum()&#123;<br>    height.value += 1<br>  &#125;<br><br>  // 用watch实现，需要明确的指出要监视：temp、height<br>  watch([temp,height],(value)=&gt;&#123;<br>    // 从value中获取最新的temp值、height值<br>    const [newTemp,newHeight] = value<br>    // 室温达到50℃，或水位达到20cm，立刻联系服务器<br>    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;<br>      console.log(&#x27;联系服务器&#x27;)<br>    &#125;<br>  &#125;)<br><br>  // 用watchEffect实现，不用<br>  const stopWtach = watchEffect(()=&gt;&#123;<br>    // 室温达到50℃，或水位达到20cm，立刻联系服务器<br>    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;<br>      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)<br>      console.log(&#x27;联系服务器&#x27;)<br>    &#125;<br>    // 水温达到100，或水位达到50，取消监视<br>    if(temp.value === 100 || height.value === 50)&#123;<br>      console.log(&#x27;清理了&#x27;)<br>      stopWtach()<br>    &#125;<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】"><a href="#3-11-【标签的-ref-属性】" class="headerlink" title="3.11. 【标签的 ref 属性】"></a>3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;<br>    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;<br>    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;<br>    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;<br>    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br><br>  let title1 = ref()<br>  let title2 = ref()<br>  let title3 = ref()<br><br>  function showLog()&#123;<br>    // 通过id获取元素<br>    const t1 = document.getElementById(&#x27;title1&#x27;)<br>    // 打印内容<br>    console.log((t1 as HTMLElement).innerText)<br>    console.log((&lt;HTMLElement&gt;t1).innerText)<br>    console.log(t1?.innerText)<br>    <br>/************************************/<br><br>    // 通过ref获取元素<br>    console.log(title1.value)<br>    console.log(title2.value)<br>    console.log(title3.value)<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 父组件App.vue --&gt;<br>&lt;template&gt;<br>  &lt;Person ref=&quot;ren&quot;/&gt;<br>  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import Person from &#x27;./components/Person.vue&#x27;<br>  import &#123;ref&#125; from &#x27;vue&#x27;<br><br>  let ren = ref()<br><br>  function test()&#123;<br>    console.log(ren.value.name)<br>    console.log(ren.value.age)<br>  &#125;<br>&lt;/script&gt;<br><br><br>&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;<br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;<br>// 数据<br>  let name = ref(&#x27;张三&#x27;)<br>  let age = ref(18)<br>  /****************************/<br>  /****************************/<br>  // 使用defineExpose将组件中的数据交给外部<br>  defineExpose(&#123;name,age&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="3-12-【props】"><a href="#3-12-【props】" class="headerlink" title="3.12. 【props】"></a>3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&gt;<span class="hljs-comment">// 定义一个接口，限制每个Person对象的格式</span><br><span class="hljs-keyword">export</span> interface <span class="hljs-title class_">PersonInter</span> &#123;<br> <span class="hljs-attr">id</span>:string,<br> <span class="hljs-attr">name</span>:string,<br>    <span class="hljs-attr">age</span>:number<br>   &#125;<br>   <br><span class="hljs-comment">// 定义一个自定义类型Persons</span><br><span class="hljs-keyword">export</span> type <span class="hljs-title class_">Persons</span> = <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">PersonInter</span>&gt;<br></code></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&gt;&lt;template&gt;<br>&lt;Person :list=&quot;persons&quot;/&gt;<br>&lt;/template&gt;<br>  <br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import Person from &#x27;./components/Person.vue&#x27;<br>  import &#123;reactive&#125; from &#x27;vue&#x27;<br>    import &#123;type Persons&#125; from &#x27;./types&#x27;<br>  <br>    let persons = reactive&lt;Persons&gt;([<br>     &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,<br>      &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,<br>       &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;<br>     ])<br>   &lt;/script&gt;<br>  <br></code></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Vue">&gt;&lt;template&gt;<br>&lt;div class=&quot;person&quot;&gt;<br> &lt;ul&gt;<br>     &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;<br>        &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;<br>      &lt;/li&gt;<br>    &lt;/ul&gt;<br>   &lt;/div&gt;<br>   &lt;/template&gt;<br>  <br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>import &#123;defineProps&#125; from &#x27;vue&#x27;<br>import &#123;type PersonInter&#125; from &#x27;@/types&#x27;<br>  <br>  // 第一种写法：仅接收<br>// const props = defineProps([&#x27;list&#x27;])<br>  <br>  // 第二种写法：接收+限制类型<br>// defineProps&lt;&#123;list:Persons&#125;&gt;()<br>  <br>  // 第三种写法：接收+限制类型+指定默认值+限制必要性<br>let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;<br>     list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]<br>  &#125;)<br>   console.log(props)<br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】"><a href="#3-13-【生命周期】" class="headerlink" title="3.13. 【生命周期】"></a>3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;person&quot;&gt;<br>    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;<br>    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;!-- vue3写法 --&gt;<br>&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;<br>  import &#123; <br>    ref, <br>    onBeforeMount, <br>    onMounted, <br>    onBeforeUpdate, <br>    onUpdated, <br>    onBeforeUnmount, <br>    onUnmounted <br>  &#125; from &#x27;vue&#x27;<br><br>  // 数据<br>  let sum = ref(0)<br>  // 方法<br>  function changeSum() &#123;<br>    sum.value += 1<br>  &#125;<br>  console.log(&#x27;setup&#x27;)<br>  // 生命周期钩子<br>  onBeforeMount(()=&gt;&#123;<br>    console.log(&#x27;挂载之前&#x27;)<br>  &#125;)<br>  onMounted(()=&gt;&#123;<br>    console.log(&#x27;挂载完毕&#x27;)<br>  &#125;)<br>  onBeforeUpdate(()=&gt;&#123;<br>    console.log(&#x27;更新之前&#x27;)<br>  &#125;)<br>  onUpdated(()=&gt;&#123;<br>    console.log(&#x27;更新完毕&#x27;)<br>  &#125;)<br>  onBeforeUnmount(()=&gt;&#123;<br>    console.log(&#x27;卸载之前&#x27;)<br>  &#125;)<br>  onUnmounted(()=&gt;&#123;<br>    console.log(&#x27;卸载完毕&#x27;)<br>  &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】"><a href="#3-14-【自定义hook】" class="headerlink" title="3.14. 【自定义hook】"></a>3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;ref,onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">increment</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    sum.<span class="hljs-property">value</span> += <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">decrement</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    sum.<span class="hljs-property">value</span> -= <span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">increment</span>()<br>  &#125;)<br><br>  <span class="hljs-comment">//向外部暴露数据</span><br>  <span class="hljs-keyword">return</span> &#123;sum,increment,decrement&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;reactive,onMounted&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> axios,&#123;<span class="hljs-title class_">AxiosError</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> dogList = reactive&lt;string[]&gt;([])<br><br>  <span class="hljs-comment">// 方法</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDog</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 发请求</span><br>      <span class="hljs-keyword">let</span> &#123;data&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)<br>      <span class="hljs-comment">// 维护数据</span><br>      dogList.<span class="hljs-title function_">push</span>(data.<span class="hljs-property">message</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-comment">// 处理错误</span><br>      <span class="hljs-keyword">const</span> err = &lt;<span class="hljs-title class_">AxiosError</span>&gt;error<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 挂载钩子</span><br>  <span class="hljs-title function_">onMounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-title function_">getDog</span>()<br>  &#125;)<br><br>  <span class="hljs-comment">//向外部暴露数据</span><br>  <span class="hljs-keyword">return</span> &#123;dogList,getDog&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;<br>  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;<br>  &lt;hr&gt;<br>  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; <br>  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;<br>  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>  import &#123;defineComponent&#125; from &#x27;vue&#x27;<br><br>  export default defineComponent(&#123;<br>    name:&#x27;App&#x27;,<br>  &#125;)<br>&lt;/script&gt;<br><br>&lt;script setup lang=&quot;ts&quot;&gt;<br>  import useSum from &#x27;./hooks/useSum&#x27;<br>  import useDog from &#x27;./hooks/useDog&#x27;<br><br>  let &#123;sum,increment,decrement&#125; = useSum()<br>  let &#123;dogList,getDog&#125; = useDog()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-【对路由的理解】"><a href="#4-1-【对路由的理解】" class="headerlink" title="4.1. 【对路由的理解】"></a>4.1. 【对路由的理解】</h2><img src="images/image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】"><a href="#4-2-【基本切换效果】" class="headerlink" title="4.2. 【基本切换效果】"></a>4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/Home.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">News</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/News.vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/About.vue&#x27;</span><br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br><span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(),<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;<br>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router/index&#x27;</span><br>app.<span class="hljs-title function_">use</span>(router)<br><br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app&quot;&gt;<br>    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;<br>    &lt;!-- 导航区 --&gt;<br>    &lt;div class=&quot;navigate&quot;&gt;<br>      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;<br>      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;<br>      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;<br>    &lt;/div&gt;<br>    &lt;!-- 展示区 --&gt;<br>    &lt;div class=&quot;main-content&quot;&gt;<br>      &lt;RouterView&gt;&lt;/RouterView&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;<br>  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】"><a href="#4-3-【两个注意点】" class="headerlink" title="4.3. 【两个注意点】"></a>4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】"><a href="#4-4-【路由器工作模式】" class="headerlink" title="4.4.【路由器工作模式】"></a>4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(), <span class="hljs-comment">//history模式</span><br>  <span class="hljs-comment">/******/</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHashHistory</span>(), <span class="hljs-comment">//hash模式</span><br>  <span class="hljs-comment">/******/</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】"><a href="#4-5-【to的两种写法】" class="headerlink" title="4.5. 【to的两种写法】"></a>4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 第一种：to的字符串写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;<br><br>&lt;!-- 第二种：to的对象写法 --&gt;<br>&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="4-6-【命名路由】"><a href="#4-6-【命名路由】" class="headerlink" title="4.6. 【命名路由】"></a>4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">routes</span>:[<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/news&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;<br><br>&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;<br>&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;<br></code></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】"><a href="#4-7-【嵌套路由】" class="headerlink" title="4.7. 【嵌套路由】"></a>4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>:<span class="hljs-title function_">createWebHistory</span>(),<br><span class="hljs-attr">routes</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zhuye&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/home&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xinwen&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/news&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">News</span>,<br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiang&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span><br>&#125;<br>]<br>&#125;,<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;guanyu&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/about&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;<br>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;<br>&lt;!-- 或 --&gt;<br>&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;<br></code></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;news&quot;&gt;<br>    &lt;nav class=&quot;news-list&quot;&gt;<br>      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;<br>        &#123;&#123;news.name&#125;&#125;<br>      &lt;/RouterLink&gt;<br>    &lt;/nav&gt;<br>    &lt;div class=&quot;news-detail&quot;&gt;<br>      &lt;RouterView/&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】"><a href="#4-8-【路由传参】" class="headerlink" title="4.8. 【路由传参】"></a>4.8. 【路由传参】</h2><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;<br>&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;<br>跳转<br>&lt;/router-link&gt;<br><br>&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;<br>&lt;RouterLink <br>  :to=&quot;&#123;<br>    //name:&#x27;xiang&#x27;, //用name也可以跳转<br>    path:&#x27;/news/detail&#x27;,<br>    query:&#123;<br>      id:news.id,<br>      title:news.title,<br>      content:news.content<br>    &#125;<br>  &#125;&quot;<br>&gt;<br>  &#123;&#123;news.title&#125;&#125;<br>&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-comment">// 打印query参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>)<br></code></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;<br>&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;<br><br>&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;<br>&lt;RouterLink <br>  :to=&quot;&#123;<br>    name:&#x27;xiang&#x27;, //用name跳转<br>    params:&#123;<br>      id:news.id,<br>      title:news.title,<br>      content:news.title<br>    &#125;<br>  &#125;&quot;<br>&gt;<br>  &#123;&#123;news.title&#125;&#125;<br>&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-comment">// 打印params参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">params</span>)<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】"><a href="#4-9-【路由的props配置】" class="headerlink" title="4.9. 【路由的props配置】"></a>4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xiang&#x27;</span>,<br><span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;detail/:id/:title/:content&#x27;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Detail</span>,<br><br>  <span class="hljs-comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-comment">// props:&#123;a:1,b:2,c:3&#125;, </span><br><br>  <span class="hljs-comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span><br>  <span class="hljs-comment">// props:true</span><br>  <br>  <span class="hljs-comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span><br>  <span class="hljs-title function_">props</span>(<span class="hljs-params">route</span>)&#123;<br>    <span class="hljs-keyword">return</span> route.<span class="hljs-property">query</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】"><a href="#4-10-【-replace属性】" class="headerlink" title="4.10. 【 replace属性】"></a>4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】"><a href="#4-11-【编程式导航】" class="headerlink" title="4.11. 【编程式导航】"></a>4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;useRoute,useRouter&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-keyword">const</span> route = <span class="hljs-title function_">useRoute</span>()<br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">useRouter</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">query</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(route.<span class="hljs-property">parmas</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-property">push</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(router.<span class="hljs-property">replace</span>)<br></code></pre></td></tr></table></figure><h2 id="4-12-【重定向】"><a href="#4-12-【重定向】" class="headerlink" title="4.12. 【重定向】"></a>4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>:<span class="hljs-string">&#x27;/about&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1【准备一个效果】"><a href="#5-1【准备一个效果】" class="headerlink" title="5.1【准备一个效果】"></a>5.1【准备一个效果】</h2><img src="./images/pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】"><a href="#5-2【搭建-pinia-环境】" class="headerlink" title="5.2【搭建 pinia 环境】"></a>5.2【搭建 pinia 环境】</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-comment">/* 引入createPinia，用于创建pinia */</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">/* 创建pinia */</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>()<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>)<br><br><span class="hljs-comment">/* 使用插件 */</span>&#123;&#125;<br>app.<span class="hljs-title function_">use</span>(pinia)<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】"><a href="#5-3【存储-读取数据】" class="headerlink" title="5.3【存储+读取数据】"></a>5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;&#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">sum</span>:<span class="hljs-number">6</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTalkStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;&#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">talkList</span>:[<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada01&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,<br>     &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada02&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,<br>        &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;yuysada03&#x27;</span>,<span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;<br>      ]<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  // 引入对应的useXxxxxStore<br>  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;<br>  <br>  // 调用useXxxxxStore得到对应的store<br>  const sumStore = useSumStore()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;ul&gt;<br>    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;<br>      &#123;&#123; talk.content &#125;&#125;<br>    &lt;/li&gt;<br>  &lt;/ul&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  import axios from &#x27;axios&#x27;<br>  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;<br><br>  const talkStore = useTalkStore()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式"><a href="#5-4-【修改数据】-三种方式" class="headerlink" title="5.4.【修改数据】(三种方式)"></a>5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ts">countStore.<span class="hljs-property">sum</span> = <span class="hljs-number">666</span><br></code></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">countStore.$patch(&#123;<br>  <span class="hljs-attr">sum</span>:<span class="hljs-number">999</span>,<br>  <span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>, &#123;<br>  <span class="hljs-comment">/*************/</span><br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">//加</span><br>    <span class="hljs-title function_">increment</span>(<span class="hljs-params">value:number</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> &lt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">//操作countStore中的sum</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> += value<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">//减</span><br>    <span class="hljs-title function_">decrement</span>(<span class="hljs-params">value:number</span>)&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">sum</span> -= value<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">/*************/</span><br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 使用countStore</span><br><span class="hljs-keyword">const</span> countStore = <span class="hljs-title function_">useCountStore</span>()<br><br><span class="hljs-comment">// 调用对应action</span><br>countStore.<span class="hljs-title function_">incrementOdd</span>(n.<span class="hljs-property">value</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】"><a href="#5-5-【storeToRefs】" class="headerlink" title="5.5.【storeToRefs】"></a>5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;count&quot;&gt;<br>&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;<br>  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;<br>  /* 引入storeToRefs */<br>  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;<br><br>/* 得到countStore */<br>  const countStore = useCountStore()<br>  /* 使用storeToRefs转换countStore，随后解构 */<br>  const &#123;sum&#125; = storeToRefs(countStore)<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="5-6-【getters】"><a href="#5-6-【getters】" class="headerlink" title="5.6.【getters】"></a>5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入defineStore用于创建store</span><br><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-comment">// 定义并暴露一个store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCountStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>  <span class="hljs-comment">// 动作</span><br>  <span class="hljs-attr">actions</span>:&#123;<br>    <span class="hljs-comment">/************/</span><br>  &#125;,<br>  <span class="hljs-comment">// 状态</span><br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">sum</span>:<span class="hljs-number">1</span>,<br>      <span class="hljs-attr">school</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 计算</span><br>  <span class="hljs-attr">getters</span>:&#123;<br>    <span class="hljs-attr">bigSum</span>:(state):<span class="hljs-function"><span class="hljs-params">number</span> =&gt;</span> state.<span class="hljs-property">sum</span> *<span class="hljs-number">10</span>,<br>    <span class="hljs-title function_">upperSchool</span>():string&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>. school.<span class="hljs-title function_">toUpperCase</span>()<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123;increment,decrement&#125; = countStore<br><span class="hljs-keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="hljs-title function_">storeToRefs</span>(countStore)<br></code></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】"><a href="#5-7-【-subscribe】" class="headerlink" title="5.7.【$subscribe】"></a>5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts">talkStore.$subscribe(<span class="hljs-function">(<span class="hljs-params">mutate,state</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;LoveTalk&#x27;</span>,mutate,state)<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(talkList.<span class="hljs-property">value</span>))<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】"><a href="#5-8-【store组合式写法】" class="headerlink" title="5.8. 【store组合式写法】"></a>5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123;defineStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123;nanoid&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nanoid&#x27;</span><br><span class="hljs-keyword">import</span> &#123;reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTalkStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;talk&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">// talkList就是state</span><br>  <span class="hljs-keyword">const</span> talkList = <span class="hljs-title function_">reactive</span>(<br>    <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;talkList&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>) || []<br>  )<br><br>  <span class="hljs-comment">// getATalk函数相当于action</span><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getATalk</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span><br>    <span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">content</span>:title&#125;&#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)<br>    <span class="hljs-comment">// 把请求回来的字符串，包装成一个对象</span><br>    <span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">id</span>:<span class="hljs-title function_">nanoid</span>(),title&#125;<br>    <span class="hljs-comment">// 放到数组中</span><br>    talkList.<span class="hljs-title function_">unshift</span>(obj)<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123;talkList,getATalk&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="images/image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】"><a href="#6-1-【props】" class="headerlink" title="6.1. 【props】"></a>6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件，&lt;/h3&gt;<br>&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;<br>&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>// 数据<br>const car = ref(&#x27;奔驰&#x27;)<br>const toy = ref()<br>// 方法<br>function getToy(value:string)&#123;<br>toy.value = value<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;child&quot;&gt;<br>    &lt;h3&gt;子组件&lt;/h3&gt;<br>&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>const toy = ref(&#x27;奥特曼&#x27;)<br><br>defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】"><a href="#6-2-【自定义事件】" class="headerlink" title="6.2. 【自定义事件】"></a>6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 &#x3D;&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）    </li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">send-toy</span>=<span class="hljs-string">&quot;toy = $event&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//子组件中，触发事件：</span><br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;send-toy&#x27;</span>, 具体数据)<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】"><a href="#6-3-【mitt】" class="headerlink" title="6.3. 【mitt】"></a>6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i mitt<br></code></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 引入mitt </span><br><span class="hljs-keyword">import</span> mitt <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mitt&quot;</span>;<br><br><span class="hljs-comment">// 创建emitter</span><br><span class="hljs-keyword">const</span> emitter = <span class="hljs-title function_">mitt</span>()<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  // 绑定事件</span><br><span class="hljs-comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span><br><span class="hljs-comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span><br><span class="hljs-comment">  &#125;)</span><br><span class="hljs-comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span><br><span class="hljs-comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span><br><span class="hljs-comment">  &#125;)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  setInterval(() =&gt; &#123;</span><br><span class="hljs-comment">    // 触发事件</span><br><span class="hljs-comment">    emitter.emit(&#x27;abc&#x27;,666)</span><br><span class="hljs-comment">    emitter.emit(&#x27;xyz&#x27;,777)</span><br><span class="hljs-comment">  &#125;, 1000);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  setTimeout(() =&gt; &#123;</span><br><span class="hljs-comment">    // 清理事件</span><br><span class="hljs-comment">    emitter.all.clear()</span><br><span class="hljs-comment">  &#125;, 3000); </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 创建并暴露mitt</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> emitter<br></code></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> emitter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/emitter&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; onUnmounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">// 绑定事件</span><br>emitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;send-toy事件被触发&#x27;</span>,value)<br>&#125;)<br><br><span class="hljs-title function_">onUnmounted</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">// 解绑事件</span><br>  emitter.<span class="hljs-title function_">off</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> emitter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/emitter&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendToy</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 触发事件</span><br>  emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;send-toy&#x27;</span>,toy.<span class="hljs-property">value</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】"><a href="#6-4-【v-model】" class="headerlink" title="6.4.【v-model】"></a>6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 使用v-model指令 --&gt;<br>&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;<br><br>&lt;!-- v-model的本质是下面这行代码 --&gt;<br>&lt;input <br>  type=&quot;text&quot; <br>  :value=&quot;userName&quot; <br>  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;<br>&gt;<br></code></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 组件标签上使用v-model指令 --&gt;<br>&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;<br><br>&lt;!-- 组件标签上v-model的本质 --&gt;<br>&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;<br></code></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;<br>&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;<br>    &lt;input <br>       type=&quot;text&quot; <br>       :value=&quot;modelValue&quot; <br>       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;<br>  // 接收props<br>  defineProps([&#x27;modelValue&#x27;])<br>  // 声明事件<br>  const emit = defineEmits([&#x27;update:model-value&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 也可以更换value，例如改成abc--&gt;<br>&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;<br><br>&lt;!-- 上面代码的本质如下 --&gt;<br>&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;<br></code></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;box&quot;&gt;<br>    &lt;input <br>       type=&quot;text&quot; <br>       :value=&quot;abc&quot; <br>       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;<br>    &gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;<br>  // 接收props<br>  defineProps([&#x27;abc&#x27;])<br>  // 声明事件<br>  const emit = defineEmits([&#x27;update:abc&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】"><a href="#6-5-【-attrs-】" class="headerlink" title="6.5.【$attrs 】"></a>6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件&lt;/h3&gt;<br>&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>import Child from &#x27;./Child.vue&#x27;<br>import &#123; ref &#125; from &quot;vue&quot;;<br>let a = ref(1)<br>let b = ref(2)<br>let c = ref(3)<br>let d = ref(4)<br><br>function updateA(value)&#123;<br>a.value = value<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;child&quot;&gt;<br>&lt;h3&gt;子组件&lt;/h3&gt;<br>&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;<br>import GrandChild from &#x27;./GrandChild.vue&#x27;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div class=&quot;grand-child&quot;&gt;<br>&lt;h3&gt;孙组件&lt;/h3&gt;<br>&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;<br>&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;<br>&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;<br>defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】"><a href="#6-6-【-refs、-parent】" class="headerlink" title="6.6. 【$refs、$parent】"></a>6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】"><a href="#6-7-【provide、inject】" class="headerlink" title="6.7. 【provide、inject】"></a>6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;father&quot;&gt;<br>    &lt;h3&gt;父组件&lt;/h3&gt;<br>    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;<br>    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;<br>    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;<br>    &lt;Child/&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;<br>  import Child from &#x27;./Child.vue&#x27;<br>  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;<br>  // 数据<br>  let money = ref(100)<br>  let car = reactive(&#123;<br>    brand:&#x27;奔驰&#x27;,<br>    price:100<br>  &#125;)<br>  // 用于更新money的方法<br>  function updateMoney(value:number)&#123;<br>    money.value += value<br>  &#125;<br>  // 提供数据<br>  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)<br>  provide(&#x27;car&#x27;,car)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;grand-child&quot;&gt;<br>    &lt;h3&gt;我是孙组件&lt;/h3&gt;<br>    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;<br>    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;<br>    &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;<br>  import &#123; inject &#125; from &#x27;vue&#x27;;<br>  // 注入数据<br> let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)<br>  let car = inject(&#x27;car&#x27;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】"><a href="#6-8-【pinia】" class="headerlink" title="6.8. 【pinia】"></a>6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】"><a href="#6-9-【slot】" class="headerlink" title="6.9. 【slot】"></a>6.9. 【slot】</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><p>![[前端了解&#x2F;vue&#x2F;_resources&#x2F;Vue3快速上手&#x2F;b23349c818acb70a1969d7300ae27368_MD5.png]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category title=&quot;今日热门游戏&quot;&gt;<br>          &lt;ul&gt;<br>            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>          &lt;/ul&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>          &lt;div class=&quot;item&quot;&gt;<br>            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;<br>            &lt;!-- 默认插槽 --&gt;<br>            &lt;slot&gt;&lt;/slot&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>        &lt;Category title=&quot;今日热门游戏&quot;&gt;<br>          &lt;template v-slot:s1&gt;<br>            &lt;ul&gt;<br>              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>            &lt;/ul&gt;<br>          &lt;/template&gt;<br>          &lt;template #s2&gt;<br>            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;<br>          &lt;/template&gt;<br>        &lt;/Category&gt;<br>子组件中：<br>        &lt;template&gt;<br>          &lt;div class=&quot;item&quot;&gt;<br>            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;<br>            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;<br>            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;<br>          &lt;/div&gt;<br>        &lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vue">父组件中：<br>      &lt;Game v-slot=&quot;params&quot;&gt;<br>      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;<br>      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;<br>        &lt;ul&gt;<br>          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br>      &lt;/Game&gt;<br><br>子组件中：<br>      &lt;template&gt;<br>        &lt;div class=&quot;category&quot;&gt;<br>          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;<br>          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;<br>        &lt;/div&gt;<br>      &lt;/template&gt;<br><br>      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;<br>        import &#123;reactive&#125; from &#x27;vue&#x27;<br>        let games = reactive([<br>          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,<br>          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;<br>        ])<br>      &lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】"><a href="#7-1-【shallowRef-与-shallowReactive-】" class="headerlink" title="7.1.【shallowRef 与 shallowReactive 】"></a>7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> myVar = <span class="hljs-title function_">shallowRef</span>(initialValue);<br></code></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myObj = <span class="hljs-title function_">shallowReactive</span>(&#123; ... &#125;);<br></code></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】"><a href="#7-2-【readonly-与-shallowReadonly】" class="headerlink" title="7.2.【readonly 与 shallowReadonly】"></a>7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> original = <span class="hljs-title function_">reactive</span>(&#123; ... &#125;);<br><span class="hljs-keyword">const</span> readOnlyCopy = <span class="hljs-title function_">readonly</span>(original);<br></code></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> original = <span class="hljs-title function_">reactive</span>(&#123; ... &#125;);<br><span class="hljs-keyword">const</span> shallowReadOnlyCopy = <span class="hljs-title function_">shallowReadonly</span>(original);<br></code></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】"><a href="#7-3-【toRaw-与-markRaw】" class="headerlink" title="7.3.【toRaw 与 markRaw】"></a>7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问&#x2F;跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-comment">/* toRaw */</span><br><span class="hljs-comment">// 响应式对象</span><br><span class="hljs-keyword">let</span> person = <span class="hljs-title function_">reactive</span>(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tony&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;)<br><span class="hljs-comment">// 原始对象</span><br><span class="hljs-keyword">let</span> rawPerson = <span class="hljs-title function_">toRaw</span>(person)<br><br><br><span class="hljs-comment">/* markRaw */</span><br><span class="hljs-keyword">let</span> citysd = <span class="hljs-title function_">markRaw</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda01&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda02&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda03&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天津&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda04&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;重庆&#x27;</span>&#125;<br>])<br><span class="hljs-comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span><br><span class="hljs-keyword">let</span> citys2 = <span class="hljs-title function_">reactive</span>(citys)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(person))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(rawPerson))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(citys))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">isReactive</span>(citys2))<br></code></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* markRaw */</span><br><span class="hljs-keyword">let</span> citys = <span class="hljs-title function_">markRaw</span>([<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda01&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;北京&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda02&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;上海&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda03&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;天津&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;asdda04&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;重庆&#x27;</span>&#125;<br>])<br><span class="hljs-comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span><br><span class="hljs-keyword">let</span> citys2 = <span class="hljs-title function_">reactive</span>(citys)<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】"><a href="#7-4-【customRef】" class="headerlink" title="7.4.【customRef】"></a>7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;customRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-attr">initValue</span>:<span class="hljs-built_in">string</span>,<span class="hljs-attr">delay</span>:<span class="hljs-built_in">number</span></span>)&#123;<br>  <span class="hljs-keyword">let</span> msg = <span class="hljs-title function_">customRef</span>(<span class="hljs-function">(<span class="hljs-params">track,trigger</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">timer</span>:<span class="hljs-built_in">number</span><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">track</span>() <span class="hljs-comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span><br>        <span class="hljs-keyword">return</span> initValue<br>      &#125;,<br>      <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>)&#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          initValue = value<br>          <span class="hljs-title function_">trigger</span>() <span class="hljs-comment">//通知Vue数据msg变化了</span><br>        &#125;, delay);<br>      &#125;<br>    &#125;<br>  &#125;) <br>  <span class="hljs-keyword">return</span> &#123;msg&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>组件中使用：</p><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-【Teleport】"><a href="#8-1-【Teleport】" class="headerlink" title="8.1. 【Teleport】"></a>8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;body&#x27;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;modal&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是一个弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是弹窗中的一些内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-【Suspense】"><a href="#8-2-【Suspense】" class="headerlink" title="8.2. 【Suspense】"></a>8.2. 【Suspense】</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li>异步引入组件</li><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> &#123; defineAsyncComponent,<span class="hljs-title class_">Suspense</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">defineAsyncComponent</span>(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./Child.vue&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;div class=&quot;app&quot;&gt;<br>        &lt;h3&gt;我是App组件&lt;/h3&gt;<br>        &lt;Suspense&gt;<br>          &lt;template v-slot:default&gt;<br>            &lt;Child/&gt;<br>          &lt;/template&gt;<br>          &lt;template v-slot:fallback&gt;<br>            &lt;h3&gt;加载中.......&lt;/h3&gt;<br>          &lt;/template&gt;<br>        &lt;/Suspense&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】"><a href="#8-3-【全局API转移到应用对象】" class="headerlink" title="8.3.【全局API转移到应用对象】"></a>8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】"><a href="#8-4-【其他】" class="headerlink" title="8.4.【其他】"></a>8.4.【其他】</h2><ul><li><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p></li><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习</title>
      <link href="/posts/2025/07/Fronted/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/4723d6e9.html"/>
      <url>/posts/2025/07/Fronted/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/4723d6e9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前端学习"><a href="#前端学习" class="headerlink" title="前端学习"></a>前端学习</h1><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><p>跟着发的视频学就可以了，一定要记笔记 (东西很多会忘)</p><blockquote><p>我是整体跟着这套视频学下来的，但是学完之后的感觉就是内容很杂很多，学的过程中也不知道哪些是重点，所以有必要在这里列一下哪些是着重需要关注的知识。</p></blockquote><p>总之所有视频都要看一遍，按照自己的节奏来，不需要赶进度，重点一定要自己都理解了。</p><h3 id="三件套"><a href="#三件套" class="headerlink" title="三件套"></a>三件套</h3><p><em><strong>HTML部分</strong></em></p><p>可以适当倍速看，很多标签其实不用学，重点学会 <strong>HTML基础结构</strong> + 标签<strong>div</strong>、<strong>h</strong>、<strong>a</strong>、<strong>img</strong>、<strong>iframe</strong>、<strong>table</strong>(后面两个其实已经过时了，但面试会问) + <strong>浏览器原理</strong>(面试) + <strong>URL</strong>(面试)</p><p><em><strong>CSS部分</strong></em></p><p>👇目前常用的，也就是必须掌握的：</p><p>文本字体属性</p><p>伪元素+伪类</p><p><strong>选择器</strong>理解+笔记记好就ok、后期的话要会用深度选择器</p><p><strong>flex布局</strong>、绝对定位、相对定位、浮动、粘性定位(面试)</p><p>居中 (要学会所有居中方式)</p><p><strong>盒子模型</strong></p><p>在CSS基础学完后，跟着做一个完整的页面(我们当时做的是视频里的网易云)，跟着视频做一遍CSS基本上都会用了。（后面仿王者荣耀的我们没做，如果你觉得对CSS力不从心的话可以继续做，基本做一个就🆗了）</p><blockquote><p>这部分笔记一定要记好，以后可能会经常翻出来看</p><p>不会的要经常查MDN文档 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS：层叠样式表 | MDN</a></p></blockquote><p>如果可以学学Less和Sass，是CSS的扩展，很好用可以简化CSS语法编写</p><p>移动端适配（就是rem-vw-vh-@media这些） (这一块我当时没当重点学也没咋学好，听说GitHub上是有写好的适配)（可以自己抉择放后面学也行）</p><p><em><strong>JS部分</strong></em></p><p>去翻看了一下课</p><p>这一块视频有*（掌握）*标签的都得认真学</p><p>不会的或者哪里很难懂的可以去b站找相应视频看，一般b站的视频都讲的很通俗易懂</p><p>JS学习有一定难度，按自己节奏来不能赶</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><blockquote><p>这一块到学完三件套再说，学完记得告知学姐学长一下。</p></blockquote><h2 id="能力要求"><a href="#能力要求" class="headerlink" title="能力要求"></a>能力要求</h2><p><em><strong>看文档的能力</strong></em></p><p>前端当前所有的无论技术，框架，语法都有相应的文档，前期在学习三件套期间我们就要接触MDN文档，很多API或是属性词条都应以官方文档为主</p><p>在有一定基础后，后续学习大部分时间是和文档&amp;AI打交道</p><p><em><strong>GitHub</strong></em></p><p>前期拥有有一个自己的GitHub账号，可以学一些简单的操作，把自己的笔记，简单的程序demo什么的都可以放到Github上。</p><p><em><strong>自学能力</strong></em></p><p>前端具有一定的广度和深度，不同方向的入门难度、体系成熟度(生态建设)都有很大的差异，当然我们前期三件套是每个前端都得掌握的，而在后的扩展，比如说：新奇的技术栈(太多了根本学不完😭)、优化方案手段、好用的插件、博客建设等等，很多东西是需要自发探索的。</p><h2 id="工具资料"><a href="#工具资料" class="headerlink" title="工具资料"></a>工具资料</h2><p>推荐播放器👇（支持绑定阿里云盘，可以开几十倍速）</p><p><a href="https://snail8.cn/html/index.html">蜗牛云盘 - 全面的阿里云盘、115网盘第三方客户端</a></p><p>要是嫌Typora字量大会卡的话可以试试👇</p><p><a href="https://obsidian.md/">Obsidian - Sharpen your thinking</a></p><p>👆这个可以自定义样式，还有很多第三方插件</p><h3 id="各类视频资源"><a href="#各类视频资源" class="headerlink" title="各类视频资源"></a>各类视频资源</h3><p><a href="https://www.qzmzhp.cn/">青知木杂货铺-程序员资源网</a></p><p>账号：<a href="mailto:&#x31;&#x35;&#x37;&#x32;&#x39;&#57;&#x36;&#x32;&#56;&#x39;&#56;&#x40;&#49;&#54;&#51;&#46;&#99;&#x6f;&#x6d;">15729962898@163.com</a></p><p>密码：chen6411</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ABAP">使用完后务必退出，同一账号只支持一台设备登录<br></code></pre></td></tr></table></figure></blockquote><h2 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h2><h3 id="实用"><a href="#实用" class="headerlink" title="实用"></a>实用</h3><p><strong>Chinese (Simplified) (简体中文)</strong></p><p><strong>Chinese Lorem</strong></p><blockquote><p>汉化</p></blockquote><p><strong>Auto Rename Tag</strong></p><blockquote><p>自动成对HTML标签</p></blockquote><p><strong>Live Server</strong></p><blockquote><p>在HTML文件中，右键Open Live Server可直接打开页面，可以实时更新</p></blockquote><p><strong>Image preview</strong></p><blockquote><p>鼠标悬停img链接可预览显示图片</p></blockquote><p><strong>Path Intellisense</strong></p><blockquote><p>代码自动补全</p></blockquote><p><strong>Prettier - Code formatter</strong></p><blockquote><p>格式化程序，为代码执行一致的样式</p></blockquote><p><strong>Error Lens</strong></p><blockquote><p>报错提示</p></blockquote><p><strong>project-tree</strong></p><blockquote><p><code>ctre + shift + p</code> 输入 <code>Project Tree</code> 生成项目结构树到README文件（写文章博客可能会用到）</p></blockquote><h3 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h3><p><strong>VSCode Great Icons</strong></p><blockquote><p>改变你左侧栏的文件图标</p></blockquote><p><strong>background-cover</strong></p><blockquote><p>可以改你编辑器的背景图</p></blockquote><p><strong>Gradient Theme</strong></p><blockquote><p>我当前在用的主题，非常好看</p></blockquote><p><strong>SynthWave ‘84</strong></p><blockquote><p>特别闪的主题样式 (当时豪哥给我配的)</p></blockquote><p>更多的插件自己探索喽😼</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly安装之旅</title>
      <link href="/posts/2025/07/blog/butterfly%E5%AE%89%E8%A3%85/e70f18fc.html"/>
      <url>/posts/2025/07/blog/butterfly%E5%AE%89%E8%A3%85/e70f18fc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>创建一个文件夹</p><p>在文件夹打开git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone -b main https://github.com/jerryc127/hexo -theme-butterfly .git themes/butterfly<br></code></pre></td></tr></table></figure><p>应用主题<br>修改Hexo 根目录下的_config.yml，把主题改为butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">theme:  butterfly<br></code></pre></td></tr></table></figure><p>安装插件<br>下载安装渲染器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo -renderer-pug hexo -renderer-stylus  --save<br></code></pre></td></tr></table></figure><p>重中之重</p><p>在hexo 的根目录创建一个文件_config.butterfly.yml，并把主题目录的_config.yml 内容复制_config.butterfly.yml到 去。</p><blockquote><p>注意:</p></blockquote><p>复制的是主题的_config.yml，而不是hexo 的_config.yml</p><p>不要把主题目录的_config.yml删掉</p><p>以后只需要在_config.butterfly.yml进行配置就行。如果使用了_config.butterfly.yml， 配置主题的_config.yml将不会有效果。</p><p>Hexo 会自动合并主题中的_config.yml和_config.butterfly.yml里的配置，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔改之旅</title>
      <link href="/posts/2025/07/blog/%E9%AD%94%E6%94%B9%E4%B9%8B%E6%97%85/afacad78.html"/>
      <url>/posts/2025/07/blog/%E9%AD%94%E6%94%B9%E4%B9%8B%E6%97%85/afacad78.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">文档指路<br>https://butterfly.zhheo.com/create.html<br><br>我的主题色 : rgb(191, 219, 221)<br><br>加载动画 (安知鱼)<br>https://blog.anheyu.com/posts/52d8.html<br><br>导航栏修改(安知鱼)<br>https://blog.anheyu.com/posts/8e53.html<br>试了一下, 每次改完网站就挂了, 以后再试试其他主题<br></code></pre></td></tr></table></figure><p>上面这些适合想要完全按照自己喜好搭建博客的仔仔啊</p><p>但是框框太懒了, 搭一半就放弃了 , 直接去用别人现成的主题去了</p><p>找到了一个现成的主题(安知鱼)<br><a href="https://docs.anheyu.com/intro.html">https://docs.anheyu.com/intro.html</a></p><p>基本clone下来就可以了, 不需要过多的配置, up主已经帮我们配好了</p><p>同时推荐一下这个up主发的部署视频(默认你已经有github了啊)<br><a href="【07.通过github page部署至互联网】https://www.bilibili.com/video/BV1zT411A7XL?vd_source=26eb5025743189cb77f15d6e356b6da3">07.通过github page部署至互联网</a></p><p>自动部署, 完成之后只需要把更新的内容上传就可以了, 不用再自己部署了<br><a href="【13.hexo完成github action自动部署】https://www.bilibili.com/video/BV19P41157no?vd_source=26eb5025743189cb77f15d6e356b6da3">hexo完成github action自动部署</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>中间主包遇到了一个小问题: 没有给每个文章设置自己的访问链接, 这里分享一下</p><p>首先安装一个插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><p>在 _config.yml(不是主题的)添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># abbrlink config<br>abbrlink:<br>  alg: crc32  # 算法：crc16(default) and crc32<br>  rep: hex    # 进制：dec(default) and hex<br>  draft: false ## 草稿是否永久链接<br>  field: post ## only support &#x27;post&#x27;<br>  # enable: true # 是否开启，可不写，默认开启<br></code></pre></td></tr></table></figure><p>把这个设置好(可以按照自己的喜好设置哦)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">permalink: posts/:year/:month/:title/:abbrlink.html<br></code></pre></td></tr></table></figure><p>大功告成😘</p><h1 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h1><p>这些都是框框的血泪史, 中间遇到了无数的bug, 光是blog就重装了四五次了, 希望这篇帖子能帮助到你🤣</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/posts/2025/06/Fronted/node/857fe845.html"/>
      <url>/posts/2025/06/Fronted/node/857fe845.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Node定义"><a href="#Node定义" class="headerlink" title="Node定义"></a>Node定义</h1><p><code>Node.js</code>是一个基于 <code>V8 JavaScript</code> 引擎的<code>JavaScript</code>运行时的环境</p><p><code>Node</code> 程序是使用 <code>c++/ c/ js</code> 语言编写的<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;e49f63c48826b59143b4b3366c92cf75_MD5.jpeg|Open: Pasted image 20250522151116.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;e49f63c48826b59143b4b3366c92cf75_MD5.jpeg]]</p><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>一: *目前前端开发的库都是以node包的形式进行管理</p><p>二: *npm、yarn、pnpm工具成为前端开发使用最多的工具；</p><p>三: 越来越多的公司使用Node.js作为web服务器开发、中间件、代理服务器；</p><p>四, 大量项目需要借助Node.js完成前后端渲染的同构应用</p><p>五, 资深前端工程师需要为项目编写脚本工具（前端工程师编写脚本通常会使用JavaScript,而不是Python或者shel)</p><p>六, 很多企业在使用Electron来开发桌面应用程序； </p><h3 id="管理node的工具"><a href="#管理node的工具" class="headerlink" title="管理node的工具"></a>管理node的工具</h3><h1 id="Node-程序传递参数"><a href="#Node-程序传递参数" class="headerlink" title="Node 程序传递参数"></a>Node 程序传递参数</h1><ul><li><p>正常情况下执行一个node程序，直接跟上我们对应的文件即可：<br><code>node index.js</code></p></li><li><p>在某些情况下执行node程序的过程中，我们可能希望给node传递一些参数：<br><code>node index.js env=development coderwhy</code></p></li><li><p>*在程序中获取到传递的参数：</p><ul><li>获取参数其实是在<code>process</code><em>的内置对象</em>中的；</li><li>如果我们<em>直接打印这个内置对象</em>，它里面包含特别的信息：<br>  √其他的一些信息，比如版本、操作系统等可以自行查看</li></ul></li></ul><h3 id="Node-的输出"><a href="#Node-的输出" class="headerlink" title="Node 的输出"></a>Node 的输出</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;31f26b1a8f5f31430c83ade96744ad0b_MD5.jpeg|Open: Pasted image 20250528223104.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;31f26b1a8f5f31430c83ade96744ad0b_MD5.jpeg]]</p><h2 id="Node-的-REPL"><a href="#Node-的-REPL" class="headerlink" title="Node 的 REPL"></a>Node 的 REPL</h2><p>REPL是 <code>Read-Eval-Print Loop</code> 的简称，翻译为“<code>读取-求值-输出</code>”<br>循环；</p><p>REPL是一个 <em>简单的, 交互式的编程环境</em></p><p><strong>方法</strong></p><ul><li>在终端中直接输入node</li><li>在控制台中直接使用</li></ul><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;9f0b8de46e04486b4b72bf793ce3f9ce_MD5.jpeg|Open: Pasted image 20250530103657.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;9f0b8de46e04486b4b72bf793ce3f9ce_MD5.jpeg]]</p><h1 id="Node-的全局对象"><a href="#Node-的全局对象" class="headerlink" title="Node 的全局对象"></a>Node 的全局对象</h1><h2 id="常见的全局对象"><a href="#常见的全局对象" class="headerlink" title="常见的全局对象"></a>常见的全局对象</h2><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;f96f2a2c114478a8e54fb92e91463952_MD5.jpeg|Open: Pasted image 20250530105737.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;f96f2a2c114478a8e54fb92e91463952_MD5.jpeg]]</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;2872b99e65ce425d36b0ff9342c0c39a_MD5.jpeg|Open: Pasted image 20250530121231.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;2872b99e65ce425d36b0ff9342c0c39a_MD5.jpeg]]</p><p><strong>global是一个全局对象</strong> ，<code>process、.console、setTimeouts</code>等都有被放到globalr中;</p><ul><li>新的标准中还有一个globalThis,也是指向全局对象的；</li><li>类似于浏览器中的window;</li></ul><h2 id="特殊的全局对象"><a href="#特殊的全局对象" class="headerlink" title="特殊的全局对象"></a>特殊的全局对象</h2><ul><li>这些全局对象是实际上是<em><strong>模块中的变量</strong></em>, 只是<em>每个模块都有</em>, 看起来*像是全局变量</li><li>在命令行交互中式不可以使用的</li><li>包括: <code>__dirname, __filename, export, module, require() </code></li></ul><p><code>__dirname</code> : 获取<em>当前文件所在的路径</em> ( 不包括后面的文件名)<br><code>__filename</code> : 获取<em>当前文件所在的路径和文件名</em> ( 包括后面的文件名)</p><h2 id="global-和window-的区别"><a href="#global-和window-的区别" class="headerlink" title="global 和window 的区别"></a>global 和window 的区别</h2><ul><li><em>在浏览器中，全局变量都是在window上的</em>，比如有<code>document、setInterval、setTimeout、alert、console</code>等等</li><li>在Node中，我们也有一个<code>global</code>属性，并且看起来它里面有很多其他对象。</li><li>在浏览器中执行的 <code>JavaScript</code> 代码，如果我们在顶级范围内通过<code>var</code>定义的一个属性，默认会被添加到<code>window</code>对象上;</li><li>在node中，我们<em>通过var定义一个变量， 它只是在当前模块中有一个变量，不会放到全局中;</em></li></ul><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p><strong>目的</strong> : 模块化开发最终的目的是将程序划分成<em>一个个小的结构</em>；</p><p><strong>用法</strong> : </p><ul><li>这个结构中<em>编写属于自己的逻辑代码</em>，有<em>自己的作用域</em>，定义变量名词时不会影响到其他的结构；</li><li>这个结构可以将自己希望暴露的<code>变量、函数、对象</code>等导出给其结构使用；</li><li>也可以通过某种方式，<em>导入</em>另外结构中的<code>变量、函数、对象</code>等；</li></ul><p><em><strong>按照这种结构划分开发程序的过程, 就是模块化开发的过程</strong></em></p><h2 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h2><p><em>Node中的每一个 js 文件都是一个单独的模块</em></p><p>模块中要导出的内容 : <code>exports</code><br>模块中要导入内容 : <code>require</code></p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;aa2e22478987faaf12d5d70fd7bec0d4_MD5.jpeg|Open: Pasted image 20250530132649.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;aa2e22478987faaf12d5d70fd7bec0d4_MD5.jpeg]]</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;d68f7830be2871a364727e1ff645d1b6_MD5.jpeg|Open: Pasted image 20250530132724.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;d68f7830be2871a364727e1ff645d1b6_MD5.jpeg]]</p><p><code>util</code>变量等于<code>exports</code> 对象</p><h3 id="require的实现本质"><a href="#require的实现本质" class="headerlink" title="require的实现本质"></a>require的实现本质</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;a07269c198ed7949679906a92589cbb0_MD5.jpeg|Open: Pasted image 20250530145951.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;a07269c198ed7949679906a92589cbb0_MD5.jpeg]]</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;3271cf9d64e405d16db2c3f0bb625090_MD5.jpeg|Open: Pasted image 20250530150003.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;3271cf9d64e405d16db2c3f0bb625090_MD5.jpeg]]</p><!--修改后, exports.name 的值也会改变, require 相当于引用赋值--><p>bar变量就是exports对象</p><h3 id="module的exports属性本质"><a href="#module的exports属性本质" class="headerlink" title="module的exports属性本质"></a>module的exports属性本质</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;354b7e2f4ebe5454f0f1c9a492d46036_MD5.jpeg|Open: Pasted image 20250530154627.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;354b7e2f4ebe5454f0f1c9a492d46036_MD5.jpeg]]</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;af508f1943b037e013561029247060db_MD5.jpeg|Open: Pasted image 20250530155343.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;af508f1943b037e013561029247060db_MD5.jpeg]]<br>exports可以导出的原因</p><ul><li>**module对象的exports属性是exports对象的一个引用</li><li>&#96;module.exports &#x3D; exports &#x3D; main中的bar;</li></ul><h3 id="require-查找模块细节"><a href="#require-查找模块细节" class="headerlink" title="require 查找模块细节"></a>require 查找模块细节</h3><p><code>require</code>是一个函数, 可以引入一个文件(模块)中导出的对象</p><p>书写规则<code>require(X)</code></p><h4 id="require-的查找规则"><a href="#require-的查找规则" class="headerlink" title="require 的查找规则"></a>require 的查找规则</h4><p>在nodejs中我们通过require(X),可以引入一个模块中导出的对象。</p><p>那么，require的查找规则是怎么样的呢？</p><p>导入格式require(X)，下面总结几个常见的查找规则：</p><h5 id="情况一：X是一个NodeJs核心模块，比如path、http等"><a href="#情况一：X是一个NodeJs核心模块，比如path、http等" class="headerlink" title="情况一：X是一个NodeJs核心模块，比如path、http等"></a>情况一：X是一个NodeJs核心模块，比如path、http等</h5><p>直接返回核心模块，并且停止查找。</p><h5 id="情况二：X是以-或-或-根目录-开头的"><a href="#情况二：X是以-或-或-根目录-开头的" class="headerlink" title="情况二：X是以.&#x2F; 或 ..&#x2F; 或 (根目录) 开头的"></a>情况二：X是以.&#x2F; 或 ..&#x2F; 或 (根目录) 开头的</h5><p>第一步：将X当做一个文件在对应的目录下查找；</p><ol><li><p>如果有后缀名，直接按照后缀名的格式查找对应的文件</p></li><li><p>如果没有后缀名，会按照如下的顺序：</p><ol><li>直接查找文件X</li><li>查找X.js文件</li><li>查找X.json文件</li><li>查找X.node文件</li></ol></li></ol><p>第二步：没有对应的文件，将X看作一个目录</p><ol><li><p>查找目录下面的index文件</p><ol><li>查找X&#x2F;index.js文件</li><li>查找X&#x2F;index.json文件</li><li>查找X&#x2F;index.node文件</li></ol></li></ol><p>如果还没有找到，那么就报错：not found</p><h5 id="情况三：X没有路径，也不是一个核心模块"><a href="#情况三：X没有路径，也不是一个核心模块" class="headerlink" title="情况三：X没有路径，也不是一个核心模块"></a>情况三：X没有路径，也不是一个核心模块</h5><p>从node_modules目录查找</p><p>NodeJs从当前模块的目录开始，并添加&#x2F;node_modules，并尝试从该位置加载模块</p><p>例如，如果在”&#x2F;home&#x2F;ry&#x2F;projects&#x2F;foo.js”中调用 require(X),则将以下顺序查找：</p><ul><li>&#x2F;home&#x2F;ry&#x2F;projects&#x2F;node_mudules</li><li>&#x2F;home&#x2F;ry&#x2F;node_modules</li><li>&#x2F;home&#x2F;node_modules</li><li>&#x2F;node_modules</li></ul><p>以上目录找不到，那么就报错：not found</p><h3 id="模块的加载过程"><a href="#模块的加载过程" class="headerlink" title="模块的加载过程"></a>模块的加载过程</h3><ol><li><p><em>模块在被第一次引入时, 模块中的 JS 代码会被运行一次</em></p></li><li><p><em>模块被多次引入时, 回缓存, 最终只加载(运行)一次</em></p></li></ol><ul><li>每个模块对象<code>module</code> 都有一个属性 : <code>loaded</code></li><li>为<code>false</code> 表示还没有加载, 为<code>true</code> 表示已经加载</li></ul><h4 id="循环引入"><a href="#循环引入" class="headerlink" title="循环引入"></a>循环引入</h4><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;5379489ed74605db6eee3fdf4f43edd2_MD5.jpeg|Open: Pasted image 20250530212957.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;5379489ed74605db6eee3fdf4f43edd2_MD5.jpeg]]<br>采用深度优先算法 <code>main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt; bbb</code></p><h3 id="CommonJS会规范缺点"><a href="#CommonJS会规范缺点" class="headerlink" title="CommonJS会规范缺点"></a>CommonJS会规范缺点</h3><p><strong>CommonJS加载模块是同步的</strong>：</p><ul><li>同步 意味着<em>只有等到对应的模块加载完毕</em>，<em>当前模块中的内容才能被运行</em></li><li>这个在服务器不会有什么问题，因为<em>服务器加载的s文件都是本地文件</em>，加载速度非常快：</li></ul><p>应用于浏览器时: </p><ul><li>浏览器<em>加载 <code>js</code> 文件需要先从服务器将文件下载下来，之后再加载运行</em>；</li><li>那么 *采用同步的就意味着后续的S代码都无法正常运行，即使是一些简单的DOM操作；</li></ul><h3 id="AMD-CMD"><a href="#AMD-CMD" class="headerlink" title="AMD, CMD"></a>AMD, CMD</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;3487517d1ebbbc0423bf235834f1a70a_MD5.jpeg|Open: Pasted image 20250530221305.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;3487517d1ebbbc0423bf235834f1a70a_MD5.jpeg]]<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b54379def73193201d802b0313f7f5bd_MD5.jpeg|Open: Pasted image 20250530221657.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b54379def73193201d802b0313f7f5bd_MD5.jpeg]]</p><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p><strong>采用 <code>ES Module </code> 将自动采用严格模式</strong> </p><p><em>不允许在逻辑代码中写 <code>import</code> 导入语法 , 只能写在 <code>js</code> 代码顶<br>层</em></p><h4 id="导入和导出方式"><a href="#导入和导出方式" class="headerlink" title="导入和导出方式"></a>导入和导出方式</h4><h5 id="一"><a href="#一" class="headerlink" title="一"></a>一</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const name = &quot;why&quot;<br>const age = 18<br> export &#123;<br>     name,<br>     age<br> &#125; //不是一个对象, 只是一种特殊的语法<br> <br>import &#123;age, fname, sayHello&#125; from&quot;./foo.js&quot; //导入<br></code></pre></td></tr></table></figure><h5 id="二"><a href="#二" class="headerlink" title="二"></a>二</h5><p>导出 &#x2F;导出 时给标识符起一个别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">export &#123;<br>    name as fname,<br>    age,<br>    sayHello<br>&#125;<br>import &#123;age as fage, fname, sayHello&#125; from &quot;./foo.js&quot; //导入<br></code></pre></td></tr></table></figure><h5 id="三"><a href="#三" class="headerlink" title="三"></a>三</h5><p>定义时导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">export const name = &quot;why&quot;<br>export const age = 18<br>  <br>export function sayHello() &#123;<br>    console.log(&quot;sayhello&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="导入时给整个模块起别名"><a href="#导入时给整个模块起别名" class="headerlink" title="导入时给整个模块起别名"></a>导入时给整个模块起别名</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./foo.js&quot;</span><br><br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;kk&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo.<span class="hljs-property">name</span>)<br>foo.<span class="hljs-title function_">sayHello</span>()<br></code></pre></td></tr></table></figure><h5 id="优化写法"><a href="#优化写法" class="headerlink" title="优化写法"></a>优化写法</h5><p><em>规范</em> : 可以先把要用到的模块放在一个 <code>js</code> 文件里面, 其他<code>js</code>再从这个文件引入</p><h6 id="一-1"><a href="#一-1" class="headerlink" title="一"></a>一</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">export &#123; format, formatData &#125; from &quot;./format.js&quot;<br></code></pre></td></tr></table></figure><h6 id="二-1"><a href="#二-1" class="headerlink" title="二"></a>二</h6><p>把所有的变量导入进来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">export * from &quot;./format.js&quot;<br></code></pre></td></tr></table></figure><h5 id="default用法"><a href="#default用法" class="headerlink" title="default用法"></a>default用法</h5><ul><li>默认导出 <code>export</code> 时可以不需要指定名字；</li><li>在导入时不需要使用 <code>&#123; &#125;</code>，并且可以自己来指定名字；</li><li>它也方便我们和现有的 <code>CommonJS</code>  等规范相互操作；</li></ul><p><strong>导出</strong><br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;57fd5241907251dd268484ec9850f5cb_MD5.jpeg|Open: Pasted image 20250601201850.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;57fd5241907251dd268484ec9850f5cb_MD5.jpeg]]<br>或者<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;937d0952c1f4cdc75bba4c0b510f1982_MD5.jpeg|Open: Pasted image 20250601201925.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;937d0952c1f4cdc75bba4c0b510f1982_MD5.jpeg]]<br><em><strong>注意</strong></em> : <em>一个模块里面只能有一个默认导出( <code>default export</code>)</em></p><p><strong>导入</strong><br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;bc35530ac76dd9fe66a85f0ab8da340c_MD5.jpeg|Open: Pasted image 20250601202009.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;bc35530ac76dd9fe66a85f0ab8da340c_MD5.jpeg]]</p><h4 id="import函数的使用"><a href="#import函数的使用" class="headerlink" title="import函数的使用"></a>import函数的使用</h4><p><em>不允许在逻辑代码中写 <code>import</code> 导入语法 , 只能写在 <code>js</code> 代码顶层</em></p><p><em><strong>原因</strong></em> : </p><ul><li>这是因为*<code>ES Module</code>在被S引擎解析*时，就必须知道它的依赖关系</li><li>由于<em>这个时候<code>js</code> 代码没有任何的运行，所以无法在进行类似于f判断中根据代码的执行情况</em></li><li>甚至<em>拼接路径的写法也是错误的</em> : 因为我们必须到运行时能确定path的值；<code>错误写法 import from (&quot;./foo&quot; + &quot;.js&quot;)</code></li></ul><p><strong>动态的加载某一个模坎</strong>：</p><ul><li>使用<code>import()</code>函数来动态加载；<br>√<em>importi函数返回一个Promise,可以通过then获取结果</em>；</li></ul><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;5790845b0be6cb9d7ecb7a760fc5631e_MD5.jpeg|Open: Pasted image 20250601205315.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;5790845b0be6cb9d7ecb7a760fc5631e_MD5.jpeg]]</p><h5 id="import-meta"><a href="#import-meta" class="headerlink" title="import.meta"></a>import.meta</h5><p><code>import.meta</code> 是一个给 <code>JavaScript</code> 模块暴露特定上下文的元数据属性的对象。</p><p><code>    console.log(import.meta)</code><br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;cca6e731888b778c6f697e3b1d213964_MD5.jpeg|Open: Pasted image 20250601210256.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;cca6e731888b778c6f697e3b1d213964_MD5.jpeg]]</p><h3 id="ES-Module的解析流程"><a href="#ES-Module的解析流程" class="headerlink" title="ES Module的解析流程"></a>ES Module的解析流程</h3><p>   <em><strong>执行流程</strong></em></p><ul><li><p>阶段一：构建(<code>Construction</code>),根据地址查找<code>js</code>文件，并且下载，将其解析成模块记录(<code>Module Record</code>);<br><code>import * as foo from &quot;./foo.js&quot;</code></p></li><li><p>阶段二：实例化(<code>Instantiation</code>),对模块记录进行实例化，并且分配内存空间，解析模块的导入和导出语句，把模块指向对应的内存地址。<br><code>export &#123; name, age, sayHelo &#125; </code> &#x2F;&#x2F;此时的变量还没有值</p></li><li><p>阶段三：运行(<code>Evaluation</code>),运行代码，计算值，并且将值填充到内存地址中；<br> &#x2F;&#x2F;赋上具体值</p></li></ul><h1 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h1><p><a href="https://docs.npmjs.com/cli/v11/commands">npm官方文档</a></p><h3 id="npm-的重要文件"><a href="#npm-的重要文件" class="headerlink" title="npm 的重要文件"></a><strong>npm 的重要文件</strong></h3><ul><li><strong><code>package.json</code></strong></li></ul><p><a href="https://www.cnblogs.com/tzyy/p/5193811.html"> package.json属性详情</a></p><p>这是每个 Node.js 项目必备的配置文件，记录了项目的元数据和依赖信息。它包含：</p><p><strong>package-lock.json</strong><br>    该文件记录了项目中每个依赖的具体版本，并锁定依赖树的结构。确保在不同机器上安装依赖时，所有的开发环境和生产环境都能一致地获取相同版本的依赖包</p><h4 id="package-json-常见属性"><a href="#package-json-常见属性" class="headerlink" title="package.json 常见属性"></a>package.json 常见属性</h4><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b92cff03fb298122f810093af113483b_MD5.jpeg|Open: Pasted image 20250602163215.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b92cff03fb298122f810093af113483b_MD5.jpeg]]<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;02d8e40c2946b81a4e25df73f739762a_MD5.jpeg|Open: Pasted image 20250602163342.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;02d8e40c2946b81a4e25df73f739762a_MD5.jpeg]]</p><ul><li><code>dependencies</code> 和 <code>devDependencies</code>：分别列出了项目的生产环境和开发环境依赖</li><li>自定义脚本，如构建、测试、启动等命令</li><li>配置信息、许可证和作者信息等</li></ul><h5 id="main"><a href="#main" class="headerlink" title="main"></a>main</h5><p><em>main属性指定了程序的主入口文件</em></p><p>意思是，如果你的模块被命名为foo，用户安装了这个模块并通过require(“foo”)来使用这个模块，那么<code>require</code><em>返回的内容就是main属性指定的文件中 module.exports指向的对象。</em></p><p>它应该指向模块根目录下的一个文件。对大对数模块而言，这个属性更多的是让模块有一个主入口文件，然而很多模块并不写这个属性。</p><h5 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h5><p><em>scripts属性是一个对象，里边指定了项目的生命周期个各个环节需要执行的命令。</em><br>key是生命周期中的事件，value是要执行的命令。<br>具体的内容有 install start stop 等，详见 <a href="https://docs.npmjs.com/misc/scripts">https://docs.npmjs.com/misc/scripts</a></p><p><em>scripts属性用于配置一些脚本命令，以键值对的形式存在</em><br>配置后我们可以通过<code>npm run</code>命令的<code>key</code>来执行这个命令：</p><p>对于常用的<code>start、test、stop、restart</code>可以省略掉<code>run</code>直接通过<code>npm start</code>等方式运行</p><h5 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h5><ul><li><code>dependencies</code>属性是指定无论开发环境还是生成环境都需要依赖的包；</li><li>通常是我们项目实际开发用到的一些库模块<code>vue、vuex、vue-router、react、.react-dom、axios</code>等等</li></ul><h5 id="devDependencies属性"><a href="#devDependencies属性" class="headerlink" title="devDependencies属性"></a>devDependencies属性</h5><p>一些包在生成环境是不需要的，比如<code>webpack、babel</code>等<br>这个时候我们会通过<code>npm install webpack-save-dev</code>,将它安装到<code>devDependencies</code>属性中</p><h5 id="peerDependencies属性"><a href="#peerDependencies属性" class="headerlink" title="peerDependencies属性"></a>peerDependencies属性</h5><ul><li>还有一种项目依赖关系是对等依赖，也就是你依赖的一个包，它必须是以另外一个宿主包为前提的：</li><li>比如<code>element-plus</code>是依赖于<code>vue3</code>的，<code>ant design</code>是依赖于<code>react、react-dom</code>;</li></ul><h2 id="依赖的版本管理"><a href="#依赖的版本管理" class="headerlink" title="依赖的版本管理"></a>依赖的版本管理</h2><p><em>semver版本规范是 <code>X.Y.Z</code> :</em></p><ul><li>X主版本号(major): 当你做了<em><strong>不兼容</strong></em>的API修改（<em>可能不兼容之前的版本</em>）</li><li>Y次版本号(minor): 当你做了<em><strong>向下兼容</strong></em>的功能性新增（<em>新功能增加，但是兼容之前的版本</em>）；</li><li>Z修订号(patch) :当你做了<em>向下兼容</em>的问题修正（<em>没有新功能，修复了之前版本的bug</em>);</li></ul><p><code>^</code>和<code>~</code>的区别：</p><ul><li><code>x.y.z</code> : 表示一个明确的版本号；</li><li><code>^x.y.z</code> : 表示x是保持不变的，y和z永远安装最新的版本；</li><li><code>~x.y.z</code> : 表示x和y保持不变的，z永远安装最新的版本；</li></ul><h3 id="npm-的常见命令"><a href="#npm-的常见命令" class="headerlink" title="npm 的常见命令"></a><strong>npm 的常见命令</strong></h3><ol><li><strong>安装依赖</strong><br> 安装项目中列出的所有依赖：<br> <code>npm install</code></li></ol><p>该命令会根据 <code>package.json</code> 安装所有依赖，并生成或更新 <code>node_modules</code> 文件夹。如果你希望<em><strong>全局安装</strong></em>某个工具，可以使用 <code>-g</code> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g &lt;package-name&gt;<br></code></pre></td></tr></table></figure><ul><li>通常使用npm全局安装的包都是一些工具包：<code>yarn、webpack</code>等；</li><li>并不是类似于<code>axios、express、koa</code>等库文件；</li><li>所以全局安装了之后并不能让我们在所有的项目中使用axios等库；<br><strong>原理图</strong><br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;de93ee2b9acc3969b0b70e785cc75ea3_MD5.jpeg|Open: Pasted image 20250602205758.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;de93ee2b9acc3969b0b70e785cc75ea3_MD5.jpeg]]<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;53fd01f2d3cbf94655e82f9dbb5edafe_MD5.jpeg|Open: Pasted image 20250602210240.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;53fd01f2d3cbf94655e82f9dbb5edafe_MD5.jpeg]]</li></ul><ol start="2"><li><strong>添加依赖</strong><br>用于安装一个新的包，并将其添加到 <code>dependencies</code> 或 <code>devDependencies</code> 中：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install &lt;package-name&gt; --save  # 默认会添加到dependencies<br>npm install &lt;package-name&gt; --save-dev  # 添加到devDependencies<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>卸载依赖</strong><br>删除一个依赖包，并更新 <code>package.json</code> 和 <code>node_modules</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm uninstall &lt;package-name&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>更新依赖</strong><br>更新项目中的所有依赖到符合版本范围的最新版本：<br><code>npm update</code></li></ol><p>5.<strong>查看包信息</strong><br>查看已安装包的版本和详细信息：****<br><code>npm list</code></p><ol start="6"><li><strong>执行脚本</strong><br>在 <code>package.json</code> 文件中定义了脚本后，可以使用 <code>npm run &lt;script-name&gt;</code> 命令来执行它。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm run build<br></code></pre></td></tr></table></figure><h3 id="npm发布自己的包"><a href="#npm发布自己的包" class="headerlink" title="npm发布自己的包"></a>npm发布自己的包</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;e52f14a0ae89ac415e7bb49a89352f71_MD5.jpeg|Open: Pasted image 20250603102555.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;e52f14a0ae89ac415e7bb49a89352f71_MD5.jpeg]]</p><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p><code>yarn</code> 是由 Facebook 发起的包管理工具，目的是解决 <code>npm</code> 的一些性能和依赖管理问题。<code>yarn</code> 在安装速度、离线安装和一致性方面做了显著优化。</p><ul><li><code>yarn</code> 提供了更高效的依赖安装方式，采用并行安装并且支持缓存，能显著提升安装速度。</li><li><code>yarn.lock</code> 文件确保所有团队成员安装的依赖版本一致，避免版本冲突。</li><li>支持离线安装，在没有网络的情况下仍然能够安装已经缓存的依赖。</li></ul><p>下载 <code>npm install yarn</code></p><h3 id="npm-与-Yarn-的比较"><a href="#npm-与-Yarn-的比较" class="headerlink" title="npm 与 Yarn 的比较"></a><strong>npm 与 Yarn 的比较</strong></h3><table><thead><tr><th>特性</th><th>npm</th><th>Yarn</th></tr></thead><tbody><tr><td><strong>安装速度</strong></td><td>npm 7+ 引入了一些性能优化，但通常速度较慢</td><td>更快，支持并行安装和缓存机制</td></tr><tr><td><strong>依赖一致性</strong></td><td>使用 <code>package-lock.json</code> 来锁定版本</td><td>使用 <code>yarn.lock</code> 锁定版本</td></tr><tr><td><strong>离线安装</strong></td><td>支持缓存，允许在没有网络的情况下安装依赖</td><td>支持离线模式，依赖会被缓存</td></tr><tr><td><strong>工作空间支持</strong></td><td>从 npm 7 开始支持工作空间</td><td>原生支持工作空间，适合 monorepo</td></tr><tr><td><strong>CLI</strong></td><td>功能全面，易用性不断提升</td><td>更简洁，但有些命令不兼容 npm</td></tr><tr><td><strong>社区支持</strong></td><td>全球最大的 JavaScript 包生态</td><td>非常活跃，尤其是在 React 社区</td></tr></tbody></table><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b079442e73df481b3518d0fd71f00ea8_MD5.jpeg|Open: Pasted image 20250602213810.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b079442e73df481b3518d0fd71f00ea8_MD5.jpeg]]</p><h2 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h2><p>查看npm镜像<br><code>npm config get registry</code></p><p>设置npm镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>将cnpm设置为淘宝的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install -g cnpm -registry=https://registry.npm.taobao.org<br>cnpm config get registry <br></code></pre></td></tr></table></figure><h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><p> npx 是 npm5.2.0版本新增的一个工具包，它允许用户在不安装全局包的情况下，运行已安装在本地项目中的包或者远程仓库中的包。</p><p><code>npx</code> 是一个由 <code>npm</code> 提供的工具，用于直接运行 <code>node_modules/.bin</code> 中的可执行文件，而不必在全局安装依赖。<code>npx</code> 实际上是 <code>npm</code> 5.2+ 版本中新增的命令行工具，允许开发者运行任何命令而无需显式安装。</p><ul><li><code>npx</code> 可以临时运行安装在项目中的命令（即便这些命令没有全局安装），也可以运行 GitHub 上的命令或者从 npm 注册表中直接运行包。</li><li><code>npx</code> 可以用来快速执行脚本，如运行项目中的构建工具、脚本命令等。</li></ul><h3 id="局部命令的执行"><a href="#局部命令的执行" class="headerlink" title="局部命令的执行"></a>局部命令的执行</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b5ed850b7ea893e19c30211f5ccb4c69_MD5.jpeg|Open: Pasted image 20250603091039.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;b5ed850b7ea893e19c30211f5ccb4c69_MD5.jpeg]]</p><h2 id="npm、yarn、pnpm-和-npx-对比总结"><a href="#npm、yarn、pnpm-和-npx-对比总结" class="headerlink" title="npm、yarn、pnpm 和 npx 对比总结"></a><code>npm</code>、<code>yarn</code>、<code>pnpm</code> 和 <code>npx</code> 对比总结</h2><p><a href="https://juejin.cn/post/7439320353464565800?searchId=2025060308455229ED5BF7AED3BB066612"><code>npm</code>、<code>yarn</code>、<code>pnpm</code> 和 <code>npx</code> 对比总结 </a></p><table><thead><tr><th>特性</th><th>npm</th><th>yarn</th><th>pnpm</th><th>npx</th></tr></thead><tbody><tr><td><strong>安装方式</strong></td><td>使用 <code>npm install</code> 安装依赖</td><td>使用 <code>yarn install</code> 安装依赖</td><td>使用 <code>pnpm install</code> 安装依赖</td><td>临时执行包中的命令，不需要安装全局依赖</td></tr><tr><td><strong>安装速度</strong></td><td>较慢，依赖树较深时效率较低</td><td>快，支持并行安装和缓存</td><td>非常快，使用硬链接和共享依赖</td><td>运行时自动下载依赖，不需要安装</td></tr><tr><td><strong>磁盘空间</strong></td><td>使用重复依赖，占用较多磁盘空间</td><td>缓存依赖，但依赖安装较多时仍会占用一定磁盘空间</td><td>通过硬链接减少重复安装，节省磁盘空间</td><td>不占用磁盘空间，仅临时运行命令</td></tr><tr><td><strong>锁定依赖版本</strong></td><td>使用 <code>package-lock.json</code> 锁定版本</td><td>使用 <code>yarn.lock</code> 锁定版本</td><td>使用 <code>pnpm-lock.yaml</code> 锁定版本</td><td>不锁定版本，运行时临时安装和执行命令</td></tr><tr><td><strong>依赖管理</strong></td><td>默认安装多份重复依赖（有冗余）</td><td>安装时尽量避免冗余依赖</td><td>强制封闭依赖，避免隐式依赖</td><td>无依赖管理，直接执行命令</td></tr><tr><td><strong>兼容性</strong></td><td>与大部分工具和社区兼容</td><td>与 <code>npm</code> 兼容，但存在部分差异</td><td>与 <code>npm</code> 和 <code>yarn</code> 不完全兼容，特别是在依赖管理方式上</td><td>依赖于 <code>npm</code>，通过 <code>npx</code> 直接执行命令</td></tr><tr><td><strong>离线支持</strong></td><td>不完全支持离线安装</td><td>支持离线安装，缓存安装过的包</td><td>完全支持离线安装，依赖缓存共享</td><td>不需要离线安装，运行时自动下载依赖</td></tr><tr><td><strong>适用场景</strong></td><td>适用于大部分 Node.js 项目</td><td>适合需要高性能和一致性保证的项目</td><td>适合需要优化磁盘空间和性能的大型项目</td><td>快速执行单次命令，无需全局安装依赖</td></tr><tr><td><strong>社区和支持</strong></td><td>最大的社区支持，生态最广泛</td><td>被许多大公司采用，尤其适合 Monorepo 管理</td><td>生态较小，但专注于性能和空间优化</td><td><code>npm</code> 的一部分，功能简单实用</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><hr><p><strong>主要差异总结：</strong></p><ul><li><strong>npm</strong>：广泛使用且成熟，适合大部分项目，但安装速度和磁盘空间管理较差。</li><li><strong>yarn</strong>：性能优于 <code>npm</code>，尤其在并行安装和离线支持方面，适合需要版本一致性的团队协作项目。</li><li><strong>pnpm</strong>：通过硬链接节省磁盘空间，优化了安装速度，特别适合大型项目或多个项目共享依赖的情况。</li><li><strong>npx</strong>：用于临时执行命令或包，不需要全局安装，适用于单次执行而不需要管理依赖的场景。</li></ul><h2 id="硬链接和软连接"><a href="#硬链接和软连接" class="headerlink" title="硬链接和软连接"></a>硬链接和软连接</h2><p>硬链接(hard link):</p><ul><li><em><strong>硬链接</strong></em>（英语：hard link) 是*电脑文件系统中的多个文件平等地共享同一个文件存储单元；</li><li>删除一个文件名字后，还可以用其它名字继续访问该文件；</li></ul><p>符号链接（软链接soft link、Symbolic link):</p><ul><li><em><strong>符号链接</strong></em>（软链接、Symbolic link)是一类*特殊的文件；</li><li>其*包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用</li></ul><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;54cca17c4865feceebea1a9e017895f1_MD5.jpeg|Open: Pasted image 20250603130622.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;54cca17c4865feceebea1a9e017895f1_MD5.jpeg]]</p><h3 id="文件拷贝"><a href="#文件拷贝" class="headerlink" title="文件拷贝"></a>文件拷贝</h3><p>会在硬盘中复制一份新的文件数据(<em>改变其中一份, 不会影响另一份</em>)<br><code>copy foo.js foo_copy.js</code><br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;9d19ae1fbdbcd9a762e142c5cf1ce2e2_MD5.jpeg|Open: Pasted image 20250603132426.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;9d19ae1fbdbcd9a762e142c5cf1ce2e2_MD5.jpeg]]</p><h3 id="文件的硬链接"><a href="#文件的硬链接" class="headerlink" title="文件的硬链接"></a>文件的硬链接</h3><p>多个文件平等地共享同一个文件存储单元(<em>改变其中一份, 其他文件的内容也会变</em>)<br><code>mklink /H foo.js foo_hard.js</code><br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;3b67fc58b7a2c415f3432e30712e6715_MD5.jpeg|Open: Pasted image 20250603132740.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;3b67fc58b7a2c415f3432e30712e6715_MD5.jpeg]]</p><h3 id="文件的软链接"><a href="#文件的软链接" class="headerlink" title="文件的软链接"></a>文件的软链接</h3><p><code>mklink foo.js foo_hard.js </code></p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;eab8bb7351e7d0e0516366e9b9b1867e_MD5.jpeg|Open: Pasted image 20250603133709.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;eab8bb7351e7d0e0516366e9b9b1867e_MD5.jpeg]]</p><h2 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a><code>pnpm</code></h2><ul><li><strong>磁盘空间优化</strong>：通过硬链接共享依赖，显著节省了磁盘空间。</li><li><strong>高效的依赖管理</strong>：依赖安装速度快，尤其是在多个项目共享依赖时表现优秀。</li><li><strong>强制封闭依赖</strong>：避免隐式依赖，提高了依 赖管理的可靠性。</li></ul><h3 id="pnpm的原理"><a href="#pnpm的原理" class="headerlink" title="pnpm的原理"></a>pnpm的原理</h3><p>使用pnpm, <strong>依赖包将被存放在一个统一的位置</strong>，因此：</p><ul><li>如果<em>对同一依赖包使用相同的版本</em>，那么<em>磁盘上只有这个依赖包的一份文件</em>；</li><li>如果<em>对同一依赖包需要使用不同的版本</em>，则<em>仅有版本之间不同的文件会被存储起来</em></li><li>所有文件都保存在硬盘上的统一的位置：</li><li>当安装软件包时，其包含的所有文件都会<em><strong>硬链接</strong></em>到此位置，而<em>不会占用额外的硬盘空间</em>；</li><li>可以在项目之间方便地<em>共享相同版本的依赖包</em>；</li></ul><h4 id="非扁平化的-node-modules-目录"><a href="#非扁平化的-node-modules-目录" class="headerlink" title="非扁平化的 node_modules 目录"></a>非扁平化的 <code>node_modules</code> 目录</h4><p>所有文件都会存储在硬盘上的某一位置. 当软件包被安装时, 包里的文件会<em>硬链接</em>到这一位置, 而不会占用额外的磁盘空间 . 允许跨项目地享用同一版本的依赖</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;216694d140e0e8643ae60a379b195f29_MD5.jpeg|Open: Pasted image 20250603152432.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;216694d140e0e8643ae60a379b195f29_MD5.jpeg]]</p><h5 id="pnpm的store存储"><a href="#pnpm的store存储" class="headerlink" title="pnpm的store存储"></a>pnpm的store存储</h5><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;5992ee0d4fdaca3825d820a342aeb0f5_MD5.jpeg|Open: Pasted image 20250603155958.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;5992ee0d4fdaca3825d820a342aeb0f5_MD5.jpeg]]</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p><a href="https://webpack.js.org/concepts/">webpack官方文档</a></p><p><code>webpack</code> 的核心是一个用于现代 <code>JavaScript</code> 应用的静态模块打包器</p><ul><li>打包bundler:  webpack可以将帮助我们进行打包，所以它是一个打包工具</li><li>静态的static :  这样表述的原因是我们最终可以将代码打包成最终的静态资源（部署到静态服务器）；</li><li>模块化module:  webpack默认支持各种模块化开发ES Module、CommonJS、AMD等；</li><li>现代的modern:  现代前端开发面临各种各样的问题，催生了webpack的出现和发展；</li></ul><p>前端开发的流程<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;a42138b7fc8da6b36cab5fc1353e9011_MD5.jpeg|Open: Pasted image 20250604105132.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;a42138b7fc8da6b36cab5fc1353e9011_MD5.jpeg]]</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;f588dfec8ef80c8883c609d36dab60ec_MD5.jpeg|Open: Pasted image 20250604131317.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;f588dfec8ef80c8883c609d36dab60ec_MD5.jpeg]]<br>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;1fe253f3c088785cef56223ff7286e52_MD5.jpeg|Open: Pasted image 20250604131328.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;1fe253f3c088785cef56223ff7286e52_MD5.jpeg]]</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;4d7bbf25139209bf647f3e62c551541d_MD5.jpeg|Open: Pasted image 20250604131334.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;4d7bbf25139209bf647f3e62c551541d_MD5.jpeg]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const path = require(&quot;path&quot;)<br><br>const filepath = &quot;C:/abc/cba/nba.txt&quot;<br><br>console.log(path.extname(filepath)) // &quot;.txt&quot;<br><br>console.log(path.basename(filepath))  //&quot;nba.txt&quot;<br><br>console.log(path.dirname(filepath))  //  &quot;C:/abc/cba&quot;<br><br>const path1 = &quot;/a/d/s&quot;<br>const path2 = &quot;../why/ksj/mae.txt&quot;<br><br>console.log(path.join(path1, path2))  //&quot;\a\d\why\ksj\mae.txt&quot;<br><br>console.log(path.resolve(&quot;./acd/s&quot;, &quot;./ehdy/sd&quot;, &quot;../sda.txt&quot;))<br>//   &quot;C:\Users\sai_8\Desktop\1\code\path\acd\s\ehdy\sda.txt&quot;<br><br>console.log(path.resolve(&quot;as/sd&quot;, &quot;./dsf&quot;, &quot;/df.txt&quot;))<br>//  &quot;C:\df.txt&quot;<br><br>console.log(path.resolve(&quot;./sd/ads&quot;, &quot;/dsf/sad&quot;, &quot;./as.txt&quot;))<br>//  &quot;C:\dsf\sad\as.txt&quot;<br></code></pre></td></tr></table></figure><h3 id="webpack的安装"><a href="#webpack的安装" class="headerlink" title="webpack的安装"></a>webpack的安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install webpack webpack-cli-g #全局安装<br>npm instal1 webpack webpack-cli-D #局部安装<br></code></pre></td></tr></table></figure><p><strong>webpack 和 webpack-cli的关系</strong></p><ul><li>执行<code>webpack</code>命令，会执行<code>node modules</code>下的 <code>.bin</code> 目录下的<code>webpack</code>;</li><li><code> webpack</code> 在执行时是依赖<code>webpack-cli</code>的，如果没有安装就会报错：</li><li>而 <code>webpack-cli</code>中代码执行时，才是真正利用<code>webpack</code>进行编译和打包的过程；</li><li>所以在安装 <code>webpack</code>时，我们需要同时安装 <code>webpack-cli</code>(第三方的脚手架事实上是没有使用webpack-cli的，而是类似于自己的 <code>vue-service-cli</code> 的东西)</li></ul><h3 id="webpack的默认打包"><a href="#webpack的默认打包" class="headerlink" title="webpack的默认打包"></a>webpack的默认打包</h3><ul><li>在目录下直接执行webpack命令<ul><li>生成一个<code>dist</code> 文件夹, 里面存放一个<code>main.js</code> 的文件, 就是打包之后的文件</li></ul></li></ul><p>-运行<code>webpack</code> 时, <code>webpack</code> 会查找当前目录下的 <code>src/index.js</code> 作为入口<br>如果当前项目中没有存在 <code>src/index.js</code>文件, 就会报错</p><p><em>通过配置指定出入口</em> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npx webpack --entry ./src/main.js --output-path ./build<br></code></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在根目录下创建一个 <code>webpack.config.js</code>  文件，来作为<code>webpack</code> 的配置文件</p><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;097f3c1fd505f887c84cb2bbdabc1eb6_MD5.jpeg|Open: Pasted image 20250604155437.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;097f3c1fd505f887c84cb2bbdabc1eb6_MD5.jpeg]]</p><p>*如果配置文件名不是 <code>webpack.config.js</code>的名字 *</p><ul><li>可以通过 <code>--config</code> 来指定对应的配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">webpack --config 修改名称后的配置文件<br></code></pre></td></tr></table></figure><h3 id="loader的使用"><a href="#loader的使用" class="headerlink" title="loader的使用"></a>loader的使用</h3><ul><li><code>loader</code> 可以用于对<code>模块的源代码</code>进行转换</li></ul><h4 id="loader配置方式"><a href="#loader配置方式" class="headerlink" title="loader配置方式"></a>loader配置方式</h4><p>在<code>webpack.config.js</code> 文件中写明配置信息 </p><p><code>module.rules</code> 允许配置多个 loader<br><strong>module.rules的配置</strong> 如下：</p><ul><li><code>rules</code> 属性对应的值是一个数组：[Rule]</li><li>数组中存放的是一个个的<code>Rule</code>  , <code>Rule</code> 是一个对象，对象中可以设置多个属性：<ul><li><em>test属性</em>：用于对<code>resource</code> (资源)进行匹配的，通常会设置成<em>正表达式</em></li><li><em>use属性</em> ：对应的值时一个数组：[UseEntry]</li><li><code>UseEntry</code>是一个对像，可以通过对象的属性来设置一些其他属性<blockquote><pre><code>loader:必须有一个loader属性，对应的值是一个字符串：</code></pre></blockquote></li></ul></li></ul><blockquote><pre><code>options : 可选的属性，值是一个字符串或者对象，值会被传入到 loader中；query: 目前已经使用options来替代；</code></pre></blockquote><p>  传递字符串（如：use:[‘style-loader’])是loader属性的简写方式（如：use:[{loader:’style-loader’}]);</p><ul><li>loader属性：Rule.use:[{loader}]的简写。</li></ul><p><em><strong>因为<code>loader</code>的执行顺序事从右向左的(从下到上, 从后到前), 所以需要将 <code>style-loader</code> 写道<code>css-loader</code> 的前面</strong></em></p><p><strong>下载</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">npm install css-loader -D<br>npm install style-loader -D<br></code></pre></td></tr></table></figure><p>[[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;48318a757d2ecc7795830fb554028204_MD5.jpeg|Open: Pasted image 20250604215809.png]]<br>![[前端了解&#x2F;Node&#x2F;_resources&#x2F;node&#x2F;48318a757d2ecc7795830fb554028204_MD5.jpeg]]</p><p>简写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"> loader: &quot;css-loader&quot;,<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">use: [&quot;style-loader&quot;, &quot;css-loader&quot;]<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/posts/2025/04/Fronted/01-%20HTML/2eec1551.html"/>
      <url>/posts/2025/04/Fronted/01-%20HTML/2eec1551.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><h4 id="基本语法概述"><a href="#基本语法概述" class="headerlink" title="基本语法概述"></a>基本语法概述</h4><p>1.所有标签都包括在&lt;&gt;里面<br>2.并且一般情况下&lt;&gt;都成对出现，例如：&lt; html &gt;(开始标签) 和&lt; &#x2F;html &gt;(结束标签)，称为双标签<br>3.有极少数标签必须是单个标签，例如：&lt; br &#x2F;&gt;</p><h3 id="标签关系"><a href="#标签关系" class="headerlink" title="标签关系"></a>标签关系</h3><p>包含关系和并列关系<br>![[Pasted image 20240415204232.png]]<br>![[Pasted image 20240415204710.png]]</p><h3 id="基本结构标签"><a href="#基本结构标签" class="headerlink" title="基本结构标签"></a>基本结构标签</h3><p>&lt; html&gt; 和 &lt; &#x2F;html&gt; 内包含所有内容<br>&lt; head&gt; 和&lt; &#x2F;head&gt; 内包含头部<br>即![[Pasted image 20240415215459.png]]<br>&lt; title&gt;和&lt; &#x2F;title&gt; 内包含标题<br>即![[Pasted image 20240415215620.png]]<br>&lt; body&gt; 和&lt; &#x2F;body&gt;内包含主要内容<br>即![[Pasted image 20240415215711.png]]</p><h3 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><p>分为6个等级的网页标题，&lt; h1&gt;-&lt; h6&gt;<br>双标签<br>如：&lt; h1&gt; &lt; &#x2F;h1&gt;<br>特点：<br>1.加了标题的文字会被加粗，字号也会依次变大<br>2.一个标题独占一行<br>效果：<br>![[Pasted image 20240416171114.png]]</p><h4 id="段落和换行标签"><a href="#段落和换行标签" class="headerlink" title="段落和换行标签"></a>段落和换行标签</h4><h5 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h5><p>可以将网页分为若干个段落。如：&lt; p&gt; 我是一个段落&lt; &#x2F;p&gt;<br>不加段落标签的效果：<br>![[Pasted image 20240416172237.png]]<br>![[Pasted image 20240416172253.png]]<br>加了段落标签的效果：<br>![[Pasted image 20240416172531.png]]<br>![[Pasted image 20240416172541.png]]<br>特点：<br>1、文本在一个段落中会根据浏览器窗口大小自动换行<br>如：![[Pasted image 20240416172734.png]]</p><p>![[Pasted image 20240416172745.png]]</p><p>2、段落和段落之间保有空隙</p><h5 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h5><p>让某段文本强制换行显示。 <br />(单标签)<br>![[Pasted image 20240416175007.png]]<br>![[Pasted image 20240416175016.png]]<br>特点：<br>1、<br />是单个标签<br>2、<br />标签只是简单开始新的一行，与段落不同，段落之间会插入一些间距</p><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><p>把文字 设置粗体、斜体、下划线等效果，突出重要性<br>加粗：&lt; strong&gt;&lt; &#x2F;strong&gt; 或者&lt; b&gt;&lt; &#x2F;b&gt;<br>倾斜：&lt; em&gt;&lt; &#x2F;em&gt;或者&lt; i&gt;&lt; &#x2F;i&gt;<br>删除线：&lt; del&gt;&lt; &#x2F;del&gt;或者&lt; s&gt;&lt; &#x2F;s&gt;<br>下划线：&lt; ins&gt;&lt; &#x2F;ins&gt;或者&lt; u&gt;&lt; &#x2F;u&gt;</p><h4 id="和标签"><a href="#和标签" class="headerlink" title="&lt;div&gt;和&lt;span&gt;标签"></a><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签</h4><p>他俩没有语义，它们就是一个盒子，用来装内容<br>特点：<br>1、<code>&lt;div&gt;</code>标签用来布局，但是一行只能放一个<code>&lt;div&gt;</code>.是大盒子<br>2、<code>&lt;span&gt;</code>标签用来布局，一行上可以放多个<code>&lt;span&gt;</code>.是小盒子<br>![[Pasted image 20240416195917.png]]<br>![[Pasted image 20240416195931.png]]</p><h4 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h4><h5 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h5><p><code>&lt;img /&gt;</code> 用于定义HTML页面中的图像，是单个标签<br><code>&lt;img src=&quot;图像URL&quot; /&gt;</code><br>src是<code>&lt;img&gt;</code>标签的必须属性，用于指定图像文件的路径和文件名<br>要使用图片在网页中，必须把图片和网页放在同一个文件夹中<br>![[Pasted image 20240416201001.png]]<br>注意点：<br>1、图像标签可以有多个属性，必须写在标签名的后面<br>2、属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开<br>3、属性的格式：属性&#x3D;“属性值”</p><h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5><p>1、目录文件夹和根目录<br>目录文件夹：普通文件夹，里面存放做页面的相关素材，如html文件、图片等<br>根目录：打开目录文件夹的第一层就是根目录</p><p>2、路径<br>通常建立一个文件夹来储存图像文件，这时查找图像，需要采取“路径”的方式来指定图像文件的位置<br>相对路径：<br>相对路径是从代码所在的这个文件出发，去寻找目标文件<br>![[Pasted image 20240416203015.png]]</p><p>绝对路径：<br>![[Pasted image 20240416203639.png]]</p><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><p><code>&lt;a&gt;</code>标签用于定义超链接，作用是从一个页面链接到另一个页面</p><h5 id="链接的语法格式"><a href="#链接的语法格式" class="headerlink" title="链接的语法格式"></a>链接的语法格式</h5><p>![[Pasted image 20240416204158.png]]</p><p>![[Pasted image 20240416204242.png]]</p><h5 id="链接分类"><a href="#链接分类" class="headerlink" title="链接分类"></a>链接分类</h5><p>1、外部链接：例如<code>&lt;a herf=&quot;http://www.baidu.com&quot;&gt;百度&lt; /a&gt;</code><br>2、内部链接：网站内部页面之间的相互链接，直接连接内部页面名称即可，例如：<br><code>&lt;a herf=&quot;index.html&quot;&gt;首页&lt; /a&gt;</code><br>3、空链接：没有确定链接目标，<code>&lt;a herf=&quot;#&quot;&gt;首页&lt; /a&gt;</code><br>4、下载链接：如果herf里面地址是一个文件或者压缩包，会下载这个文件<br>5、网页元素链接：在网页中的各种网页元素，如文本、图像、表格、音频、视频等都可以添加超链接<br>6、锚点链接：当我们点击链接，可以快速定位到页面中的某个位置</p><pre><code>![[Pasted image 20240416210054.png]]</code></pre><h3 id="HTML中的注释和特殊字符"><a href="#HTML中的注释和特殊字符" class="headerlink" title="HTML中的注释和特殊字符"></a>HTML中的注释和特殊字符</h3><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释以“<!--"开头，以“-->“结束<br>![[Pasted image 20240416210352.png]]</p><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>![[Pasted image 20240416210706.png]]</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><h4 id="表格的主要作用"><a href="#表格的主要作用" class="headerlink" title="表格的主要作用"></a>表格的主要作用</h4><p>用于显示、展示数据，可以让数据显示的非常规整，可读性非常好。</p><h4 id="表格的基本语法"><a href="#表格的基本语法" class="headerlink" title="表格的基本语法"></a>表格的基本语法</h4><p>1、<code>&lt;table&gt; &lt;/table&gt;</code>是用于定义表格的标签<br>2、<code>&lt;tr&gt; &lt;/tr&gt;</code>标签用于定义表格中的<em>行</em>，必须嵌套在<code>&lt;table&gt; &lt;/table&gt;</code>标签中<br>3、<code>&lt;td&gt; &lt;/td&gt;</code>用于定义表格中的<em>单元格</em>，必须嵌套在<code>&lt;tr&gt; &lt;/tr&gt;</code>标签中<br>4、字母td指表格数据，即数据单元格的内容</p><h4 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h4><p>一般表头单元格位于表格的第一列或第一行，表头单元格里面的文本内容<em>加粗居中</em>显示<br><code>&lt;th&gt; &lt;/th&gt;</code>标签表示HTML表格的表头部分</p><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p>实际开发不常用，后面通过CSS来设置<br> ![[Pasted image 20240416214210.png]]<br> 注意：属性写在table里面</p><h4 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h4><p>使用场景：表格可能很长，为了更好表示表格的语义，可以将表格分为表格头部和表格主体两部分<br><code>&lt;thead&gt;</code>标签表示表格的头部区域，<code>&lt;tbody&gt;</code>标签表示表格的主体区域<br>1、<code>&lt;thead&gt; &lt;/thead&gt;</code>用于定义表格的头部。<code>&lt;thead&gt;</code>内部必须拥有<code>&lt;tr&gt;</code>标签，一般位于第一行<br>2、<code>&lt;tbody&gt; &lt;/tbody&gt;</code>用于定义表格的主体，主要用于放数据本体<br>3、以上标签都是放在<code>&lt;table&gt; &lt;/table&gt;</code>标签中</p><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><p>1、合并单元格的方式<br>*跨行合并：rowspan&#x3D;“合并单元格的个数”<br>![[Pasted image 20240416220516.png]]</p><p>*跨列合并：colspan&#x3D;“合并单元格的个数”<br>![[Pasted image 20240416220545.png]]</p><p>2、目标单元格（写合并代码）<br>![[Pasted image 20240416220705.png]]、</p><p>3、合并单元格三部曲<br><em>先确定是跨行还是跨列合并<br>找到目标单元格，写上合并方式&#x3D;合并的单元格数量。如：&#96;<td colspan="2"> </td><br>删除多余单元格</em></p><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>用来布局<br>特点：整齐、整洁、有序</p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><code>&lt;ul&gt; &lt;/ul&gt;</code> 标签表示HTML项目中的无序列表<br><code>&lt;li&gt; &lt;/li&gt;</code>标签表示列表项<br>语法基本格式如下：<br><code>&lt;ul&gt; </code><li> 列表项1 </li><code> </code><li> 列表项2 </li><code> </code><li> 列表项3 </li><code> </code></ul><code> *注意：* 1、</code><ul> </ul><code>中只能嵌套</code><li> </li><code>，直接在</code><ul> </ul><code>标签中输入其他标签或者文字的做法是不被允许的 2、</code><li> </li>&#96;之间相当于一个容器，可以容纳所有元素<br>3、无序列表带有自己的样式属性，但在实际使用时，我们使用CSS来设置</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><code>&lt;ol&gt; &lt;/ol&gt;</code>标签表示HTML项目中的有序列表<br><code>&lt;li&gt; &lt;/li&gt;</code>标签表示列表项<br>语法基本格式如下：<br><code>&lt;ol&gt; </code><li> 列表项1 </li><code> </code><li> 列表项2 </li><code> </code><li> 列表项3 </li><code> </code></ol><code> *注意：* 1、</code><ol> </ol><code>中只能嵌套</code><li> </li><code>，直接在</code><ol> </ol><code>标签中输入其他标签或者文字的做法是不被允许的 2、</code><li> </li>&#96;之间相当于一个容器，可以容纳所有元素<br>3、有序列表带有自己的样式属性，但在实际使用时，我们使用CSS来设置</p><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p>常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号<br><code>&lt;dl&gt; &lt;/dl&gt;</code>标签表示HTML项目中的自定义列表<br><code>&lt;dt&gt; &lt;/dt&gt;</code>标签表示定义项目的名字<br><code>&lt;dd&gt; &lt;/dd&gt;</code>标签表示描述每一个项目<br>语法基本格式如下：<br><code>&lt;dl&gt; </code><dt> 名词1 </dt><code> </code><dd> 名词1解释1 </dd><code> </code><dd> 名词1解释2 </dd><code> </code></dl><code> *注意：* 1、</code><dl> </dl><code>里面只能包含</code><dt> </dt><code>和</code><dd> </dd><br>2、<code>&lt;dt&gt; &lt;/dt&gt;</code>和<code>&lt;dd&gt; &lt;/dd&gt;</code>个数没有限制，通常是一个<code>&lt;dt&gt;</code>对应多个<code>&lt;dd&gt;</code></p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="为什么需要表单"><a href="#为什么需要表单" class="headerlink" title="为什么需要表单"></a>为什么需要表单</h4><p>目的：收集用户信息</p><h4 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h4><p>由<em>表单域、表单控件（即表单元素）、提示信息</em>3部分构成<br>![[Pasted image 20240417153314.png]]</p><h5 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h5><p>包含表单元素的区域<br><code>&lt;form&gt; &lt;/form&gt;</code>标签表示定义表单域，以实现用户信息的收集和传递<br><em><code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器</em><br>语法基本格式如下：<br><code>&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单域名称&quot;</code><br><code>各种表单元素控件</code><br><code>&lt;/form&gt;</code><br>![[Pasted image 20240417171730.png]]</p><h5 id="表单控件（表单元素）"><a href="#表单控件（表单元素）" class="headerlink" title="表单控件（表单元素）"></a>表单控件（表单元素）</h5><h6 id="表单元素"><a href="#表单元素" class="headerlink" title="&lt;input&gt;表单元素"></a><code>&lt;input&gt;</code>表单元素</h6><p><code>&lt;input&gt;</code>标签用于收集用户信息，是单个标签<br><em>在<code>&lt;input&gt;</code>标签中，包含一个type属性，根据不同的type属性值，输入字段拥有很多种形式（可以是文本、字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</em><br>语法基本格式如下：<br><code>&lt;input type = &quot;属性值&quot; /&gt;</code></p><p>![[Pasted image 20240417172528.png]]</p><p><em>除type属性外，<code>&lt;input&gt;</code><em>标签还有其他很多属性：</em><br>![[Pasted image 20240417173755.png]]<br><em>注意：</em><br>1、name和value是每个表单元素都有的属性值，主要给后台人员使用<br>2、name表单元素的名字，要求</em>单选按钮和复选框要有相同的name值*<br>3、checked属性主要针对于单选按钮和复选框，作用是一打开界面就默认选中某个表单元素<br>4、maxlength是用户可以在表单元素输入的最大字符数，一般较少使用</p><p>![[Pasted image 20240417193415.png]]</p><p>![[Pasted image 20240417193426.png]]</p><h6 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;lable&gt;标签"></a><code>&lt;lable&gt;</code>标签</h6><p><code>&lt;label&gt; &lt;/label&gt;</code>标签为input元素定义标签<br><code>&lt;label&gt;</code>标签用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>标签内的文本时，浏览器会自动将焦点（光标）转到对应的表单元素上，用来增加用户体验<br>语法基本格式如下：</p><p><code>&lt;label for=&quot;性别&quot;&gt;男&lt;/label&gt;</code><br><code>&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;性别&quot; /&gt;</code></p><p><em>核心：</em><code>&lt;label&gt;</code>标签的for属性应当与相关元素的id属性相同<br>![[Pasted image 20240417194812.png]]</p><h6 id="表单元素-1"><a href="#表单元素-1" class="headerlink" title="&lt;select&gt;表单元素"></a><code>&lt;select&gt;</code>表单元素</h6><p>使用场景：在页面中，如果有多个选择让用户选择，并且想要节约页面空间，我们可以使用<code>&lt;select&gt;</code>标签控件定义<em>下拉列表</em><br>![[Pasted image 20240417195224.png]]</p><p>语法基本格式如下：<br><code>&lt;select&gt;</code><br><code>&lt;option&gt;选项1&lt;/option&gt;</code><br><code>&lt;option&gt;选项2&lt;/option&gt;</code><br><code>&lt;option&gt;选项3&lt;/option&gt;</code><br><code>...</code><br><code>&lt;/select&gt;</code><br><em>注意：</em><br>1、<code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code><br>2、在<code>&lt;option&gt;</code>中定义selected&#x3D;“selected”时，当前项即为默认选中项</p><p>![[Pasted image 20240417200003.png]]</p><p>![[Pasted image 20240417200023.png]]</p><h6 id="表单元素-2"><a href="#表单元素-2" class="headerlink" title="&lt;textarea&gt;表单元素"></a><code>&lt;textarea&gt;</code>表单元素</h6><p>使用场景：当用户输入内容较多的情况下，我们使用<code>&lt;textarea&gt;</code>标签<br><code>&lt;textarea&gt;</code>标签是用于定义多行文本输入的控件<br>语法基本格式如下：<br><code>&lt;textarea rows=&quot;3&quot; cols=&quot;20&quot;&gt;</code><br><code>文本内容</code><br><code>&lt;/textarea&gt;</code></p><p>![[Pasted image 20240417201708.png]]</p><p>![[Pasted image 20240417201721.png]]</p><p><em>注意：</em><br>1、通过<code>&lt;textarea&gt;</code>标签可以轻松地创建多行文本输入框<br>2、cols&#x3D;”每行中的字符数“ ，rows&#x3D;”显示的行数”，<em>我们在实际开发中不会使用，都是用CSS来改变大小</em></p><h2 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h2><p><em>注意：</em> 这些新特性都有兼容问题，基本上是IE9+以上版本的浏览器才支持</p><h3 id="HTML新增的语义化标签"><a href="#HTML新增的语义化标签" class="headerlink" title="HTML新增的语义化标签"></a>HTML新增的语义化标签</h3><p>1、<code>&lt;header&gt;</code>头部标签<br>2、<code>&lt;nav&gt;</code>导航标签<br>3、<code>&lt;article&gt;</code>内容标签<br>4、<code>section&gt;</code>定义文档某个区域<br>5、<code>&lt;aside&gt;</code>侧边栏标签<br>6、<code>&lt;footer&gt;</code>尾部标签</p><p>![[Pasted image 20240417203348.png]]</p><p>![[Pasted image 20240417204528.png]]</p><p>![[Pasted image 20240417204547.png]]</p><h3 id="HTML5新增的多媒体标签"><a href="#HTML5新增的多媒体标签" class="headerlink" title="HTML5新增的多媒体标签"></a>HTML5新增的多媒体标签</h3><h4 id="视频"><a href="#视频" class="headerlink" title="视频&lt;video&gt;"></a>视频<code>&lt;video&gt;</code></h4><p>当前<code>&lt;video&gt;</code>元素支持三种视频格式：MP4，WebM，Ogg。但尽量使用MP4格式，因为几乎所有浏览器都支持<br>语法基本格式如下：<br><code>&lt;video src=&quot;文件地址&quot; controls=&quot;contorls&quot;&gt; &lt;/video&gt;</code><br><em>注意：如果害怕浏览器不支持当前格式，可以参照以下写法</em></p><p>![[Pasted image 20240417205241.png]]</p><p>![[Pasted image 20240417205638.png]]</p><h4 id="音频"><a href="#音频" class="headerlink" title="音频&lt;audio&gt;"></a>音频<code>&lt;audio&gt;</code></h4><p>当前<code>&lt;audio&gt;</code>支持3中音频格式：MP3、Wav、Ogg。但尽量使用MP3格式，因为几乎所有浏览器都支持<br>语法基本格式如下：<br><code>&lt;audio src=&quot;文件地址&quot; controls=&quot;contorls&quot;&gt; &lt;/audio&gt;</code><br><em>注意：如果害怕浏览器不支持当前格式，可以参照以下写法</em></p><p>![[Pasted image 20240417205926.png]]</p><p>![[Pasted image 20240417210200.png]]</p><h3 id="HTML5新增的input标签"><a href="#HTML5新增的input标签" class="headerlink" title="HTML5新增的input标签"></a>HTML5新增的input标签</h3><p>![[Pasted image 20240417210434.png]]</p><p>![[Pasted image 20240417211039.png]]<br>、<br>![[Pasted image 20240417211048.png]]</p><h3 id="HTML5新增的表单属性"><a href="#HTML5新增的表单属性" class="headerlink" title="HTML5新增的表单属性"></a>HTML5新增的表单属性</h3><p>![[Pasted image 20240417211533.png]]</p><h3 id="HTML5新增的全局属性-data"><a href="#HTML5新增的全局属性-data" class="headerlink" title="HTML5新增的全局属性 data-*"></a>HTML5新增的全局属性 data-*</h3><ul><li>data-* ，用于自定义数据属性<ul><li>data设置的属性可以在JavaScript的DOM操作中 通过<strong>dataset</strong>轻松获取</li><li>通常用于<strong>HTML和JavaScript数据之间的传递</strong></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;div class=&quot;box&quot; title=&quot;abc&quot; data-name=&quot;why&quot; data-age=&quot;18&quot;&gt;<br>box<br>&lt;/div&gt;<br><br>&lt;script&gt;<br>const boxE1 = document.querySelector(&quot;.box&quot;)<br>console.log(boxE1.dataset)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li><em>在小程序中，通过data-来传递数据</em></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/2025/04/Fronted/02-%20CSS/ee69e452.html"/>
      <url>/posts/2025/04/Fronted/02-%20CSS/ee69e452.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS1"><a href="#CSS1" class="headerlink" title="CSS1"></a>CSS1</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用场景：美化网页，布局页面<br>CSS是一种标记语言<br>CSS可以美化HTML，让HTML更漂亮，让页面布局更简单<br>CSS最大价值：由HTML专注去做结构呈现，样式交给CSS，即结构与样式相分离</p><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><p><em>CSS规则由两个主要的部分构成：选择器以及一条或多条声明</em><br>基本语法格式如下：<br><code>选择器 &#123; 属性：值；  属性：值;&#125;</code><br><em>注意：</em><br>1、选择器是用与指定CSS样式的HTML标签，花括号内是对该对象设置的具体样式<br>2、属性和属性值以“键值对”的形式出现<br>3、属性是对指定的对象设置的样式属性，例如字体大小，文本颜色等<br>4、属性和属性值之间用英文 “:” 分开</p><h3 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h3><h4 id="样式格式"><a href="#样式格式" class="headerlink" title="样式格式"></a>样式格式</h4><p>1、紧凑格式<br><code>h3&#123;color:deeppink;font-size:20px;&#125;</code><br>2、展开格式<br><code>h3&#123;</code><br><code>color:pink;</code><br><code>font-size:20px;</code><br><code>&#125;</code><br><em>推荐使用第二种格式</em>，更直观</p><h4 id="样式大小写"><a href="#样式大小写" class="headerlink" title="样式大小写"></a>样式大小写</h4><p>1、小写<br><code>h3&#123;</code><br><code>color:pink;</code><br><code>&#125;</code><br>2、大写<br><code>H3&#123;</code><br><code>COLOR:PINK;</code><br><code>&#125;</code><br><em>强烈推荐样式选择器，属性名，属性值关键字全部使用小写字母</em>，特殊情况除外</p><h4 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h4><p><code>h3 &#123;</code><br><code>color: pink;</code><br><code>&#125;</code><br>1、属性值前面，冒号后面，保留一个空格<br>2、选择器（标签）和大括号之间保留空格</p><h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><p><strong>CSS选择器的作用</strong><br>选择器（选择符）就是根据不同需求把不同的标签选出来。简单来说，就是<em>选择标签用的</em></p><p><strong>选择器的分类</strong><br>选择器可以分为基础选择器和复合选择器两大类</p><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>基础选择器是由<em>单个选择器组成</em>的<br>基础选择器又包括：<em>标签选择器、类选择器、id选择器、通配选择器</em></p><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>标签选择器是指用<em>HTML标签名称</em>作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: skyblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>有点意思<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>男生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>男生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>女生<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>女生<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>女生<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240418211124.png]]</p><p><em>作用</em><br>标签选择器可以把某一类标签全部选择出来，比如所有的<code>&lt;div&gt;</code>标签<br><em>优点</em><br>能快速为页面中同类型的标签统一设置样式<br><em>缺点</em><br>不能设计差异化样式，只能选择全部的当前标签</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>如果想要差异化选择不同的标签，单独选一个或几个标签，可以使用<em>类选择器</em><br>语法基本格式如下：<br><code>.类名 &#123;</code><br><code>属性1: 属性值1;</code><br><code>...</code><br><code>&#125;</code><br>结构需要用class属性来调用class类的意思</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>有点意思<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>男生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>男生<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>女生<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>女生<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>女生<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240418212404.png]]</p><p><em>注意：</em><br>1、类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义）<br>2、不要使用纯数字、中文等命名<br>3、命名要有意义，尽量让别人一眼就知道这个类名的目的<br>4、命名规范：<br>![[Pasted image 20240418213307.png]]</p><p>![[Pasted image 20240418213332.png]]<br>![[Pasted image 20240418213405.png]]</p><p><em>类选择器口诀：</em> 样式点定义，结构类（class）调用，一个或多个，开发最常用</p><h4 id="类选择器——多类名"><a href="#类选择器——多类名" class="headerlink" title="类选择器——多类名"></a>类选择器——多类名</h4><p>给一个标签指定多个类名，从而达到更多的选择目的。<br>1、多类名使用方式<br>语法基本格式：<br><code>&lt;div class=&quot;red font20&quot;&gt;亚瑟&lt;/div&gt;</code><br><em>在标签class属性中写多个类名<br>在多个类名中间必须用*<em>空格分开</em></em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.red</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.font</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">35px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.backcolor</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink ;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red font backcolor&quot;</span>&gt;</span>有点意思<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240419195421.png]]</p><p>2、多类名开发中的使用场景<br><em>可以把一些标签元素相同的样式（共同的部分）放到一个类里面<br>这些标签都可以调用这个公共的类，然后再调用自己独有的类<br>从而节省CSS代码，统一修改也非常方便</em></p><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>id选择器可以为标有特定id的HTML元素指定特定的样式<br><em>注意：</em> HTML元素以id属性来设置id选择器，CSS中id属性以 <em>“#”</em> 来定义<br>语法基本格式：<br><code>#id名 &#123;</code><br><code>属性1：属性值1；</code><br><code>...</code><br><code>&#125;</code><br>例如，将id为nav元素中的内容设置为红色<br><code>#nav &#123;</code><br><code>color: red;</code><br><code>&#125;</code><br><em>口诀：样式#定义，结构id调用，只能调用1次，别人切勿使用</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#pink</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pink&quot;</span>&gt;</span>小羊计算器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240419200737.png]]</p><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>CSS中，通配符选择器使用 <em>“#”</em> 定义，<em>它表示选取页面中的所有元素（标签）</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pink&quot;</span>&gt;</span>小羊计算器<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>欢迎使用小羊计算器<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>开始使用<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240419201910.png]]</p><p><em>注意：</em><br>1、通配符选择器不需要调用，自动就给所有的元素使用样式<br>2、特殊情况才使用，如清楚所有的元素标签内外边距<br><code>* &#123;</code><br><code>margin: 0;</code><br><code>padding: 0;</code><br><code>&#125;</code></p><h3 id="基础选择器总结"><a href="#基础选择器总结" class="headerlink" title="基础选择器总结"></a>基础选择器总结</h3><p>![[Pasted image 20240419202504.png]]</p><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><ul><li>复合选择器可以更准确、更高效的选择目标元素（标签）</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成</li><li>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等</li></ul><h4 id="后代选择器（重要）"><a href="#后代选择器（重要）" class="headerlink" title="后代选择器（重要）"></a>后代选择器（重要）</h4><p><em>后代选择器</em>又称<em>包含选择器</em>，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代<br>语法基本格式：<br><code>元素1 元素2 &#123;样式声明&#125;</code><br>上述语法表示<em>选择元素1里面的所有元素2</em>（后代元素）<br>例如：<br><code>ul li &#123;样式声明&#125; /* 选择元素1里面的所有元素2 */</code></p><ul><li>元素1和元素2中间用**空格隔开</li><li>元素1是父级，元素2是子级，最终选择的是<strong>元素2</strong></li><li>元素2可以是儿子，也可以是孙子等，只要是元素1的后代即可</li><li>元素1和元素2可以是任意基础选择器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ol的孩子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我也是<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是孙子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul的孩子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul的孩子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我是ul的孩子<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是ul的孩子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240423165951.png]]</p><h4 id="子选择器（重要）"><a href="#子选择器（重要）" class="headerlink" title="子选择器（重要）"></a>子选择器（重要）</h4><p><strong>子选择器</strong>只能选择作为某元素的最近一级子元素。简单理解就是选亲儿子元素<br>语法基本格式：<br><code>元素1&gt;元素2 &#123;样式声明&#125;</code><br>上述语法表示<strong>选择元素1里面的所有直接后代（子元素）元素2</strong><br>例如：<br><code>div &gt; p &#123;样式声明&#125; /* 选择div里面所有最近一级p标签元素 */</code></p><ul><li>元素1和元素2中间用<strong>大于号</strong>隔开</li><li>元素1是父级，元素2是子级。最终选择的是<strong>元素2</strong></li><li>元素2必须是<strong>亲儿子</strong>，其孙子之类都不归他管</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.nav</span> &gt; <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是儿子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>我是孙子<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240423170941.png]]</p><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p><em>并集选择器可以选择多组标签，同时为他们定义相同的样式。</em> 通常用于集体声明<br><strong>并集选择器</strong>是各选择器<em>通过英文逗号(,)连接而成</em>，任何形式的选择器都可以作为并集选择器的一部分<br>语法基本格式：<br><code>元素1，元素2 &#123;样式声明&#125;</code><br>上述语法表示<em>选择元素1和元素2</em><br>例如：<br><code>ul,  </code>div {样式声明} &#x2F;* 选择ul和div标签 *&#x2F;&#96;</p><ul><li>元素1和元素2中间用<em>逗号隔开</em></li><li>逗号可以理解为<em>和</em>的意思</li><li>并集选择器通常用于集体声明</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 把熊大熊二改为粉色 */</span></span><br><span class="language-css"><span class="hljs-comment">/* div,</span></span><br><span class="hljs-comment"><span class="language-css">p &#123;</span></span><br><span class="hljs-comment"><span class="language-css">color: pink;</span></span><br><span class="hljs-comment"><span class="language-css">&#125; */</span></span><br><span class="language-css"><span class="hljs-comment">/* 把熊大熊二还有小猪一家改为粉色 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>,</span><br><span class="language-css"><span class="hljs-selector-tag">p</span>,</span><br><span class="language-css"><span class="hljs-selector-class">.pig</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>熊大<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>熊二<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>光头强<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pig&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小猪佩奇<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>猪爸爸<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>猪妈妈<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240423172936.png]]</p><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p><em>伪类选择器</em>用[[1.图像与计算机视觉类]]于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素<br>伪类选择器书写最大的特点是<em>用冒号(:)表示</em>，比如 :hover、:first-child<br>伪类选择器很多，如链接伪类、结构伪类等</p><h5 id="链接伪类访问器"><a href="#链接伪类访问器" class="headerlink" title="链接伪类访问器"></a>链接伪类访问器</h5><p><code>a: link /*  选择所有未被访问的链接 */</code><br><code>a: visited /*  选择所有已被访问的链接 ，即已经被访问过的链接的样式*/</code><br><code>a: hover /*  选择鼠标指针位于其上的链接，即鼠标放在链接上样式的改变 */</code><br><code>a: active /*  选择活动链接（鼠标按下未弹起的链接），即按下鼠标时样式的改变 */</code></p><p> <strong>链接伪类选择器注意事项</strong><br> 1、为了确保生效，请按照<strong>LVHA</strong>的循顺序声明：:link - :visited - :hover - :active<br> 2、因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</p><p><strong>链接伪类选择器实际工作开发中的写法</strong><br><code>/* a是标签选择器 所有的链接  */</code><br><code>a &#123;</code><br><code>color: gray:</code><br><code>&#125;</code><br><code>/* :hover是链接伪类选择器 鼠标经过 */</code><br><code>a:hover &#123;</code><br><code>color: red; /* 鼠标经过的时候，由原来的灰色变成了红色 */</code><br><code>&#125;</code></p><h5 id="focus-伪类选择器"><a href="#focus-伪类选择器" class="headerlink" title=":focus 伪类选择器"></a>:focus 伪类选择器</h5><p><strong>:focus 伪类选择器</strong>用于选取获得焦点（光标）的表单元素，一般情况<code>&lt;input&gt;</code>类表单元素才能获得<br>语法基本格式：<br><code>input:focus &#123;</code><br><code>background-color: yellow;</code><br><code>&#125;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background</span>: pink;</span><br><span class="language-css">                <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">            &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240423200908.png]]</p><h5 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h5><h6 id="nth-child"><a href="#nth-child" class="headerlink" title=":nth-child()"></a>:nth-child()</h6><p><strong>:nth-child(x)</strong><br>是父元素的第x个子元素<br>语法基本格式：<br><code>元素1 元素2:nth-child(x)</code><br>上述语法表示选取元素1里面的第x个元素2<br><em>元素1是元素2的父亲</em></p><p><strong>:nth-child(2n)</strong><br>是父元素的第偶数个子元素<br>语法基本格式：<br><code>元素1 元素2:nth-child(2n)</code><br>上述语法表示选取元素1里面的第偶数个元素2<br><em>注意：</em></p><ul><li>n代表任意<em>正整数和0</em></li><li>是父元素中的第偶数个子元素（第2、4、6、8……个）</li><li>跟 :nth-child(even)同义</li></ul><p><strong>:nth-child(2n+1)</strong><br>是父元素的第奇数个子元素<br>语法基本格式：<br><code>元素1 元素2:nth-child(2n+1)</code><br><em>注意：</em></p><ul><li>n代表任意<em>正整数和0</em></li><li>是父元素中的第奇数个子元素（第1、3、5、7……个）</li><li>跟 :nth-child(odd)同义</li></ul><p><strong>:nth-child(-n+x)</strong><br>是父元素的前x个子元素<br>语法基本格式：<br><code>元素1 元素2:nth-child(-n+x)</code><br><em>表示前x个子元素</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n+<span class="hljs-number">1</span>)&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">6</span>)&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: skyblue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(-n+<span class="hljs-number">3</span>)&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: green;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表元素4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表元素5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>列表元素6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素10<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240424164515.png]]</p><h6 id="nth-last-child"><a href="#nth-last-child" class="headerlink" title=":nth-last-child()"></a>:nth-last-child()</h6><p>:nth-last-child()的语法跟 :nth-child()类似，不同点是 :nth-last-child()从最后一个子元素开始往前计数<br><strong>:nth-last-child(1)</strong> 代表倒数第一个子元素<br><strong>:nth-last-child(-n+2)</strong> 代表最后2个子元素</p><h6 id="nth-of-type"><a href="#nth-of-type" class="headerlink" title=":nth-of-type()"></a>:nth-of-type()</h6><p>用法跟 :nth-of-type()类似</p><ul><li>不同点是：<em>:nth-of-type()</em> 计数时只计算同种类型的元素<br>![[Pasted image 20240425182154.png]]</li></ul><p><strong>:nth-last-of-type()</strong> 用法跟 <strong>:nth-of-type()</strong> 类似，只是 <strong>:nth-last-of-type()</strong> 是从最后一个这种类型的子元素开始往前计数</p><h6 id="其他结构伪类"><a href="#其他结构伪类" class="headerlink" title="其他结构伪类"></a>其他结构伪类</h6><ul><li><strong>:first-child</strong>，等同于 :nth-child(1)</li><li><strong>:last-child</strong>，等同于 :nth-last-child(1)</li><li><strong>:first-of-type</strong>，等同于 :nth-of-type(1)</li><li><strong>:last-of-type</strong>，等同于 :nth-last-of-type(1)</li><li><strong>:only-child</strong>，是父元素中唯一的子元素</li><li><strong>:only-of-type</strong>，是父元素中唯一的这种类型的子元素</li><li><strong>:root</strong>，根元素，就是html元素</li><li><strong>:empty</strong>，代表里面完全空白的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 找寻父级下的子级的第三个，再看第三个是不是div */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-comment">/* 找寻父级下的div子级的第三个 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">3</span>) &#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-pseudo">:root</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-pseudo">:empty</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表元素10<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240425184246.png]]</p><h5 id="否定伪类"><a href="#否定伪类" class="headerlink" title="否定伪类"></a>否定伪类</h5><p><strong>:not()</strong> 的格式是 <strong>:not(x)</strong></p><ul><li>x是一个简单选择器</li><li>元素选择器、通用选择器、属性选择器、类选择器、id选择器、伪类（除否定伪类）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag"><span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-comment">/* 除item外的其他元素 */</span></span><br><span class="language-css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-class">.item</span>) &#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: skyblue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>元素列表1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>元素列表2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>元素列表3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yjy&quot;</span>&gt;</span>元素列表1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yjy&quot;</span>&gt;</span>元素列表2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;yjy&quot;</span>&gt;</span>元素列表3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qxy&quot;</span>&gt;</span>元素列表1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qxy&quot;</span>&gt;</span>元素列表2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;qxy&quot;</span>&gt;</span>元素列表3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240425185747.png]]</p><h4 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h4><p>![[Pasted image 20240423201023.png]]</p><h2 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h2><p>CSS Fonts（字体）属性用于定义<em>字体系列、大小、粗细、文字样式</em></p><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><p>CSS使用<em>font-family</em>属性定义文本的字体系列<br>语法基本格式：<br><code>p &#123;</code><br><code>font-family: &quot;微软雅黑&quot;;</code><br><code>&#125;</code><br><code>div &#123;</code><br><code>font-family: Arial, &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;;</code><br><code>&#125;</code><br><em>注意：</em><br>1、各种字体之间必须使用英文状态下的逗号搁开(前一个字体不能显示，自动看下一个字体)<br>2、一般情况下，如果有空格隔开的多个单词组成的字体，加引号<br>3、尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示<br>4、最常见的几个字体：body{font-family: ‘Microsoft Yahei’, tahoma, arial, ‘Hiragino Sans GB’; }</p><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>CSS使用<em>font-size</em>属性定义字体大小<br>语法基本格式如下：<br><code>p &#123;</code><br><code>font-size: 20px;</code><br><code>&#125;</code><br><em>注意：</em><br>1、px（像素）大小是我们网页的最常用的单位<br>2、谷歌浏览器默认的文字大小为16px<br>3、不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小<br>4、可以给body指定整个界面文字大小（但标题比较特殊，需要单独指定）</p><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p>CSS使用font-weight属性设置文本字体的粗细<br>语法基本格式：<br><code>p &#123;</code><br><code>font-weight: bold;</code><br><code>&#125;</code></p><p>![[Pasted image 20240419210053.png]]<br><em>注意：</em><br>1、学会让加粗标签（比如h和strong等）不加粗，或者其他标签加粗<br>2、实际开发时，我们更喜欢用数字表示粗细</p><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><p>CSS使用<em>font-style</em>属性设置文本的风格<br>语法基本格式：<br><code>p &#123;</code><br><code>font-style: normal;</code><br><code>&#125;</code></p><p>![[Pasted image 20240419212958.png]]<br><em>注意：</em> 平时我们很少给文字加斜体，反而要给斜体标签（em, i）改为不倾斜字体</p><h3 id="字体复合属性"><a href="#字体复合属性" class="headerlink" title="字体复合属性"></a>字体复合属性</h3><p>语法基本格式：<br><code>body &#123;</code><br><code>font: font-style font-weight font-size/line-height font-family;</code><br><code>&#125;</code><br><em>注意：</em><br>1、使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开<br>2、不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性不起作用</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>![[Pasted image 20240419215118.png]]</p><h2 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h2><p>CSS Text（文本）属性可定义文本的外观，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等</p><h3 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h3><p><code>color</code>属性用于定义文本颜色</p><p>语法基本格式：<br><code>div &#123;</code><br><code>color: red;</code><br><code>&#125;</code></p><p>![[Pasted image 20240421155234.png]]<br><em>开发中最常用的是16进制</em></p><h3 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h3><p><code>text-align</code>属性用于设置元素内文本内容的<em>水平</em>对齐方式<br>语法基本格式：<br><code>div &#123;</code><br><code>text-align: center;</code><br><code>&#125;</code></p><p>![[Pasted image 20240421174347.png]]</p><p><em>注意：</em> 想要图片居中对齐，需要把图片放在一个p标签内，再给p标签添加水平居中对齐</p><h3 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h3><p><code>text-decoration</code>属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等</p><p>![[Pasted image 20240421175228.png]]<br><em>最常用于取消a链接自带的下划线</em></p><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p><code>text-indent</code>属性用来指定文本的第一行的缩进，通常是将<em>段落的首行缩进</em><br>语法基本格式：<br>1、<br>所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值<br><code>div &#123;</code><br><code>text-indent: 10px;</code><br><code>&#125;</code><br>2、<br>em是一个相对单位，就是当前元素（font-size）1个文字的大小，如果当前元素没有设置大小，则会按照父元素的一个文字大小<br><code>p &#123;</code><br><code>text-indent: 2em;</code><br><code>&#125;</code></p><h3 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h3><p><code>line-height</code>属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离。<br>语法基本格式：<br><code>p &#123;</code><br><code>line-height: 26px;</code><br><code>&#125;</code></p><p>![[Pasted image 20240421210855.png]]</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>![[Pasted image 20240421211545.png]]</p><h2 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h2><h3 id="CSS的三种样式表"><a href="#CSS的三种样式表" class="headerlink" title="CSS的三种样式表"></a>CSS的三种样式表</h3><p>1、行内样式表（行内式）<br>2、内部样式表（嵌入式）<br>3、外部样式表（链接式）</p><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>内部样式表（内嵌样式表）是写在HTML页面内部，是将所有的CSS代码抽取出来，单独放在一个 <code>&lt;style&gt;</code>标签中。<br>语法基本格式：<br><code>&lt;style&gt;</code><br><code>div &#123;</code><br><code>color: red;</code><br><code>font-size: 12px;</code><br><code>&#125;</code><br><code>&lt;style&gt;</code><br>特点：</p><ul><li><code>&lt;style&gt;</code>标签理论上可以放在HTML文档的任何地方，*但一般会放在文档的<code>&lt;head&gt;</code>标签中 *</li><li>通过此方式，可以方便控制当前整个页面中的元素样式设置</li><li>代码结构清晰，但是并没有实现结构与样式完全分离</li><li>使用内部样式设定CSS，通常也被称为<em>嵌入式引入</em>，这种方式是我们练习时常用的方式</li></ul><h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><p>行内样式表（内联样式表）是在<em>元素内部的style属性中设定CSS样式</em>，适用于修改简单样式<br>语法基本格式：<br><code>&lt;div style=&quot;color: red; font-size: 12px;&quot;&gt;欢迎使用小羊计算器&lt;/div&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>体验CSS语法规范<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>= <span class="hljs-string">&quot;color: pink;&quot;</span>&gt;</span>小羊计算器<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>欢迎使用小羊计算器<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>开始使用<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240422195751.png]]<br>注意：</p><ul><li>style其实就是标签的属性</li><li>在双引号之间，写法要符合CSS规范</li><li>可以控制当前的标签设置样式</li><li>不推荐大量使用，只有对当前元素添加简单样式的时候，可以考虑使用</li><li>使用行内样式表设定CSS，通常也被称为<em>行内式引入</em></li></ul><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><p>实际开发都是外部样式表，适用于样式比较多的情况，核心是：<em>样式单独写在CSS文件中，之后把CSS文件引入到HTML页面中使用</em><br>引入外部样式表的步骤：<br>1、新建一个后缀名为 .css 的样式文件，把所有的CSS代码都放入此文件中<br>2、在HTML页面中，使用<code>&lt;link&gt;</code>标签引入这个文件<br>语法基本格式：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></p><p>![[Pasted image 20240422201307.png]]</p><ul><li>使用外部样式表设定CSS，通常也被称为<em>外链式或外链式引入</em>，是开发中最常用的方式</li></ul><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>![[Pasted image 20240422201605.png]]</p><h2 id="Chrome调试工具使用"><a href="#Chrome调试工具使用" class="headerlink" title="Chrome调试工具使用"></a>Chrome调试工具使用</h2><h3 id="1-打开调试工具"><a href="#1-打开调试工具" class="headerlink" title="1. 打开调试工具"></a>1. 打开调试工具</h3><p>打开Chrome浏览器，按下F12键或者点击页面空白处-&gt;检查</p><h3 id="2、使用调试工具"><a href="#2、使用调试工具" class="headerlink" title="2、使用调试工具"></a>2、使用调试工具</h3><ol><li>Ctrl+滚轮可以放大开发者代码大小</li><li>左边是HTML结构，右边是CSS样式</li><li>右边CSS样式可以改动数值和查看颜色</li><li>Ctrl+0复原浏览器大小</li><li>如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误</li><li>如果有样式，但是样式前面有黄色感叹号提示，则是样式属性书写错误</li></ol><h1 id="CSS2"><a href="#CSS2" class="headerlink" title="CSS2"></a>CSS2</h1><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><p>Emmet语法前身是Zen coding, 它使用缩写来提高HTML&#x2F;CSS的编写速度，Vscode内部已经集成该语法。</p><h3 id="快速生成HTM结构语法"><a href="#快速生成HTM结构语法" class="headerlink" title="快速生成HTM结构语法"></a>快速生成HTM结构语法</h3><p>1、生成标签，直接输入标签名，按tab键即可 比如 div 然后tab键，就可以生成<code>&lt;div&gt; &lt;/div&gt;</code><br>2、如果想要生成多个相同标签 加上 * 就可以了 比如 div * 3 就可以快速生成3个div<br>3、如果有父子级关系的标签，可以用 &gt; 比如 ul &gt; li就可以了<br>4、如果有兄弟关系的标签，用+就可以了 比如 div+p<br>5、如果生成带有类名或者id名字的，直接写 .demo 或者 #two  tab键就可以了<br>6、如果生成的div类名是有顺序的，可以用自增符号 ￥<br>7、如果想要在生成的标签内部写内容可以用{ }表示</p><h3 id="快速生成CSS样式语法"><a href="#快速生成CSS样式语法" class="headerlink" title="快速生成CSS样式语法"></a>快速生成CSS样式语法</h3><p>CSS基本采取简写模式形式即可。<br>1、比如 w200 按tab键可以生成 width: 200px;<br>2、比如lh26 按tab键可以生成 line-height: 26px;</p><h2 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h2><h3 id="什么是元素显示模式"><a href="#什么是元素显示模式" class="headerlink" title="什么是元素显示模式"></a>什么是元素显示模式</h3><p>作用：网页的标签非常多，在不同的地方会用到不同类型的标签，了解他们的特点<em>可以更好的布局我们的网页</em><br>元素显示模式就是<em>元素（标签）以什么方式进行显示</em>，比如<code>&lt;div&gt;</code>自己占一行，比如一行可以放多个<code>&lt;span&gt;</code><br>HTML元素一般分为<em>块元素</em>和<em>行内元素</em>两种类型</p><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>元素是最典型的块元素<br>块级元素的特点：</p><ol><li>自己独占一行</li><li>高度、宽度、外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素<br><strong>注意：</strong></li></ol><ul><li>文字类的元素内不能使用块级元素</li><li><code>&lt;p&gt;</code>标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li><li>同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等，其中<code>&lt;span&gt;</code>标签是<em>最典型的行内元素</em>。<br>行内元素的特点：</p><ol><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素<br><strong>注意：</strong></li></ol><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>在行内元素中有几个特殊的标签——<code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，它们<em>同时具有块元素和行内元素的特点</em>。<br>行内块元素的特点：</p><ol><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）</li><li>默认宽度就是它本身内容的宽度（行内元素特点）</li><li>高度、行高、外边距以及内边距都可以控制（块级元素特点）</li></ol><h3 id="如何指定元素的显示类型"><a href="#如何指定元素的显示类型" class="headerlink" title="如何指定元素的显示类型"></a>如何指定元素的显示类型</h3><p><code>display</code>属性用于指定元素的显示类型<br>常见的display属性值及其含义：</p><ol><li><p><code>block</code>：将元素呈现为块级元素。块级元素会独占一行，并且默认情况下会在前后添加换行符。常见的块级元素包括<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>等。</p></li><li><p><code>inline</code>：将元素呈现为内联元素。内联元素不会独占一行，而是与其他元素在同一行内显示，并根据内容自动收缩。常见的内联元素包括<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;em&gt;</code>等。</p></li><li><p><code>inline-block</code>：将元素呈现为内联块级元素。内联块级元素与内联元素类似，可以与其他元素在同一行内显示，但可以设置宽度、高度和内外边距。常见的内联块级元素包括<code>&lt;img&gt;</code>、<code>&lt;button&gt;</code>等。</p></li><li><p><code>none</code>：将元素隐藏，不在页面中显示。隐藏后的元素不占据空间。</p></li><li><p><code>flex</code>：将元素呈现为弹性盒子。通过使用弹性盒子布局，可以方便地创建灵活的、自适应的布局。常见的弹性盒子属性包括<code>flex-direction</code>、<code>justify-content</code>、<code>align-items</code>等。</p></li><li><p><code>grid</code>：将元素呈现为网格容器。使用网格布局可以将页面划分为行和列，并使元素在网格中进行布局。常见的网格属性包括<code>grid-template-columns</code>、<code>grid-template-rows</code>、<code>grid-gap</code>等。</p></li></ol><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>![[Pasted image 20240423213701.png]]</p><h1 id="CSS3（布局）"><a href="#CSS3（布局）" class="headerlink" title="CSS3（布局）"></a>CSS3（布局）</h1><h2 id="CSS元素定位"><a href="#CSS元素定位" class="headerlink" title="CSS元素定位"></a>CSS元素定位</h2><h3 id="标准流（Normal-Flow）"><a href="#标准流（Normal-Flow）" class="headerlink" title="标准流（Normal Flow）"></a>标准流（Normal Flow）</h3><ul><li>默认情况下，元素都是按照<strong>normal flow</strong> 进行排布<ul><li><strong>从左到右、从上到下</strong>按顺序摆放好</li><li>默认情况下，<strong>互相之间不存在层叠现象</strong></li></ul></li></ul><h4 id="margin-padding位置调整"><a href="#margin-padding位置调整" class="headerlink" title="margin-padding位置调整"></a>margin-padding位置调整</h4><ul><li>在标准流中，可以使用<strong>margin、padding</strong>对元素进行定位<ul><li>其中margin还可以设置负数</li></ul></li><li>缺点：<ul><li>设置一个元素的<strong>margin或者padding</strong>，通常会<em>影响标准流中其他元素</em>的定位效果</li><li><em>不便于实现元素叠层效果</em></li></ul></li><li>如果希望一个元素跳出标准流，单独的对某个元素进行定位<ul><li>可以通过<strong>position属性</strong>来进行设置</li></ul></li></ul><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><h4 id="认识元素定位"><a href="#认识元素定位" class="headerlink" title="认识元素定位"></a>认识元素定位</h4><ul><li><p>定位允许你从<strong>正常的文档流布局中取出元素</strong>，并使它们具有不同的行为</p><ul><li>例如<em>放在另一个元素上面</em></li><li>或者<em>始终保持在浏览器视窗内的同一位置</em></li></ul></li><li><p>定位在开发中非常常见</p><p>  ![[Pasted image 20240426210030.png]]![[Pasted image 20240426210100.png]]<br>  ![[Pasted image 20240426210111.png]]</p></li></ul><h4 id="认识position属性"><a href="#认识position属性" class="headerlink" title="认识position属性"></a>认识position属性</h4><ul><li>利用position属性可以对元素进行定位，常用取值有5个：<br>  static、relative、absolute、sticky、fixed</li><li>默认值：<ul><li><strong>static</strong>：默认值，静态定位</li></ul></li><li>使用下面的值，可以让元素变成定位元素：<ul><li><strong>realtive</strong>：相对定位</li><li><strong>absolute</strong>：绝对定位</li><li><strong>fixed</strong>：固定定位</li><li><strong>sticky</strong>：粘性定位<br>语法基本格式：<br><code>position: realtive;</code></li></ul></li></ul><p><strong>position值比对</strong><br>![[Pasted image 20240427175031.png]]</p><h4 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位- static"></a>静态定位- static</h4><ul><li>position属性的默认值<ul><li>元素按照<strong>normal flow</strong>布局</li><li><strong>left、right、top、bottom</strong>没有任何作用</li></ul></li></ul><h4 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位-relative"></a>相对定位-relative</h4><ul><li><p>元素按照<em>normal Flow</em>布局</p></li><li><p>可以通过<strong>left、right、top、bottom</strong>进行定位</p><ul><li>定位<em>参照对象</em>是元素<em>自己原来的位置</em></li></ul></li><li><p>left、right、top、bottom用来设置元素的具体位置，对元素的作用如下图所示：</p><p>  ![[Pasted image 20240426212721.png]]</p></li><li><p>相对定位的应用场景</p><ul><li>在<em>不影响其他元素位置的前提</em>下，对<em>当前元素位置进行微调</em></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 相对定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是strong元素<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../pct/pic.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240426213008.png]]</p><p>练习：写3的平方+2的三次方&#x3D;17这个式子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 把指数缩小一点 */</span></span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 位置调整为相对定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-comment">/* 向上移 */</span></span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 3的平方+2的三次方=17 --&gt;</span><br>        3<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> + 2<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> = 17<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240426213542.png]]</p><h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位-fixed"></a>固定定位-fixed</h3><ul><li>元素<em>脱离normal flow</em>(脱离标准流、脱标)</li><li>可以通过<strong>left、right、top、bottom</strong>进行定位</li><li>定位参照对象是视口（viewport）</li><li>当画布滚动时，固定不动</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./photo/OIP.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240427145731.png]]</p><h4 id="画布和视口"><a href="#画布和视口" class="headerlink" title="画布和视口"></a>画布和视口</h4><p>![[Pasted image 20240427150152.png]]</p><ul><li>视口：<ul><li>文档的可视区域</li><li>如上图<em>红框</em>所示</li></ul></li><li>画布：<ul><li>用于渲染文档的区域</li><li>文档内容超出视口范围，可以通过滚动查看</li><li>如上图<em>黑框</em>所示</li></ul></li><li>宽高对比：<ul><li>画布 &gt;&#x3D; 视口<br>练习：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.handel</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 固定位置 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.handel</span> <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 文字居中 */</span></span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-comment">/* 文字高度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 背景颜色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">89</span>, <span class="hljs-number">90</span>, <span class="hljs-number">91</span>);</span><br><span class="language-css">            <span class="hljs-comment">/* 字体颜色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 角落的角圆半径 */</span></span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 鼠标放上去时，光标变成小手 */</span></span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 鼠标放上去时改变背景颜色 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.handel</span> <span class="hljs-selector-class">.item</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 间隔 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.top</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;handel&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item top&quot;</span>&gt;</span>顶部<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item bottom&quot;</span>&gt;</span>反馈<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240427163004.png]]</p><h3 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位-absolute"></a>绝对定位-absolute</h3><ul><li>元素脱离normal flow</li><li>可以通过<strong>left、right、top、bottom</strong>进行定位<ul><li>定位参照对象是<em>最邻近的<strong>定位</strong>祖先元素</em></li><li>如果<em>找不到这样的祖先，参照对象是视口</em>（这时候跟固定定位类似）</li></ul></li><li>定位元素<ul><li>position值不为<em>static</em>的元素</li><li>也就是position值为relative、absolute、fixed的元素</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">strong</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 脱离标准流 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">700px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-comment">/* 给div设置定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是span元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>我是strong元素<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./photo/OIP.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是div元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240427172357.png]]</p><ul><li>在绝大多数情况下，子元素的<strong>绝对定位都是相对于父元素进行定位</strong></li><li>如果希望子元素相对于父元素进行定位，又不希望父元素脱标，常用解决方案：<ul><li>父元素设置<em>position:relative</em>（让父元素成为定位元素，而且父元素不脱离标准流）</li><li>子元素设置<em>position:absolute</em></li><li>简称：子绝父相</li></ul></li></ul><h4 id="将position设置为absolute-fixed元素的特点（一）"><a href="#将position设置为absolute-fixed元素的特点（一）" class="headerlink" title="将position设置为absolute&#x2F;fixed元素的特点（一）"></a>将position设置为absolute&#x2F;fixed元素的特点（一）</h4><ul><li>可以随意设置宽度、高度</li><li>高度默认由内容决定</li><li>不再受标准流的约束<ul><li>不再严格按照<em>从上到下、从左到右</em>排布</li><li>不再<em>严格区分块级、行内级，行内块级的很多特性</em>都会消失</li></ul></li><li>不再给父元素汇报宽高数据</li></ul><h4 id="将position设置为absolute-fixed元素的特点（二）"><a href="#将position设置为absolute-fixed元素的特点（二）" class="headerlink" title="将position设置为absolute&#x2F;fixed元素的特点（二）"></a>将position设置为absolute&#x2F;fixed元素的特点（二）</h4><ul><li>绝对定位元素<ul><li>position值为<em>absolute&#x2F;fixed</em>的元素</li></ul></li><li>对于绝对定位元素来说<ul><li>定位参照对象的宽度 &#x3D; left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度</li><li>定位参照对象的高度 &#x3D; top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</li></ul></li><li>如果希望绝对定位元素的宽高和定位参照对象一样，可以给绝对定位元素设置以下属性<ul><li>left：0、right：0、top：0、bottom：0、margin：0</li></ul></li><li>如果希望绝对定位元素在定位参照对象中居中显示，可以给绝对定位元素设置以下属性<ul><li>left：0、right：0、top：0、bottom：0、margin：auto</li><li>另外，还得<em>设置具体的宽高值</em>（小于定位参照对象的宽高）</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 设置居中显示，且不存在兼容性问题*/</span></span><br><span class="language-css">        <span class="hljs-comment">/* 上下偏移量相等，左右偏移量相等，margin设置为auto会使剩余空间平均分配到左右两侧和上下两侧 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.containter</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d8afaf</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;containter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240428170130.png]]</p><p>练习：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 去除链接原有样式 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 设置为定位元素 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.top</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.top</span> <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 去除图片下面多出来的区域 */</span></span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 添加背景覆盖图片 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.cover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./photo/coverall.png</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">27px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">27px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./photo/coverall.png</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> -<span class="hljs-number">537px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.top</span> <span class="hljs-selector-class">.info</span> <span class="hljs-selector-class">.icon</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">1px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">11px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置间距 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./photo/iconall.png</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> -<span class="hljs-number">24px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.bottom</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">8px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> <span class="hljs-selector-class">.bottom</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./photo/wy.01.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cover&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;count&quot;</span>&gt;</span>4999万<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bottom&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><br>            无前奏 | 欧美女声 | 三秒爱上<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240428190122.png]]</p><h4 id="left……-属性和margin-left……的区别"><a href="#left……-属性和margin-left……的区别" class="headerlink" title="left…….属性和margin-left……的区别"></a>left…….属性和margin-left……的区别</h4><ol><li><p>定位属性 vs 外边距属性：</p><ul><li><code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>是用于定位元素的属性，通常与<code>position</code>属性（如<code>relative</code>、<code>absolute</code>、<code>fixed</code>）一起使用。</li><li><code>margin-left</code>、<code>margin-right</code>、<code>margin-top</code>、<code>margin-bottom</code>是用于设置元素的外边距的属性。</li></ul></li><li><p>控制位置 vs 控制间距：</p><ul><li><code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性用于控制元素相对于其包含块的位置，分别表示元素的左、右、上、下偏移量。</li><li><code>margin-left</code>、<code>margin-right</code>、<code>margin-top</code>、<code>margin-bottom</code>属性用于控制元素与其相邻元素之间的间距，分别表示元素的左、右、上、下外边距的大小。</li></ul></li><li><p>值的类型：</p><ul><li><code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性可以使用具体的长度值（如像素、百分比）或关键字（如<code>auto</code>）来指定偏移量。</li><li><code>margin-left</code>、<code>margin-right</code>、<code>margin-top</code>、<code>margin-bottom</code>属性也可以使用具体的长度值或关键字。</li></ul></li><li><p>应用方式：</p><ul><li><code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性通常用于定位元素的具体位置，例如将元素相对于包含块的左上角或右下角进行定位。</li><li><code>margin-left</code>、<code>margin-right</code>、<code>margin-top</code>、<code>margin-bottom</code>属性主要用于控制元素与其相邻元素之间的间距，例如设置元素与其相邻元素的水平或垂直间距。</li></ul></li></ol><p><strong>需要注意的是:</strong><code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性通常与<code>position</code>属性一起使用，而<code>margin-left</code>、<code>margin-right</code>、<code>margin-top</code>、<code>margin-bottom</code>属性可以在任何情况下使用。另外，定位属性（如<code>relative</code>、<code>absolute</code>、<code>fixed</code>）会影响<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>属性的行为，而外边距属性不受定位属性的影响。</p><h4 id="width：auto"><a href="#width：auto" class="headerlink" title="width：auto"></a>width：auto</h4><p>auto是什么：交由浏览器处理，自动调整</p><ul><li>行内非替换元素 -&gt; width: 包裹内容</li><li>块级元素 -&gt; width: 包含块的宽度</li><li>绝对定位元素 -&gt; width: 包裹内容</li></ul><h3 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位-sticky"></a>粘性定位-sticky</h3><ul><li>可以看做是<em>相对定位和绝对定位的结合体</em></li><li>它允许被定位的元素<em>表现得像相对定位一样</em>，直到它滚动到某个阈值点</li><li>当<em>达到阈值点</em>时，就会<em>变成绝对定位</em></li><li>sticky是相对于最近的包含滚动视口的滚动祖先</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 元素内容溢出时，显示滚条 */</span></span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: scroll;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: sticky;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-comment">/* 距离上方0的时候变成绝对定位 */</span></span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>电脑<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>手机<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>衣服<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>鞋子<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表5<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表6<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表7<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表8<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表9<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表10<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表11<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表12<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表13<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表14<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表15<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表16<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表17<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表18<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表19<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>电脑列表20<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240430171525.png]]</p><h2 id="CSS属性-z-index"><a href="#CSS属性-z-index" class="headerlink" title="CSS属性 - z - index"></a>CSS属性 - z - index</h2><ul><li><code>z-index</code>属性用来设置定位元素的<strong>层叠顺序</strong>（仅对定位元素有效）<ul><li>取值可以是<em>正整数、负整数、0</em></li></ul></li><li>比较原则<ul><li>如果是<em>兄弟关系</em><ul><li><em>z-index越大，层叠在越上面</em></li><li><em>z-index相等，写在后面的那个元素层叠在上面</em></li></ul></li><li>如果<em>不是兄弟关系</em><ul><li>各自<em>从元素自己以及祖先元素中，找出最邻近的2个定位元素进行比较</em></li><li>而且<em>这2个定位元素必须设置z-index的具体数值</em></li><li>父元素的 <code>z-index</code> 值会影响其子元素的堆叠顺序。如果父元素的 <code>z-index</code> 值较低，那么子元素即使具有较高的 <code>z-index</code> 值，也无法覆盖其他父元素的内容。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: fixed;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: greenyellow;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item box3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240430184648.png]]</p><h2 id="CSS元素浮动"><a href="#CSS元素浮动" class="headerlink" title="CSS元素浮动"></a>CSS元素浮动</h2><h3 id="认识浮动"><a href="#认识浮动" class="headerlink" title="认识浮动"></a>认识浮动</h3><ul><li><code>float</code>属性可以指定一个元素应<em>沿其容器的左侧或右侧放置</em>，允许<em>文本和内联元素环绕它</em></li><li>绝对定位、浮动都会让元素脱离标准流，以达到灵活布局的效果</li><li>可以通过float属性让元素产生浮动效果，float的常用取值<ul><li><strong>none</strong>：不浮动，默认值</li><li><strong>left</strong>：向左浮动</li><li><strong>right</strong>：向右浮动</li></ul></li></ul><h3 id="浮动的规则"><a href="#浮动的规则" class="headerlink" title="浮动的规则"></a>浮动的规则</h3><ul><li>规则一<ul><li>元素一旦浮动后，脱离标准流<ul><li>朝着<em>向左或向右方向移动，直到自己的边界紧贴着包含块（一般是父元素）或者其他浮动元素的边界为止</em></li><li><em>定位元素会层叠在浮动元素上面</em></li></ul></li></ul></li></ul><p>![[Pasted image 20240430200108.png]]</p><ul><li>规则二<ul><li>如果元素是向左（右）浮动，浮动元素的左（右）边界不能超出<em>包含块）</em> 的左（右i）边界</li></ul></li><li>规则三<ul><li>浮动元素之间不能层叠<ul><li>如果一个元素浮动，另一个元素已经在那个位置了，后浮动的元素将紧贴着前一个浮动元素（左浮找左浮，右浮找右浮）</li><li>如果水平方向剩余的空间不够显示浮动元素，浮动元素将向下移动，直到有充足的空间为止</li></ul></li></ul></li><li>规则四<ul><li>浮动元素不能与行内级内容层叠，行内级内容将会被浮动元素推出（如行内级元素、inline-block元素、块级元素的文字内容）<br>![[Pasted image 20240430200705.png]]</li></ul></li><li>规则五<ul><li>行内级元素、inline-block元素浮动后，其顶部将与所在行的顶部对齐<br><strong>可以利用将所有子元素向同一个方向浮动来解决子元素间的间隙问题</strong></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.containter</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: greenyellow;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: blanchedalmond;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.info</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">155</span>, <span class="hljs-number">202</span>, <span class="hljs-number">215</span>);</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.ht</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: brown;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;containter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item box3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ht&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            我是div我是div我是div我是div我是div我是div我是div我是div我是div我是div<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240430201831.png]]</p><h3 id="浮动的问题-高度塌陷"><a href="#浮动的问题-高度塌陷" class="headerlink" title="浮动的问题-高度塌陷"></a>浮动的问题-高度塌陷</h3><ul><li>由于浮动元素脱离了标准流，变成了脱标元素，所以<strong>不再向父元素汇报高度</strong><ul><li>父元素<em>计算总高度</em>时，就<em>不会计算浮动子元素的高度</em>，导致高度塌陷的问题</li></ul></li><li>解决父元素高度塌陷问题的过程，一般叫做**清浮动（清理浮动、清除浮动）</li><li>清浮动的目的是让*父元素计算总高度时，把浮动子元素的高度算进去</li><li>如何清除浮动？使用clear属性</li></ul><h2 id="CSS属性-clear"><a href="#CSS属性-clear" class="headerlink" title="CSS属性-clear"></a>CSS属性-clear</h2><ul><li>clear属性是做什么的？<ul><li>clear属性可以指定一个元素<em>是否必须移动</em>（清除浮动后）<em>到在它之前的浮动元素</em>下面</li></ul></li><li>clear的常用取值<ul><li><strong>left</strong>：要求元素的顶部低于之前生成的所有左浮动元素的底部</li><li><strong>right</strong>：要求元素的顶部低于之前生成的所有右浮动元素的底部</li><li><strong>both</strong>：要求元素的顶部低于之前生成的所有浮动元素的底部</li><li><strong>none</strong>：默认值，无特殊要求</li></ul></li></ul><p><strong>清理浮动的方法</strong>：给父元素添加<strong>after伪元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">元素::after &#123;<br>content: &quot;&quot;;<br>clear: both;<br>display: block;<br>/*提高浏览器兼容性*/<br>visibility: hidden;<br>height: 0;<br>&#125;<br>元素 &#123;<br>*zoom: 1;/*IE6/7兼容性*/<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS-flex布局"><a href="#CSS-flex布局" class="headerlink" title="CSS flex布局"></a>CSS flex布局</h2><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS Flexbox 布局指南 |CSS 技巧</a></p><h3 id="认识flex布局"><a href="#认识flex布局" class="headerlink" title="认识flex布局"></a>认识flex布局</h3><ul><li>flexbox翻译为弹性盒子<ul><li><em>弹性盒子</em>是一种用于<em>按行或按列布局元素的唯一布局方法</em></li><li>元素可以<em>膨胀以填充额外的空间，收缩以适应更小的空间</em></li><li>通常我们使用flexbox来进行布局的方案称之为<em>flex布局</em></li></ul></li><li>flex布局是目前web开发中使用最多的布局方案<ul><li>目前特别在<em>移动端</em>可以说已经完全普及</li><li>在<em>pc</em>端也几乎完全普及和使用，只有<em>非常少数的网站依然在用浮动来布局</em></li></ul></li></ul><h3 id="felx布局的重要概念"><a href="#felx布局的重要概念" class="headerlink" title="felx布局的重要概念"></a>felx布局的重要概念</h3><ul><li>两个重要概念<ul><li>开启了flex布局的元素叫<strong>flex containter</strong></li><li>flex containter里面的直接子元素叫做<strong>flex item</strong><br>![[Pasted image 20240501213649.png]]</li></ul></li><li>当flex containter中的子元素变成了flex item时，具备以下特点<ul><li>flex item的布局将受<em>flex containter属性的设置来进行控制和布局</em></li><li>flex item<em>不再严格区分块级元素和行内级元素</em></li><li>flex item<em>默认情况下是包裹内容的，但是可以设置宽度和高度</em></li></ul></li><li>设置display属性为flex或者inline-flex可以成为flex containter<ul><li><strong>flex</strong>：flex containter以<strong>block-level</strong>形式存在</li><li><strong>inline-flex</strong>：flex containter以<strong>inline-level</strong>形式存在</li></ul></li></ul><h3 id="flex布局的模型"><a href="#flex布局的模型" class="headerlink" title="flex布局的模型"></a>flex布局的模型</h3><p>![[Pasted image 20240501214659.png]]</p><h3 id="flex相关的属性"><a href="#flex相关的属性" class="headerlink" title="flex相关的属性"></a>flex相关的属性</h3><ul><li>应用在flex containter上的CSS属性<ul><li>flex-flow</li><li>flex-direction</li><li>flex-wrap</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul></li><li>应用在flex items上的CSS属性<ul><li>flex-grow</li><li>flex-basis</li><li>flex-shrink</li><li>order</li><li>align-self</li><li>flex</li></ul></li></ul><h4 id="flex-containter"><a href="#flex-containter" class="headerlink" title="flex-containter"></a>flex-containter</h4><h5 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h5><ul><li>flex items 默认都是沿着main axis（主轴）从main start开始往main end方向排布<ul><li><strong>flex-direction</strong>决定了<strong>main axis</strong> 的方向，有四个取值</li><li><strong>row(默认值)、row-reverse、column、column-reverse</strong><br>![[Pasted image 20240501220522.png]]</li></ul></li></ul><h5 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h5><ul><li>flex-wrap决定了flex containter是单行还是多行<ul><li><strong>nowrap</strong>(默认)：单行</li><li><strong>wrap</strong>：多行</li><li><strong>wrap-reverse</strong>：多行（对比wrap，cross start与cross end相反）<br>![[Pasted image 20240501221341.png]]</li></ul></li></ul><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><ul><li>flex-flow属性是flex-direction和flex-wrap的简写<ul><li>任何顺序，并且都可以省略<br><code>&lt;&#39;flex-direction&#39;&gt; || &lt;&#39;flex-wrap&#39;&gt;</code></li></ul></li></ul><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h5><ul><li>justify-content决定了flex items在main axis上的对齐方式<ul><li><strong>flex-start</strong>(默认值)：与main start对齐</li><li>![[Pasted image 20240501223509.png]]</li><li><strong>flex-end</strong>：与main end对齐</li><li>![[Pasted image 20240501223533.png]]</li><li><strong>center</strong>：居中对齐</li><li>![[Pasted image 20240501223545.png]]</li><li><strong>space-between</strong>：<ul><li>flex items之间的距离相等</li><li>与main start、main end两端对齐</li></ul></li><li>![[Pasted image 20240501223655.png]]</li><li><strong>space-around</strong>：<ul><li>flexitems之间的距离相等</li><li>flexitems与main start、main end之间的距离是flex items之间距离的一半</li></ul></li><li>![[Pasted image 20240501223951.png]]</li><li><strong>space-evenly</strong>：<ul><li>flex items之间的距离相等</li><li>flex items与main start、main end之间的距离等于是flex items之间距离</li></ul></li><li>![[Pasted image 20240501223923.png]]</li></ul></li></ul><h5 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h5><ul><li>align-items决定了flex items在cross axis上的对齐方式<ul><li><strong>normal</strong>：在弹性布局中，效果和stretch一样</li><li><strong>stretch</strong>：当flex items在cross axis方向的size为auto时，会自动拉伸至填充flex containter</li><li>![[Pasted image 20240501225200.png]]</li><li><strong>flex-start</strong>：与cross start对齐</li><li>![[Pasted image 20240501225312.png]]</li><li><strong>flex-end</strong>：与cross end对齐</li><li>![[Pasted image 20240501225327.png]]</li><li><strong>center</strong>：居中对齐</li><li>![[Pasted image 20240501225337.png]]</li><li><strong>baseline</strong>：与基准线对齐</li><li>![[Pasted image 20240501225348.png]]</li></ul></li></ul><h5 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h5><ul><li>align-content决定了多行flex items在cross axis上的对齐方式，用法与justify-content类似<ul><li><strong>stretch</strong>（默认值）：与align-items的stretch类似</li><li><strong>flex-start</strong>：与cross start对齐</li><li>![[Pasted image 20240501230258.png]]</li><li><strong>flex-end</strong>：与cross end对齐</li><li>![[Pasted image 20240501230306.png]]</li><li><strong>center</strong>：居中对齐</li><li>![[Pasted image 20240501230317.png]]</li><li><strong>space-between</strong>：<ul><li>flex items之间的距离相等</li><li>与cross start、cross end两端对齐</li></ul></li><li>![[Pasted image 20240501230329.png]]</li><li><strong>space-around</strong>：<ul><li>flexitems之间的距离相等</li><li>flexitems与main start、main end之间的距离是flex items之间距离的一半</li></ul></li><li>![[Pasted image 20240501230341.png]]</li><li><strong>space-evenly</strong>：<ul><li>flex items之间的距离相等</li><li>flex items与main start、main end之间的距离等于是flex items之间距离</li></ul></li></ul></li></ul><h4 id="flex-items"><a href="#flex-items" class="headerlink" title="flex-items"></a>flex-items</h4><h5 id="order"><a href="#order" class="headerlink" title="order"></a>order</h5><ul><li>order决定了flex items的排布顺序<ul><li>可以设置<em>任意整数</em>（正整数、负整数、0），<em>值越小就越排在前面</em></li><li>默认值是0</li></ul></li></ul><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><ul><li>flex items可以通过align-self覆盖flex containter设置的align-items<ul><li><strong>auto</strong>（默认值）：遵从flex containter的align-items设置</li><li><strong>stretch、flex-start、flex-end、center、baseline</strong>，效果跟align-items一致</li></ul></li></ul><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h5><ul><li>flex-grow决定了flex items如何扩展（拉伸、成长）<ul><li>可以设置<em>任意非负数字（正整数、正小数、0），默认值是0</em></li><li>当flex containter在main axis方向上<em>有剩余size</em>时，<em>flex-grow属性才会有效</em></li></ul></li><li>如果所有flex items的flex-grow<em>总和sum超过1</em>，每个flex item扩展的size为<ul><li>flex containter的剩余<em>size * flex-grow&#x2F;sum</em></li></ul></li><li>flex items 扩展后的最终size不能超过max-width&#x2F;max-height</li></ul><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h5><ul><li>flex-shrink决定了flex items如何收缩<ul><li>可以设置<em>任意非负数字（正整数、正小数、0），默认值是1</em></li><li>当flex items在main axis方向上<em>超过了flex containter的size</em>时，<em>flex-shrink属性才会有效</em></li></ul></li><li>如果所以flex items的flex-grow<em>总和sum超过1</em>，每个flex item收缩的size为<ul><li>flex items超出flex containter的size * 收缩比例 &#x2F; 所有flex items的收缩比例之和</li></ul></li><li>flex items 收缩后的最终size不能小于min-width&#x2F;min-height</li></ul><h5 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h5><ul><li>flex-basis用来设置flex items在main axis方向上的basis size<ul><li><strong>auto</strong>（默认值）、<strong>具体的宽度数值</strong></li></ul></li><li>决定flex items最终base size的因素，从优先级高低<ul><li>max-width \ max-height \ min-width \ min-height</li><li>flex-basis</li><li>width \ height</li><li>内容本身的size</li></ul></li></ul><h5 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h5><ul><li>flex是flex-grow || flex-shrink || flex-basis的简写，flex属性可以指定1个、2个或3个值<br>  <code>none || [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</code></li><li><strong>单值语法</strong>：值必须是以下之一：<ul><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow"><code>&lt;flex-grow&gt;</code></a> 的有效值：此时简写会扩展为 。<code>flex: &lt;flex-grow&gt; 1 0</code></li><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis"><code>&lt;flex-basis&gt;</code></a> 的有效值：此时简写会扩展为 。<code>flex: 1 1 &lt;flex-basis&gt;</code></li><li>关键字 或者全局关键字之一。<code>none</code></li></ul></li><li><strong>双值语法</strong>：<ul><li>第一个值必须是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow"><code>flex-grow</code></a> 的有效值。</li><li>第二个值必须是以下之一：<ul><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink"><code>flex-shrink</code></a> 的有效值：此时简写会扩展为 。<code>flex: &lt;flex-grow&gt; &lt;flex-shrink&gt; 0</code></li><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis"><code>flex-basis</code></a> 的有效值：此时简写会扩展为 。<code>flex: &lt;flex-grow&gt; 1 &lt;flex-basis&gt;</code></li></ul></li></ul></li><li><strong>三值语法</strong>：值必须按照以下顺序指定：<ol><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow"><code>flex-grow</code></a> 的有效值。</li><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-shrink"><code>flex-shrink</code></a> 的有效值。</li><li>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis"><code>flex-basis</code></a> 的有效值。<br><strong>注意</strong><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex#initial"><code>initial</code></a><br>元素会根据自身宽高设置尺寸。它会缩短自身以适应 flex 容器，但不会伸长并吸收 flex 容器中的额外自由空间来适应 flex 容器。相当于将属性设置为””。<code>flex: 0 1 auto</code></li></ol></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex#auto"><code>auto</code></a><br>元素会根据自身的宽度与高度来确定尺寸，但是会伸长并吸收 flex 容器中额外的自由空间，也会缩短自身来适应 flex 容器。这相当于将属性设置为 “”.<code>flex: 1 1 auto</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex#none"><code>none</code></a><br>元素会根据自身宽高来设置尺寸。它是完全非弹性的：既不会缩短，也不会伸长来适应 flex 容器。相当于将属性设置为””。<code>flex: 0 0 auto</code></p><h3 id="flex布局的常见问题"><a href="#flex布局的常见问题" class="headerlink" title="flex布局的常见问题"></a>flex布局的常见问题</h3><p>如何解决如下布局的对齐问题？<br>![[Pasted image 20240503172805.png]]<br><em>解决办法</em>：在子元素的最后<strong>添加几个空的span&#x2F;i元素</strong>，高度与其他子元素一致，添加的个数是<strong>列数-2</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.containter</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">flex-wrap</span>: wrap;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: space-between;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.item</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">79</span>, <span class="hljs-number">155</span>, <span class="hljs-number">200</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">i</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">220px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;containter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item5&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item6&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item7&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item8&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item9&quot;</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item10&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item item11&quot;</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 添加span/i的个数是列数-2，并且宽度要和前面的div一致 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240503174704.png]]</p><h2 id="布局方案总结"><a href="#布局方案总结" class="headerlink" title="布局方案总结"></a>布局方案总结</h2><p>![[Pasted image 20240501163839.png]]</p><h1 id="额外补充知识"><a href="#额外补充知识" class="headerlink" title="额外补充知识"></a>额外补充知识</h1><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h3 id="border图形"><a href="#border图形" class="headerlink" title="border图形"></a>border图形</h3><p>border主要用来给盒子增加边框，但是在开发中我们也可以利用边框的特性来实现一些形状 </p><p>给一个盒子四周添加不同颜色的边框<br>![[Pasted image 20240425192608.png]]</p><p>![[Pasted image 20240425192628.png]]</p><p>将border设置为盒子长宽的一半<br>![[Pasted image 20240425192903.png]]</p><p>![[Pasted image 20240425192918.png]]<br>将另外三边的颜色去除<br>![[Pasted image 20240425193311.png]]</p><p>![[Pasted image 20240425193352.png]]</p><p>将这个盒子旋转<br>![[Pasted image 20240425193858.png]]</p><p>![[Pasted image 20240425193914.png]]</p><h3 id="Web网络字体"><a href="#Web网络字体" class="headerlink" title="Web网络字体"></a>Web网络字体</h3><h4 id="Web-fonts的工作原理"><a href="#Web-fonts的工作原理" class="headerlink" title="Web fonts的工作原理"></a>Web fonts的工作原理</h4><ul><li>首先，我们需要通过一些渠道<strong>获取到希望使用的字体</strong>：</li></ul><p>![[Pasted image 20240425194548.png]]</p><ul><li>其次，在我们CSS代码中<strong>使用该字体</strong>：</li><li>最后，在<strong>部署静态资源</strong>时，将<strong>HTML&#x2F;CSS&#x2F;JavaScript&#x2F;Font一起部署在静态服务器</strong>中</li><li>用户角度：<br>  1. 浏览一个网页时，因为代码中有引入字体文件，<em>字体文件会被一起下载下来</em><br>  2. 浏览器会根据使用的字体在<em>下载的字体文件中查找、解析、使用对应的字体</em><br>  3. <em>在浏览器中使用对应的字体显示内容</em></li></ul><h4 id="使用Web-Fonts"><a href="#使用Web-Fonts" class="headerlink" title="使用Web Fonts"></a>使用Web Fonts</h4><ul><li><strong>第一步：</strong> 在字体天下网站下载一个字体（实际开发中由产品部提供）<ul><li><a href="https://www.fonts.net.cn/">字体天下-提供各类字体的免费下载和在线预览服务 (fonts.net.cn)</a></li><li>默认下载下来的是ttf文件</li></ul></li><li><strong>第二步：</strong> 使用字体</li><li>使用过程如下：<ul><li>1、将<em>字体放到对应的目录中</em></li><li>2、<strong>通过@font-face</strong><em>来引入字体</em>，并且<em>设置格式</em></li><li>3、使用字体</li></ul></li><li>注意：<strong>@font-face</strong> 用于加载一个自定义的字体</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 将这个字体引入到网页中 */</span></span><br><span class="language-css">       <span class="hljs-keyword">@font-face</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;why&quot;</span>; <span class="hljs-comment">/* 给这个字体起一个名字，方便接下来引用 */</span></span><br><span class="language-css">            <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./fonts/YeZiGongChangTangYingHei-2.ttf&quot;</span>);</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;why&quot;</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>我是div元素<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240425212330.png]]</p><h4 id="Web-Fonts的兼容性"><a href="#Web-Fonts的兼容性" class="headerlink" title="Web Fonts的兼容性"></a>Web Fonts的兼容性</h4><ul><li>我们刚才使用的字体文件是 .ttf, 他是True Type字体。<ul><li>在开发中某些浏览器可能不支持该字体，所以为了浏览器的兼容性问题，我们需要有对应其他格式的字体；</li></ul></li><li>True Type字体：拓展名是 .ttf<ul><li><em>OpenType&#x2F;TrueType字体</em>：拓展名是 .ttf、.otf, 建立在TrueType字体之上</li><li><em>Embedded OpenType字体</em>：拓展名是 .eot, OpenType字体的压缩版</li><li><em>SVG字体</em>：拓展名是 .svg、.svgz</li><li><em>WOFF表示Web Open Font Format web开放字体</em>：拓展名是 .woff, 建立在True Type字体之上</li></ul></li></ul><p>![[Pasted image 20240425213333.png]]</p><ul><li>如果我们要具备很强的兼容性，那么可以如下格式编写：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">@font-face &#123;<br>            font-family: &quot;why&quot;; /* 给这个字体起一个名字，方便接下来引用 */<br>            src: url(&quot;./fonts/YeZiGongChangTangYingHei-2.eot&quot;);<br>            src: url(&quot;./fonts/YeZiGongChangTangYingHei-2.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;),<br>            url(&quot;./fonts/YeZiGongChangTangYingHei-2.woff&quot;) format(&quot;woff&quot;),<br>            url(&quot;./fonts/YeZiGongChangTangYingHei-2.ttf&quot;) format(&quot;truetype&quot;),<br>            url(&quot;./fonts/YeZiGongChangTangYingHei-2.svg#uxfonteditor&quot;) format(&quot;svg&quot;);<br>            font-style: normal;<br>            font-weight: normal;<br>       &#125;<br></code></pre></td></tr></table></figure><ul><li>这被称为刀枪不入的 <em>@font-face</em>语法：是<strong>Paul Irish</strong>早期的一篇文章提及后开始流行起来</li><li>src用于指定字体资源<ul><li><strong>url</strong>指定资源的路径</li><li><strong>format</strong>用于帮助浏览器快速识别字体的格式</li></ul></li></ul><h3 id="Web-字体图标"><a href="#Web-字体图标" class="headerlink" title="Web 字体图标"></a>Web 字体图标</h3><h4 id="认识字体图标"><a href="#认识字体图标" class="headerlink" title="认识字体图标"></a>认识字体图标</h4><ul><li>什么是字体图标：把<em>字体直接设计成图标的样子</em>就叫做<em>字体图标</em></li><li>字体图标的好处：<ul><li>放大不会失真</li><li>可以任意切换颜色</li><li>用到很多个图标时，文件相对图片较小</li></ul></li><li>字体图标的使用：<ul><li>登录阿里icons（<a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a>）</li><li>下载代码，并且拷贝到项目中</li></ul></li><li>将字体文件和默认的CSS文件导入到项目中</li></ul><h4 id="字体图标的使用"><a href="#字体图标的使用" class="headerlink" title="字体图标的使用"></a>字体图标的使用</h4><ul><li>字体图标的使用步骤：<ul><li>第一步：通过link引入iconfont.css文件</li><li>第二步：使用字体图标</li></ul></li><li>使用字体图标常见的两种方式：<ul><li>方式一：通过对应字体图标的Unicode来显示代码</li><li>方式二：利用已经编写好的class，直接使用<br>![[Pasted image 20240426164410.png]]<br>第一种方式：</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@font-face</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;iconfont&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./fonts01/iconfont.ttf</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.iconfont</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;iconfont&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.music</span><span class="hljs-selector-pseudo">::before</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\e617&quot;</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 直接通过内容（字符实体）展示 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont&quot;</span>&gt;</span><span class="hljs-symbol">&amp;#xe66a;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 不使用字符实体的方式展示（伪元素）出来 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont music&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240426162331.png]]<br>第二种方式：使用iconfont配置的CSS：<em>将 .ttf文件和 .css文件一起拖到项目里</em></p><p>![[Pasted image 20240426163726.png]]</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./fonts01/iconfont.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.icon</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: pink;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-dashuju icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240426163746.png]]</p><h3 id="CSS精灵图标-CSS-Sprite"><a href="#CSS精灵图标-CSS-Sprite" class="headerlink" title="CSS精灵图标 CSS Sprite"></a>CSS精灵图标 CSS Sprite</h3><h4 id="认识精灵图"><a href="#认识精灵图" class="headerlink" title="认识精灵图"></a>认识精灵图</h4><ul><li>什么是CSS Sprite<ul><li>是一种<strong>CSS图像合成技术</strong>，将<strong>各种小图片合并到一张图上</strong>，然后<strong>利用CSS的背景定位来显示对应的图片部分</strong></li><li>有人翻译为：CSS雪碧、CSS精灵</li></ul></li><li>使用CSS Sprite的好处<ul><li>减少网页的<strong>http请求数量，加快网页响应速度，减轻服务器压力</strong></li><li>减少<strong>图片总大小</strong></li><li>解决了<strong>图片命名问题</strong>，只需要针对一张集合的图片命名</li></ul></li><li>Sprite图片制作<ul><li>方法一：Photoshop，设计人员提供</li><li>方法二： <a href="https://www.toptal.com/developers/css/sprite-generator">https://www.toptal.com/developers/css/sprite-generator</a></li></ul></li></ul><h4 id="精灵图的使用"><a href="#精灵图的使用" class="headerlink" title="精灵图的使用"></a>精灵图的使用</h4><ul><li>精灵图的原理：<strong>通过只显示图片的很小的一部分来展示</strong></li><li>通常使用背景：<ul><li>设置对应元素的宽度和高度</li><li>设置精灵图作为背景图片</li><li>调整背景图片的位置来展示</li></ul></li><li>如何获取精灵图的位置<ul><li><a href="http://www.spritecow.com/">http://www.spritecow.com/</a></li></ul></li></ul><p>![[Pasted image 20240426172126.png]]</p><p>![[Pasted image 20240426172243.png]]</p><h3 id="cursor属性"><a href="#cursor属性" class="headerlink" title="cursor属性"></a>cursor属性</h3><ul><li>cursor可以设置鼠标指针（光标）在元素上面时的显示样式</li><li>cursor常见的设值有：<ul><li><strong>auto</strong>：浏览器根据上下文决定指针的显示样式，比如根据文本和非文本切换指针样式</li><li><strong>default</strong>：由操作系统决定，一般就是一个小箭头</li><li><strong>pointer</strong>：一只小手，鼠标挪动到链接上面默认就是这个样式</li><li><strong>text</strong>：一条竖线，鼠标指针挪动到文本输入框上面默认就是这个样式</li><li><strong>none</strong>：没有任何指针显示在元素上面</li></ul></li></ul><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><h3 id="CSS属性-transform"><a href="#CSS属性-transform" class="headerlink" title="CSS属性-transform"></a>CSS属性-transform</h3><ul><li>CSS transform属性允许对某一个元素进行某些形变，包括<strong>旋转，缩放，倾斜或平移等</strong></li><li>通常行内级元素不能进行形变<ul><li>对于行内非替换元素是无效的，比如span、a元素等</li></ul></li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>transform属性的语法如下：<br>![[Pasted image 20240508141635.png]]</li><li>常见的函数transform function有：<ul><li><strong>平移</strong>：translate(x, y)</li><li><strong>缩放</strong>：scale(x, y)</li><li><strong>旋转</strong>：rotate(deg)</li><li><strong>倾斜</strong>：skew(deg, deg)</li></ul></li></ul><h5 id="位移-translate"><a href="#位移-translate" class="headerlink" title="位移-translate"></a>位移-translate</h5><ul><li>平移： translate(x, y)：这个函数用于移动元素在平面上的位置</li><li>值个数<ul><li>一个值时，设置x轴上的位移</li><li>两个值时，设置x轴和y轴上的位移</li></ul></li><li>值类型<ul><li><strong>数字</strong>：100px</li><li><strong>百分比</strong>：参照物本身</li></ul></li><li>translate函数是translateX()和translateY()的缩写</li></ul><h5 id="缩放-scale"><a href="#缩放-scale" class="headerlink" title="缩放-scale"></a>缩放-scale</h5><ul><li>缩放：scale(x, y)：这个函数可改变元素的大小</li><li>值个数<ul><li>一个值时，设置x轴上的缩放</li><li>两个值时，设置x轴和y轴上的缩放</li></ul></li><li>值类型<ul><li><strong>数字</strong>：<ul><li>1：保持不变</li><li><blockquote><p>1：放大</p></blockquote></li><li>&lt;1：缩小</li></ul></li><li><strong>百分比</strong>：不常用</li></ul></li><li>scale函数是scaleX()和scaleY()的缩写</li></ul><h5 id="旋转-rotate"><a href="#旋转-rotate" class="headerlink" title="旋转-rotate"></a>旋转-rotate</h5><ul><li>旋转：rotate（angel)：这个函数可以让元素进行旋转</li><li>值类型：<ul><li>常用单位deg：旋转的角度</li><li>正数为顺时针</li><li>负数为逆时针</li><li><code>transform: rotate(90deg)</code></li></ul></li><li>rotate函数是rotateZ函数的简写写法</li><li>rotate的其他单位<ul><li>度（degrees)、百分度(gradians)、弧度(radians)、圈数(turns)</li></ul></li></ul><h5 id="倾斜-skew"><a href="#倾斜-skew" class="headerlink" title="倾斜-skew"></a>倾斜-skew</h5><ul><li>倾斜：skew(x, y)：这个函数定义了一个元素在二维平面上的倾斜转换</li><li>值个数<ul><li>一个值时，表示x轴上的倾斜</li><li>两个值时，表示x轴和y轴上的倾斜</li></ul></li><li>值类型<ul><li>deg: 旋转的角度</li><li>正数为顺时针</li><li>负数为逆时针</li></ul></li></ul><h4 id="transform设置多个值"><a href="#transform设置多个值" class="headerlink" title="transform设置多个值"></a>transform设置多个值</h4><ul><li>我们可以给transform设置<em>多个形变的函数</em></li><li>![[Pasted image 20240508203909.png]]</li><li>“+”代表可以设置一个或多个值，多个值之间以空格隔开</li><li>“#”代表可以设置一个或多个值，多个值之间以“,”隔开</li></ul><h3 id="CSS属性：transform-origin"><a href="#CSS属性：transform-origin" class="headerlink" title="CSS属性：transform-origin"></a>CSS属性：transform-origin</h3><ul><li>transform-origin：形变的原点</li><li>一个值：<ul><li>设置x轴的原点</li></ul></li><li>两个值：<ul><li>设置x轴和y轴的原点</li></ul></li><li>必须是<code>&lt;length&gt;, &lt;percentage&gt;, 或left, right, top, bottom关键字中的一个</code><ul><li>left、center、right、top、bottom关键字</li><li>length：从左上角开始计算</li><li>百分比：参考元素本身大小</li></ul></li></ul><h3 id="元素水平居中和垂直居中的方案"><a href="#元素水平居中和垂直居中的方案" class="headerlink" title="元素水平居中和垂直居中的方案"></a>元素水平居中和垂直居中的方案</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><ul><li>行内级元素：<ul><li>设置父元素的text-align：center</li></ul></li><li>块级元素：<ul><li>设置当前块级元素（需要有固定宽度）margin：0 auto</li></ul></li><li>绝对定位：<ul><li>元素有宽度情况下，left0+right0+margin: 0 auto</li></ul></li><li>flex:<ul><li>justify-content: center</li></ul></li></ul><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><ul><li>绝对定位<ul><li>元素有高度的情况下，top0+bottom0+margin: auto 0</li><li>弊端：<ul><li>必须使用定位（脱离标准流）</li><li>必须给元素设置高度</li></ul></li></ul></li><li>flex布局<ul><li>align-items：center</li><li>弊端：<ul><li>当前flex布局中所有元素都会垂直居中</li></ul></li></ul></li><li>top+translate<ul><li>先让元素向下移动父元素的50%<ul><li>&#96;position：relative</li><li><code>top：50%</code><br>  -<strong>注意</strong>：这里不能用margin-top：50%，margin-top的百分比是相对于父元素的宽度，而非高度</li></ul></li><li>再让元素向上移动自身的50%<ul><li><code>transform: translate(0, -50%)</code></li></ul></li></ul></li></ul><h3 id="transition动画"><a href="#transition动画" class="headerlink" title="transition动画"></a>transition动画</h3><h4 id="认识transition动画"><a href="#认识transition动画" class="headerlink" title="认识transition动画"></a>认识transition动画</h4><ul><li>什么是transition动画？<ul><li>CSS transition提供了一种在更改<em>css属性时</em>控制<em>动画速度的方法</em></li><li>可以让css属性变化成为一个<em>持续一段时间的过程，而不是立即生效的</em></li></ul></li><li>通常将两个状态之间的过渡称为隐式过渡</li><li>CSS transition可以决定<ul><li>哪些属性发生动画效果</li><li>何时开始（设置delay）</li><li>持续多久（设置duration）</li><li>如何动画（定义timing function，如匀速地或先快后慢）</li></ul></li></ul><h4 id="可以做动画的CSS属性"><a href="#可以做动画的CSS属性" class="headerlink" title="可以做动画的CSS属性"></a>可以做动画的CSS属性</h4><ul><li>方法一：在MDN可<em>执行动画的CSS属性</em>中查询</li><li>方法二：阅读CSS属性的文档说明<br> ![[Pasted image 20240508195925.png]]</li></ul><h4 id="过渡动画-transition"><a href="#过渡动画-transition" class="headerlink" title="过渡动画-transition"></a>过渡动画-transition</h4><ul><li>transition CSS属性是transition-property，transition-duration，transition-timing-function和transition-delay的一个简写属性</li><li><strong>transition-property</strong>：指定应用过渡性的名称<ul><li><strong>all</strong>：所有属性都执行动画</li><li><strong>none</strong>：所以属性都不执行动画</li><li><strong>CSS属性名称</strong>：要执行动画的CSS属性名称，比如width、left、transform等</li></ul></li><li><strong>transition-duration</strong>：指定动画所需的时间<ul><li>单位可以是秒(s)或毫秒（ms)</li></ul></li><li><strong>transition-timing-function</strong>：指定动画的变化曲线<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition-timing-function">transition-timing-function - CSS：层叠样式表 |MDN的 (mozilla.org)</a></li></ul></li><li><strong>transition-delay</strong>：指定过渡动画执行之前的等待时间</li><li>缺点：<ul><li><em>只能定义开始状态和结束状态</em>，不能定义中间状态</li><li><em>不能重复执行</em>，除非一再触发动画</li><li>需要在<em>特定状态下触发才能执行</em>，比如某个属性被修改了</li></ul></li></ul><h3 id="Animation动画"><a href="#Animation动画" class="headerlink" title="Animation动画"></a>Animation动画</h3><h4 id="认识Animation动画"><a href="#认识Animation动画" class="headerlink" title="认识Animation动画"></a>认识Animation动画</h4><ul><li>CSS Animation的使用分成两个步骤<ul><li><strong>步骤一</strong>：使用@keyframes定义动画序列（每一帧动画如何执行）</li><li><strong>步骤二</strong>：配置动画执行的名称、持续时间、动画曲线、延迟、执行次数、方向等</li></ul></li></ul><h4 id="Keyframes规则"><a href="#Keyframes规则" class="headerlink" title="@Keyframes规则"></a>@Keyframes规则</h4><ul><li>可以使用 @Keyframes来定义多个变化状态，并且使用animation-name来声名匹配<ul><li>关键帧使用<em>percentage</em>来指定动画发生的时间点</li><li><strong>0%</strong> 表示动画的第一时刻，<strong>100%</strong> 表示动画的最终时刻</li><li>第一时刻和最终时刻还有特殊的别名：<strong>from和to</strong><br>基本语法如下：<br><code>@Keyframes 名称 &#123;</code><br>  <code>0% &#123;</code><br>  <code>transform: translate(0, 0) scale(0.5, 0.5)</code><br>  <code>&#125;</code><br>  <code>50% &#123;</code><br>  <code>transform: translate(0, 200px) scale(1.2, 1.2)</code><br>  <code>&#125;</code><br>  <code>100% &#123;</code><br>  <code>transform: translate(400px, 0) scale(0.5, 0.5)</code><br>  <code>&#125;</code><br><code>&#125;</code></li></ul></li></ul><h4 id="animation属性"><a href="#animation属性" class="headerlink" title="animation属性"></a>animation属性</h4><ul><li>CSS animation 属性是animation-name，animation-duration，animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode和animation-play-style属性的一个简写属性形式</li><li><strong>animation-name</strong>：指定执行哪一个关键帧动画</li><li><strong>animation-duration</strong>：指定动画的持续时间</li><li><strong>animation-timing-function</strong>：指定动画的变化曲线</li><li><strong>animation-delay</strong>：指定延迟执行的时间</li><li><strong>animation-iteration-count</strong>：指定动画执行的次数，执行infinite表示无限动画</li><li><strong>animation-direction</strong>：指定方向，常用值normal和reverse</li><li><strong>animation-fill-mode</strong>：执行动画最后保留哪一个值<ul><li>none：回到没有执行动画的位置</li><li>forwards：动画最后一帧的位置</li><li>backwards：动画第一帧的位置</li></ul></li><li><strong>animation-play-state</strong>：指定动画运行或者暂停（在JS中使用，用于暂停动画）</li></ul><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><h4 id="深入理解vertical-align-line-box"><a href="#深入理解vertical-align-line-box" class="headerlink" title="深入理解vertical-align-line box"></a>深入理解vertical-align-line box</h4><ul><li>vertical-align会影响<em>行内块级元素</em>在一个<em>行盒</em>中垂直方向的位置</li><li>当一个div没有设置高度的时候：<ul><li>没有内容，没有高度</li><li>有内容，内容撑起来高度</li></ul></li><li>内容撑起来高度的本质<ul><li>内容有行高（line-height），撑起来了div的高度</li></ul></li><li>行高为什么可以撑起来div的高度<ul><li>这是因为<strong>line boxes</strong>的存在，并且line-boxes有一个特性，包裹每行的inline level</li><li>而其中的文字是有行高的，必须将整个行高包裹进去，才算包裹这个line-level<br><strong>不同情况分析</strong></li></ul></li><li>只有文字时![[Pasted image 20240508220221.png]]</li><li>有图片，有文字时![[Pasted image 20240508220246.png]]</li><li>有图片，有文字，有inline-block（比图片要大）![[Pasted image 20240508220432.png]]</li><li>有图片，有文字，有inline-block而且设置了margin-bottom![[Pasted image 20240508220529.png]]</li><li>有图片，有文字，有inline-block而且设置了margin-bottom并且有文字（当一个inline-box中有文本时，它的基线不再是底部，基线变成最后一行文本的基线）![[Pasted image 20240508220608.png]]</li></ul><h4 id="vertical-align的baseline"><a href="#vertical-align的baseline" class="headerlink" title="vertical-align的baseline"></a>vertical-align的baseline</h4><ul><li>结论：line-boxes一定会想办法包裹住当前行中所有的内容</li><li>vertical-align的默认值是baseline</li><li>baseline都是哪些<ul><li>文本的baseline是字母x的下方</li><li>line-block默认的baseline是margin-bottom的底部（如果没有，就是盒子的底部）</li><li>inline-block有文本时，baseline是最后一行文本的x的下方</li></ul></li></ul><h4 id="vertical-align的其他值"><a href="#vertical-align的其他值" class="headerlink" title="vertical-align的其他值"></a>vertical-align的其他值</h4><ul><li>不同的取值<ul><li><strong>baseline（默认值）</strong>：基线对齐</li><li><strong>top</strong>： 把行内级盒子的顶部跟line boxes顶部对齐</li><li><strong>middle</strong>：行内级盒子的中心点与父盒基线加上x-height一半的线对齐(不建议用来做图片的居中)</li><li><strong>bottom</strong>：把行内级盒子的底部跟line boxes底部对齐</li><li><strong>percentage</strong>：把行内级盒子提升或者下降一段距离（距离相对于line-height计算\元素高度），0%意味着同baseline一样</li><li><strong>length</strong>：把行内级盒子提升或者下降一段距离，0cm意味着同baseline一样</li></ul></li><li>解决图片下边缘的间隙方法<ul><li><strong>方法一</strong>：设置成top&#x2F;middle&#x2F;bottom</li><li><strong>方法二</strong>：将图片设置为block元素</li></ul></li></ul><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h3 id="CSS属性：white-space"><a href="#CSS属性：white-space" class="headerlink" title="CSS属性：white-space"></a>CSS属性：white-space</h3><ul><li>white-space用于设置空白处理和换行规则<ul><li><strong>normal</strong>：合并所有连续的空白，<strong>允许</strong>单词超屏时自动换行</li><li><strong>nowrap</strong>：合并所有连续的空白，<strong>不允许</strong>单词超屏时自动换行</li><li><strong>pre</strong>：<strong>阻止</strong>合并所有连续的空白，<strong>不允许</strong>单词超屏时自动换行</li><li><strong>pre-wrap</strong>：<strong>阻止</strong>合并所有连续的空白，<strong>允许</strong>单词超屏时自动换行</li><li><strong>pre-line</strong>：合并所有连续的空白（但保留换行），<strong>允许</strong>单词超屏时自动换行</li></ul></li></ul><h3 id="CSS属性：text-overflow"><a href="#CSS属性：text-overflow" class="headerlink" title="CSS属性：text-overflow"></a>CSS属性：text-overflow</h3><ul><li>text-overflow通常用来设置文字溢出时的行为<ul><li><strong>cilp</strong>：溢出的内容直接裁剪掉（字符可能会显示不完整）</li><li><strong>ellipsis</strong>：溢出那行的结尾处用省略号表示</li></ul></li></ul><h3 id="CSS中的函数"><a href="#CSS中的函数" class="headerlink" title="CSS中的函数"></a>CSS中的函数</h3><ul><li>CSS函数通常可以帮助我们<em>更加灵活</em>的来编写<em>样式的值</em></li><li>几个好用的CSS函数<ul><li><strong>var</strong>：使用CSS定义的变量</li><li><strong>calc</strong>：计算CSS值，通常用于计算元素的大小或位置</li><li><strong>blur</strong>：毛玻璃（高斯模糊）效果</li><li><strong>gradient</strong>：颜色渐变函数</li></ul></li></ul><h4 id="CSS函数-var"><a href="#CSS函数-var" class="headerlink" title="CSS函数 - var"></a>CSS函数 - var</h4><ul><li>CSS中可以自定义属性<ul><li><em>属性名</em>需要以<em>两个减号（–）</em> 开始</li><li><em>属性值</em>则可以是<em>任何有效的CSS值</em></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">div &#123;<br>--why-color: red;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>我们可以通过var函数来使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">span &#123;<br>color: var(--why-color);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>规则集定义的选择器，是自定义属性的可见作用域（只在选择器内部有效）<ul><li>推荐将<em>自定义属性定义在html</em>中，也可以使用 <em>:root选择器</em></li></ul></li></ul><h4 id="CSS函数-calc"><a href="#CSS函数-calc" class="headerlink" title="CSS函数 - calc"></a>CSS函数 - calc</h4><ul><li>cala()函数允许在声明CSS属性值时执行一些计算<ul><li>计算支持<em>加减乘除</em>的运算：+ 和 -运算符的<em>两边必须要有空白字符</em></li><li>通常用来<em>设置一些元素的尺寸或者位置</em></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.box.containter&#123;<br>display: inline-block;<br>/* width的百分比相对于包含块（通常是父元素） */<br>width: calc(100% - 60px);<br>height: 100px;<br>background-color: pink;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CSS函数-blur"><a href="#CSS函数-blur" class="headerlink" title="CSS函数 - blur"></a>CSS函数 - blur</h4><ul><li>blur()函数将<em>高斯模糊</em>应用于输出图片或者元素<ul><li><strong>blur(radius)</strong></li><li><strong>radius</strong>，模糊的半径，用于定义高斯函数的偏差值，偏差值越大，图片越模糊</li></ul></li><li>通常会和两个属性一起使用：<ul><li><strong>filter</strong>：将模糊或颜色偏移等图形效果应用于元素；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../pct/pic.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240513151105.png]]</p><ul><li><strong>backdrop-filter</strong>：为元素后面的区域添加模糊或者其他效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.cover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">      <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">5</span>);</span><br><span class="language-css">      <span class="hljs-attribute">backdrop-filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../pct/pic.jpeg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cover&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>![[Pasted image 20240513151848.png]]</p><h4 id="CSS函数-gradient"><a href="#CSS函数-gradient" class="headerlink" title="CSS函数 - gradient"></a>CSS函数 - gradient</h4><ul><li><code>&lt;gradient&gt;</code>是一种 <strong><code>&lt;image&gt;</code>CSS数据类型的子类型</strong>，用于表现 <strong>两种或多种颜色的过渡转变</strong><ul><li>CSS的 <em><code>&lt;image&gt;</code>数据类型</em>描述的是2D图形</li><li>比如background-image、list-style-image、border-image、content等</li><li><code>&lt;image&gt;</code>常见的方式是 <em>通过url来引入一个图片资源</em></li><li>它也可以通过CSS的<code>&lt;gradient&gt;</code>函数来设置颜色的渐变</li></ul></li><li><code>&lt;gradient&gt;</code>常见的函数实现<ul><li><strong>linear-gradient()</strong>：创建一个表示两种或多种颜色线性渐变的图片</li><li><strong>radial-gradient()</strong>：创建了一个图像，该图像是由从原点发出的两种或者多种颜色之间的逐步过渡组成</li><li><strong>repeating-linear-gradient()</strong>：创建一个由重复线性渐变组成的<code>&lt;image&gt;</code></li><li><strong>repeating-radial-gradient()</strong>：创建一个重复的原点触发渐变组成的<code>&lt;image&gt;</code></li></ul></li></ul><h5 id="linear-gradient的使用"><a href="#linear-gradient的使用" class="headerlink" title="linear-gradient的使用"></a>linear-gradient的使用</h5><ul><li>linear-gradient：创建一个表示两种或多种颜色线性渐变的图片<br>![[Pasted image 20240513154320.png]]</li><li>radial-gradient：创建了一个图像，该图像是由从原点发出的两种或者多种颜色之间的逐步过渡组成<br>![[Pasted image 20240513154427.png]]</li></ul><h3 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h3><ul><li>有时候会看到有些CSS属性名前面带有：<strong>-o-、-xv-、-ms-、-mso-、-webkit-</strong><br>![[Pasted image 20240513213207.png]]</li><li>为什么需要浏览器前缀<ul><li>CSS属性刚开始并没有成为标准，浏览器为了防止后续会修改名字给新的属性添加了浏览器前缀</li></ul></li><li>浏览器私有前缀，只有对应的浏览器才能解析使用<ul><li>-o-、-xv-：Opera等</li><li>-ms-、-mso-：IE等</li><li>-moz-：Firefox等</li><li>-webkit-：Safari、Chrome等</li></ul></li></ul><h3 id="FC-Formatting-Context"><a href="#FC-Formatting-Context" class="headerlink" title="FC-Formatting Context"></a>FC-Formatting Context</h3><ul><li>元素在标准流里面都是属于一个FC的</li><li>块级元素的布局属于Block Formatting Context（BFC）</li><li>行内级元素的布局属于Inline Formatting Context（IFC）</li></ul><h4 id="BFC-Block-Formatting-Context"><a href="#BFC-Block-Formatting-Context" class="headerlink" title="BFC-Block Formatting Context"></a>BFC-Block Formatting Context</h4><p>![[Pasted image 20240513221209.png]]</p><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>概述如下：</p><ul><li>在BFC中，box会在<em>垂直方向上一个挨着一个</em>排布</li><li><em>垂直方向的间距由margin属性决定</em></li><li>在同一个BFC中，<em>相邻两个box之间的margin会折叠</em></li><li>在BFC中，每个元素的<em>左边缘是紧挨着包含块的左边缘的</em><br>作用：</li><li>解决margin的折叠问题</li><li>解决浮动高度塌陷问题</li></ul><h4 id="BFC的作用二：解决浮动高度塌陷"><a href="#BFC的作用二：解决浮动高度塌陷" class="headerlink" title="BFC的作用二：解决浮动高度塌陷"></a>BFC的作用二：解决浮动高度塌陷</h4><ul><li>BFC解决高度塌陷需要满足两个条件<ul><li>浮动元素的父元素触发BFC，形成独立的块级格式化上下文</li><li>浮动元素的父元素的高度是auto的</li></ul></li><li>BFC的高度是auto的情况下，如下方法计算高度<ul><li>如果只有inline-level，是行高的顶部和底部的距离</li><li>如果有block-level，是由最底层的块上边缘和最底层块盒子的下边缘之间的距离</li><li>如果有绝对定位元素，将被忽略</li><li>如果有浮动元素，那么会增加高度以包括这些浮动元素的下边缘</li></ul></li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul><li>媒体查询是一种提供给开发者针对不同需求进行定制化开发的一个接口</li><li>可以根据设备的类型（比如屏幕设备、打印机设备）或者特定的特性（如屏幕的宽度）来修改页面</li><li>媒体查询的使用方式<ul><li>一：通过 <em>@media和@import</em>使用不同的CSS规则<br>![[Pasted image 20240513225836.png]]</li><li>二：使用 <em>media属性为<code>&lt;style&gt;、 &lt;link&gt;、 &lt;source&gt;</code>和其他html元素指定的媒体类型</em><br>![[Pasted image 20240513225905.png]]</li><li>三：使用Windows.matchMedia()和MediaQuerylist.addListener()方法来测试和监控媒体状态</li></ul></li><li>比较常用的是通过@media来使用不同的CSS规则，目前掌握这个即可</li></ul><h4 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h4><ul><li>在使用媒体查询时，你必须指定要使用的媒体类型<ul><li>不选则是应用all类型</li></ul></li><li>常见的媒体类型值如下<ul><li><strong>all</strong>：适用于所有设备</li><li><strong>print</strong>：适用于在打印预览模式下在屏幕上查看的分页材料和文档</li><li><strong>screen</strong>：主要用于屏幕</li><li><strong>speech</strong>：主要用于语音合成器</li></ul></li></ul><h4 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h4><ul><li>媒体特性描述了浏览器、输出设备，或是预览环境的具体特征<ul><li>通常会将媒体特性描述为一个表达式</li><li>每条媒体特性表达式都必须用括号括起来<br>![[Pasted image 20240513231454.png]]</li></ul></li></ul><h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><ul><li>媒体查询的表达式最终会获得一个Boolean值，真或者假<ul><li>结果为真，则生效</li><li>结果为假，不会生效</li></ul></li><li>如果有多个条件，可以通过逻辑操作符联合复杂的媒体查询<ul><li><strong>and</strong>：and操作符用于将多个媒体查询规则组合成单条媒体查询</li><li>not：not运算符用于否定媒体查询，如果不满足这个条件则返回true，否则返回false</li><li>only：only运算符仅在整个查询匹配时才用于应用样式</li><li>，(逗号)：<br>![[Pasted image 20240513232247.png]]</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript上</title>
      <link href="/posts/2025/04/Fronted/03-%20JavaScript%E5%9F%BA%E7%A1%80/c041c21b.html"/>
      <url>/posts/2025/04/Fronted/03-%20JavaScript%E5%9F%BA%E7%A1%80/c041c21b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="认识JavaScript"><a href="#认识JavaScript" class="headerlink" title="认识JavaScript"></a>认识JavaScript</h2><p>定义：</p><ul><li>JavaScript是一种<em>高级的、解释型的</em>编程语言 </li><li>JavaScript是<em>一门基于原型、头等函数</em>的语言，是<em>一门多范式的语言</em>，它支持<em>面向对象程序设计，指令式编程，以及函数式编程</em></li></ul><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript的组成包括<strong>ECMAScript、DOM、BOM</strong></p><ul><li><strong>ECMAScript</strong>：定义语言规范</li><li><strong>DOM</strong>：用于操作文档的API</li><li><strong>BOM</strong>：用于操作浏览器的API</li></ul><h3 id="JavaScript的基本语法"><a href="#JavaScript的基本语法" class="headerlink" title="JavaScript的基本语法"></a>JavaScript的基本语法</h3><h4 id="JavaScript编写方式"><a href="#JavaScript编写方式" class="headerlink" title="JavaScript编写方式"></a>JavaScript编写方式</h4><ul><li>第一种：HTML代码行内（不推荐）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 第一种：HTML代码行内 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;百度一下&#x27;)&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;百度一下&#x27;)&quot;</span>&gt;</span>百度一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>第二种：script标签中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 第二种：script标签中 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;google&quot;</span>&gt;</span>google一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> googleEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.google&quot;</span>)</span><br><span class="language-javascript">    googleEl.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;google一下&quot;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>第三种：外部的文件<ul><li>需要通过script元素的<strong>scr属性来引入JavaScript文件</strong></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 第三种：外部的script文件 --&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bing&quot;</span>&gt;</span>bing一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./JS/01_编写.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> bingEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.bing&quot;</span>)<br>    bingEl.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;bing一下&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="noscript元素"><a href="#noscript元素" class="headerlink" title="noscript元素"></a>noscript元素</h4><p>如果运行的浏览器不支持JavaScript，我们使用<code>&lt;noscript&gt;</code>元素来给用户更好的提示</p><ul><li>浏览器显示包含在<code>&lt;noscript&gt;</code>中内容的情况：<ul><li>浏览器不支持脚本</li><li>浏览器对脚本的支持被关闭</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>您的浏览器不支持JavaScript<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Javscript-的编写注意事项"><a href="#Javscript-的编写注意事项" class="headerlink" title="Javscript 的编写注意事项"></a>Javscript 的编写注意事项</h3><ul><li>注意一：script元素<strong>是双标签元素，不能写成单标签</strong><ul><li>在外联式引用js文件时，script标签中不可以写JavaScript代码，而且script标签不能写成单标签</li></ul></li><li>注意二：省略type属性</li><li>注意三：加载顺序<ul><li>JavaScript默认遵循HTML文档的加载顺序，即<em>自上而下的加载顺序</em></li><li>推荐将JavaScript代码和<em>编写位置放在body子元素的最后一行</em></li></ul></li><li>JavaScript代码严格区分大小写</li></ul><h3 id="JavaScript语句和分号"><a href="#JavaScript语句和分号" class="headerlink" title="JavaScript语句和分号"></a>JavaScript语句和分号</h3><ul><li>编写的每一行代码都是一个语句</li><li>通常每条语句的后面会添加一个<em>分号</em>，表示语句的结束<ul><li>存在换行符时，大多数情况下可以省略分号，JavaScript将<em>换行符理解成“隐式”的分号</em>，也被称之为 <em>自动插入分号</em></li></ul></li></ul><h3 id="JavaScript的注释"><a href="#JavaScript的注释" class="headerlink" title="JavaScript的注释"></a>JavaScript的注释</h3><ul><li>JavaScript的注释主要分为三种<ul><li>单行注释</li><li>多行注释</li><li>文档注释（VScode中需要再单独的js文件中编写才有效）<br>![[Pasted image 20240515133954.png]]![[Pasted image 20240515134002.png]]<br>注意：不支持注释的嵌套</li></ul></li></ul><h2 id="JavaScript变量和数据类型"><a href="#JavaScript变量和数据类型" class="headerlink" title="JavaScript变量和数据类型"></a>JavaScript变量和数据类型</h2><h3 id="变量的命名格式"><a href="#变量的命名格式" class="headerlink" title="变量的命名格式"></a>变量的命名格式</h3><ul><li>在JavaScript中命名一个变量包含两部分<ul><li>变量的声明：使用<strong>var关键字</strong>在JavaScript中声明一个变量</li><li>变量的赋值：使用 <strong>&#x3D;</strong> 给变量进行赋值<br>![[Pasted image 20240515143237.png]]<br>![[Pasted image 20240515143305.png]]<br>![[Pasted image 20240515143315.png]]</li></ul></li></ul><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><ul><li>变量命名规则<ul><li>第一个字符必须是*一个字母、下划线(_)或一个美元符号($)</li><li><strong>不能使用关键字和保留字命名</strong></li><li>变量<strong>严格区分大小写</strong></li></ul></li><li>变量命名规范<ul><li>多个单词使用<strong>驼峰标记</strong>（小驼峰：userName,大驼峰：UserName）</li><li>赋值 &#x3D; 两边加上一个空格</li><li>变量应该见名知意</li></ul></li></ul><h3 id="变量的注意事项"><a href="#变量的注意事项" class="headerlink" title="变量的注意事项"></a>变量的注意事项</h3><ul><li>一：如果一个变量未声明就直接使用，会报错</li><li>二：如果一个变量有声明，但是没有赋值，那么默认值是undefined</li><li>三：如果没有使用var声明变量也可以，但是不推荐（实际会被添加到Windows对象上）</li></ul><h3 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h3><ul><li>JavaScript中的<strong>值</strong>都有特定的类型<ul><li>可以将 <em>值赋值给一个变量，那么这个变量就具备了特定的类型</em></li><li>一个变量可以在前一刻是字符串，下一刻是数字</li></ul></li><li>8种基本数据类型<ul><li>**Number</li><li>**String</li><li>**Boolean</li><li>**Undefined</li><li>**Null</li><li>**Object</li><li>Biglnt</li><li>Symbol</li></ul></li></ul><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><ul><li>Number类型代表整数和浮点数</li><li>Number有很多操作符，如 乘法*、除法&#x2F;、加法+、减法-等等</li><li>特殊数值<ul><li><strong>infinity</strong>：代表无穷大</li><li><strong>NaN</strong>：代表计算错误，如字符串和一个数字相乘</li></ul></li><li>其他进制表示方法：<br>![[Pasted image 20240515194724.png]]</li><li>数字表示的范围：<ul><li><strong>最小数</strong>：Number.MIN_VALUE，这个值为：5e-324，小于这个的数字会被转化为0</li><li><strong>最大数</strong>：Number.MAX_VALUE，这个值为1.7976931348623157e+308</li><li><strong>最小整数</strong>：Number.MIN_SAFE_INTEGER，这个值为 -(2^53 - 1)</li><li><strong>最大整数</strong>：Number.MAX_SAFE_INTEGER，这个值为 (2^53 - 1)</li></ul></li><li>isNaN<ul><li>用于判断是否是一个数字，是数字返回true，不是数字返回false</li></ul></li><li>实例方法：<ul><li><strong>toString(base)</strong>：将数字转成字符串，并且按照base进制进行转化<ul><li>base的范围从2-36，默认情况是10</li><li>注意：如果是直接对一个数字操作，需要使用 .. 运算符</li></ul></li><li><strong>toFixed(digits)</strong>：格式化一个数字（格式化后生成String类型），保留digits位的小数<ul><li>digits的范围是0-20</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">//1111011</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123.</span>.<span class="hljs-title function_">toString</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">//1111011</span><br></code></pre></td></tr></table></figure><ul><li>类方法：<ul><li><strong>Number.parseInt(string[,radix])</strong>：将字符串解析成整数</li><li><strong>Number.parseFloat(string)</strong>：将字符串解析成浮点数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-string">&quot;123.321&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(num)) <span class="hljs-comment">//123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(num)) <span class="hljs-comment">//123.321</span><br></code></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul><li>JavaScript中的字符串必须被括在引号里<ul><li>双引号：”hello” </li><li>单引号：’hello’</li><li>反引号：<code>hello</code>(ES6之后学)<br>![[Pasted image 20240515195916.png]]</li></ul></li><li>前后引号类型必须一致<ul><li>如果字符串里面本身包括单引号，可以使用双引号</li><li>如果字符串里面本身包括双引号，可以使用单引号</li></ul></li><li>转义字符：<ul><li>有一些特殊功能的字符可以通过转义字符的形式放入字符串中<br>![[Pasted image 20240515200147.png]]</li></ul></li><li>字符串的几个基本使用操作：<ul><li>字符串拼接，通过+运算符![[Pasted image 20240515200348.png]]</li><li>获取字符串长度![[Pasted image 20240515200411.png]]</li></ul></li><li>访问字符串的字符<ul><li>方法一：通过字符串的索引 str[0]</li><li>方法二：通过str.charAt(pos)</li><li>区别：方法一没有找到会返回undefined，charAt没找到会返回空字符串</li></ul></li><li>字符串的遍历<ul><li>方法一：普通for循环</li><li>方法二：for .. of遍历(只有字符串和数组能这样遍历)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ms = <span class="hljs-string">&quot;Hello World&quot;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ms.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ms[i])<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> char <span class="hljs-keyword">of</span> ms) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(char)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改字符串<ul><li><strong>toLowerCase</strong>：将所有的字符转成小写</li><li><strong>toUpperCase</strong>：将所有的字符转成大写</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ms = <span class="hljs-string">&quot;Hello World&quot;</span><br><br><span class="hljs-keyword">var</span> ms1 = ms.<span class="hljs-title function_">toLowerCase</span>() <span class="hljs-comment">//hello world</span><br><span class="hljs-keyword">var</span> ms2 = ms.<span class="hljs-title function_">toUpperCase</span>() <span class="hljs-comment">// HELLO WORLD</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ms, ms1, ms2)<br></code></pre></td></tr></table></figure><ul><li>查找字符串<ul><li>方法一：**查找字符串的位置：str.indexOf(searchValue [, fromIndex])<ul><li>从fromIndex开始，查找searchValue的索引</li><li>没有找到返回-1，找到返回单词第一个字母的索引</li><li>lastIndexOf，从最后开始查找</li></ul></li><li>方法二：**是否包含字符串：str.includes(searchString [, position])<ul><li>从position位置开始查找searchString，返回true或false</li><li>ES6新增的方法</li></ul></li><li>方法三：**以xxx开头：str.startWith(searchString [, position])<ul><li>从position位置开始，判断字符串是否以searchString开头</li><li>ES6新增</li></ul></li><li>方法四：**以xxx结尾：str.endWith(searchString [, length])<ul><li>在length长度内，判断字符串是否以searchString结尾</li></ul></li><li>方法五：**替换字符串：str.replace(regexp|substr, newSubStr|function)<ul><li>查找到对应的字符串，并且使用新的字符串进行替代</li><li>也可以传入一个正则表达式来查找，也可以传入一个函数来替换</li></ul></li></ul></li><li>获取子字符串![[Pasted image 20240520155559.png]]</li><li>拼接字符串：**str.concat(str2, [, …strN])</li><li>删除首尾空格：**str.trim()</li><li>字符串分割：**str.split([separator[, limit]])<ul><li>separator：以什么字符串进行分割，也可以是一个正则表达式</li><li>limit：限制返回片段的数量<br>查看文档： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">String - JavaScript | MDN (mozilla.org)</a></li></ul></li></ul><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><ul><li>Boolean类型用于表示真假</li><li>仅包含两个值：true和false</li></ul><h4 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h4><ul><li>Undefined类型只有一个值，就是特殊值undefined<ul><li>如果声明一个变量没有对其进行初始化，则默认值就是Undefined</li></ul></li><li>两个注意事项<ul><li>最好在定义变量的时候进行初始化</li><li>不要将一个变量赋值为undefined<ul><li>如果变量刚开始什么都没有，我们可以初始化为0、空字符串、null等值</li></ul></li></ul></li></ul><h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><ul><li>Object往往可以表示<em>一组数据</em>，是其他数据的一个集合</li><li>在JavaScript中可以使用花括号{}的方式来表示一个对象![[Pasted image 20240515203651.png]]</li></ul><h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><ul><li>Null类型通常用来表示一个对象为空，常常在给一个对象进行初始化时，会赋值为null</li></ul><h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><h4 id="字符串string的转换"><a href="#字符串string的转换" class="headerlink" title="字符串string的转换"></a>字符串string的转换</h4><ul><li>方式一：隐式转换<ul><li><em>一个字符串和其他类型进行+操作</em><ul><li>如果+运算符左右两边有一个是字符串，那么另一边会自动转换成字符串类型进行拼接</li></ul></li><li><em>某些函数的执行也会自动将参数转为字符串类型</em>，比如consloe.log函数</li></ul></li><li>方式二：显示转换<ul><li>调用String()函数</li><li>调用toString()方法</li></ul></li></ul><h4 id="Number的转换"><a href="#Number的转换" class="headerlink" title="Number的转换"></a>Number的转换</h4><ul><li>方式一：隐式转换<ul><li>在算术运算中，通常会将其他类型转换成数字类型来进行运算<ul><li>比如 ”6“ &#x2F; ”2“</li><li>但是如果是+运算，并且其中一边是字符串，那么还是按照字符串来连接</li></ul></li></ul></li><li>方式二：显示转换<ul><li>调用Number()函数</li></ul></li><li>其他类型转换数字规则![[Pasted image 20240515210345.png]]</li></ul><h4 id="Boolean的转换"><a href="#Boolean的转换" class="headerlink" title="Boolean的转换"></a>Boolean的转换</h4><ul><li>发生在 <em>逻辑运算</em>中，也可以通过调用Boolean()显示地进行转换</li><li>转换规则：<ul><li>直观上为空的值（0、空字符串、null、undefined和NaN）将变为false</li><li>其他值变为true![[Pasted image 20240515210631.png]]</li><li>注意：包含0的字符串“0”是true</li></ul></li></ul><h3 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h3><ul><li><em>typeof操作符</em>用来 <em>确定任意变量的数据类型</em></li><li>返回值：<ul><li>undifined表示值未定义</li><li>bollean表示值为布尔值</li><li>string表示值为字符串</li><li>number表示值为数值</li><li>object表示值为对象或null</li><li>function表示值为函数</li><li>symbol表示值为符号</li></ul></li><li>typeof():<ul><li><em>typeof(x)与 typeof x</em> 相同，<em>()</em> 只是将后续内容当做一个整体</li></ul></li></ul><h2 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h2><ul><li>已经接触的函数<ul><li>alert函数：浏览器弹出一个弹窗 </li><li>prompt函数：在浏览器弹窗中接收用户的输入</li><li>console.log函数：在控制台输入内容</li></ul></li><li>声明函数使用<strong>function</strong>关键字<br><code>function 函数名() &#123;</code><br>  <code>代码</code><br><code>&#125;</code></li><li>arguments参数<ul><li>默认情况下， <em>arguments对象</em>是所有（非箭头）函数中都可以用的 <em>局部变量</em></li><li>该对象中存放着所有的 <em>调用者传入的参数，从0位置开始，依次存放</em></li><li>arguments变量的类型是一个 <em>object类型，而非一个数组</em></li><li>如果调用者传入的参数多于函数接收的参数，可以通过arguments去获取所有的参数</li></ul></li><li>函数表达式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var foo = function () &#123;<br>console.log(&quot;foo函数&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意：function关键字后面没有函数名</li><li>函数都是一个值（值的类型是一个对象）</li></ul><h3 id="JavaScript头等函数"><a href="#JavaScript头等函数" class="headerlink" title="JavaScript头等函数"></a>JavaScript头等函数</h3><ul><li>头等函数是指在程序设计语言中，函数被当作头等公民<ul><li>这意味着函数可以 <em>作为别的函数的参数、函数的返回值、赋值给变量或存储在数据结构中</em></li></ul></li><li>例如：函数可以在变量和变量之间相互进行赋值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">function foo() &#123;<br>console.log(&quot;foo函数执行&quot;)<br>&#125;<br><br>var bar = foo<br>bar()<br></code></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><ul><li>函数可以传递给另一个函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">fn</span>) &#123;<br><span class="hljs-title function_">fn</span>()<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是bar函数被调用&quot;</span>)<br>&#125;<br><span class="hljs-title function_">foo</span>(bar)<br></code></pre></td></tr></table></figure><ul><li>回调函数的案例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">url, callback</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;根据URL向服务器发送网络请求&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;需要花费比较长的时间拿到对应的结果&quot;</span>)<br><span class="hljs-keyword">var</span> list = [<span class="hljs-string">&quot;javascript&quot;</span>, <span class="hljs-string">&quot;javascript学习&quot;</span>, <span class="hljs-string">&quot;javascript高级编程&quot;</span>]<br><span class="hljs-title function_">callback</span>(list)<br>&#125;<br><br><span class="hljs-title function_">request</span>(<span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;拿到结果:&quot;</span>, res)<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>高阶函数：<ul><li>接受 <em>一个或多个函数</em>作为输入</li><li><em>输出一个函数</em></li></ul></li><li>匿名函数：<ul><li>在传入一个函数时，我们没有指定这个函数的名词或者通过函数表达式指定函数对应的变量</li></ul></li></ul><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><ul><li><em>一个函数定义完后被立即执行</em><ul><li>第一部分：定义一个匿名函数，这个函数有自己独立的作用域</li><li>第二部分：后面的 <strong>()</strong> 表示这个函数被执行了</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//常用写法(只掌握这个写法)</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;立即执行函数&quot;</span>)<br>&#125;)()<br><br><span class="hljs-comment">//匿名写法</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;立即执行函数&quot;</span>)<br>&#125;());<br></code></pre></td></tr></table></figure><ul><li>作用：会创建一个独立的执行上下文环境，避免外界访问或修改内部的变量</li><li>应用场景一：避免变量命名重复造成内容被覆盖</li><li>应用场景二：点击按钮显示点击的第几个按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>按钮4<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">// 获取所有的按钮监听</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> btnEls = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.btn&quot;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; btnEls.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> btn = btnEls[i];</span><br><span class="language-javascript">      (<span class="hljs-keyword">function</span>(<span class="hljs-params">m</span>) &#123;</span><br><span class="language-javascript">        btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`按钮<span class="hljs-subst">$&#123;m + <span class="hljs-number">1</span>&#125;</span>发生了点击`</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;)(i)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="JavaScript的面向对象"><a href="#JavaScript的面向对象" class="headerlink" title="JavaScript的面向对象"></a>JavaScript的面向对象</h2><ul><li>对象类型是一种 <em>存储键值对（key-value）</em> 的更加复杂的数据类型</li><li>对象类型可以 <em>使用{…}</em> 来创建，里面包含的是键值对</li><li><em>键值对</em> 可以是 <em>属性和方法</em></li><li>其中 <em>key是字符串</em>， <em>value可以是任意类型</em>， 包括基本数据类型、函数类型、对象类型等</li></ul><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li>创建方式：<ul><li><strong>对象字面量</strong>：通过{}</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> info = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jojo&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br><span class="hljs-attr">girfriend</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小羊&quot;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;,<br>running <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;running~&quot;</span>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>-  **new Object+动态添加属性**- **new 其他类**</code></pre><ul><li><p>属性之间以 <em>逗号分割</em></p></li><li><p>使用过程的操作：</p><ul><li>访问对象的属性![[Pasted image 20240517224021.png]]</li><li>修改对象的属性![[Pasted image 20240517224030.png]]</li><li>添加对象的属性![[Pasted image 20240517224039.png]]</li><li>删除对象的属性：delete![[Pasted image 20240517224050.png]]</li></ul></li><li><p>方括号</p><ul><li>出现JavaScript无法理解的属性时，我们需要使用方括号![[Pasted image 20240517224435.png]]</li></ul></li></ul><h3 id="对象的遍历"><a href="#对象的遍历" class="headerlink" title="对象的遍历"></a>对象的遍历</h3><ul><li><strong>Objectkey()</strong> 方法会返回一个由一个给定对象的自身可枚举属性组成的数组</li><li>遍历方式一：普通for循环![[Pasted image 20240517230541.png]]</li><li>遍历方式二：for in循环![[Pasted image 20240517230606.png]]</li></ul><h3 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h3><ul><li><strong>原始类型</strong>占据的空间是在<strong>栈内存</strong>中分配的</li><li><strong>对象类型</strong>占据的空间是在<strong>堆内存</strong>中分配的</li><li>原始类型在变量中保存的是值本身</li><li>对象类型在变量中保存的是对象的”引用“![[Pasted image 20240518155438.png]]<br>5个现象：</li><li>现象一：两个对象的比较</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;&#125;<br><span class="hljs-keyword">var</span> obj2 = &#123;&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1 === obj2)<br><span class="hljs-comment">//答案为false</span><br></code></pre></td></tr></table></figure><ul><li>现象二：引用的赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> info = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;why&quot;</span>,<br><span class="hljs-attr">friend</span>: &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;kobe&quot;</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> friend = info.<span class="hljs-property">friend</span><br>friend.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;james&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">friend</span>.<span class="hljs-property">name</span>)<br><span class="hljs-comment">//答案为James</span><br></code></pre></td></tr></table></figure><ul><li>现象三：值传递</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123;<br>a = <span class="hljs-number">200</span><br>&#125;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">100</span><br><span class="hljs-title function_">foo</span>(num)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br><span class="hljs-comment">//答案为100</span><br></code></pre></td></tr></table></figure><ul><li>现象四：引用传递，但是在函数中创建了一个新对象，没有对传入对象进行修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123;<br>a = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;why&quot;</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;obj&quot;</span><br>&#125;<br><span class="hljs-title function_">foo</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br><span class="hljs-comment">//答案为name: &quot;obj&quot;</span><br></code></pre></td></tr></table></figure><ul><li>现象五：引用传递，但是对传入的对象进行修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a</span>) &#123;<br>a.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;why&quot;</span><br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;obj&quot;</span><br>&#125;<br><span class="hljs-title function_">foo</span>(obj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj)<br><span class="hljs-comment">//答案为name: &quot;why&quot;</span><br></code></pre></td></tr></table></figure><h3 id="this变量"><a href="#this变量" class="headerlink" title="this变量"></a>this变量</h3><ul><li>this指向Windows</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)   <span class="hljs-comment">//Window</span><br>&#125;<br><span class="hljs-title function_">fn</span>();<br></code></pre></td></tr></table></figure><ul><li>this指向调用的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zy&#x27;</span>,<br>    <span class="hljs-attr">sayHi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>&#125;<br>obj.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">//obj   &#123;name: &quot;zy&quot;, sayHi: ƒ&#125;</span><br></code></pre></td></tr></table></figure><h3 id="创建一系列对象"><a href="#创建一系列对象" class="headerlink" title="创建一系列对象"></a>创建一系列对象</h3><ul><li>方法一：工厂函数<ul><li><em>封装一个函数</em>，在这个函数中创建一个对象，再重复调用这个函数</li><li>对象是Object类型</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createstudent</span>(<span class="hljs-params">name, age, height, address</span>) &#123;<br><span class="hljs-keyword">var</span> stu = &#123;&#125;<br>stu.<span class="hljs-property">name</span> = name<br>stu.<span class="hljs-property">age</span> = age<br>stu.<span class="hljs-property">height</span> = height<br>stu.<span class="hljs-property">address</span> = address<br><br>stu.<span class="hljs-property">eating</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stu.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在吃东西&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> stu<br>&#125;<br><br><span class="hljs-keyword">var</span> stu1 = <span class="hljs-title function_">creat</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-number">1.66</span>, <span class="hljs-string">&quot;四川省&quot;</span>)<br><span class="hljs-keyword">var</span> stu2 = <span class="hljs-title function_">creat</span>(<span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1.80</span>, <span class="hljs-string">&quot;四川省&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>方法二：<strong>构造函数</strong><ul><li>也称之为 <em>构造器</em>，通常是我们在<em>创建对象时会去调用的函数</em></li><li>JavaScript中的 <em>构造函数扮演了其他语言中类的角色</em></li><li>也是一个 <em>普通函数，如果被new操作符来调用了，那么这个函数就是一个构造函数</em></li><li>如果一个函数被使用new操作符来调用了，会执行以下操作<ul><li>在内存中创建一个新的对象（空对象）</li><li>这个对象内部的[[prototype]]属性会被赋值为该构造函数的prototype属性</li><li>构造函数内部的this，会指向创建出来的新对象</li><li>执行函数的内部代码</li><li>如果构造函数没有返回非空对象，则返回创建出来的新对象</li></ul></li><li>对象是构造的函数类型</li><li>名称：使用大驼峰</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Student</span>(<span class="hljs-params">name, age, height</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> = height<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">eating</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;在吃东西&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> stu1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1.80</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="全局对象-window"><a href="#全局对象-window" class="headerlink" title="全局对象-window"></a>全局对象-window</h3><p>作用：</p><ul><li>查找变量时，最终会找到window头上</li><li>将一些浏览器全局提供给我们的变量&#x2F;函数&#x2F;对象，放在window对象上面</li><li>使用var定义的变量会被默认添加到window上面</li></ul><h2 id="JavaScript常见内置类"><a href="#JavaScript常见内置类" class="headerlink" title="JavaScript常见内置类"></a>JavaScript常见内置类</h2><h3 id="原始类型的包装类"><a href="#原始类型的包装类" class="headerlink" title="原始类型的包装类"></a>原始类型的包装类</h3><ul><li>JavaScript的原始类型 <em>并非对象类型</em>，JavaScript为了可以 <em>使其获得属性和调用方法，对其封装了对应的包装类型</em></li><li><strong>常见的包装类型</strong>：String、Number、Boolean、Symbol、Biglnt类型</li><li>我们也可以自己创建一个包装类的对象（但没必要）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name1 = <span class="hljs-string">&quot;why&quot;</span><br><span class="hljs-keyword">var</span> name2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;why&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> name1) <span class="hljs-comment">//string</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> name2) <span class="hljs-comment">//object</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name1 === name2) <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><ul><li>注意事项：null、undefined没有任何方法，也没有对应的“对象包装类”</li></ul><h3 id="Math对象的使用"><a href="#Math对象的使用" class="headerlink" title="Math对象的使用"></a>Math对象的使用</h3><p>是一个 <em>内置对象</em>（不是一个构造函数）</p><ul><li>Math常见的属性：<ul><li>Math.PI：圆周率</li></ul></li><li>Math常见的方法：<ul><li><strong>Math.floor</strong>：向下取整</li><li><strong>Math.ceil</strong>：向上取整</li><li><strong>Math.round</strong>：四舍五入取整</li><li><strong>Math.random</strong>：生成[0, 1) 的随机数</li><li><strong>Math.pow</strong>：返回x的y次幂</li></ul></li><li>查看文档： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">数学 - JavaScript |MDN的 (mozilla.org)</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">3.14</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(num)) <span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(num)) <span class="hljs-comment">//4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(num)) <span class="hljs-comment">//3</span><br><span class="hljs-comment">// 生成5~50随机数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">45</span>) + <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h3><ul><li>一种有序的集合，可以通过索引来获取</li><li>创建数组的方式<ul><li>方法一：![[Pasted image 20240520194120.png]]</li><li>方法二：![[Pasted image 20240520194244.png]]</li><li>在创建数组时，设置数组长度![[Pasted image 20240520194333.png]]</li><li>数组元素从0开始编号</li></ul></li></ul><h4 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h4><ul><li><em>访问</em>数组中的元素<ul><li>通过中括号[]访问</li><li>arr.at(i):<ul><li>如果i &gt;&#x3D; 0，则与arr[i]完全相同</li><li>如果i为负数，则会从数组的尾部向前数</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = [<span class="hljs-number">123</span>, <span class="hljs-number">234</span>, <span class="hljs-number">345</span>, <span class="hljs-number">456</span>]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num[<span class="hljs-number">0</span>]) <span class="hljs-comment">//123</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>)) <span class="hljs-comment">//123</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num[-<span class="hljs-number">1</span>]) <span class="hljs-comment">//undifined</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">at</span>(-<span class="hljs-number">1</span>)) <span class="hljs-comment">//456</span><br><br>    <span class="hljs-comment">// 修改</span><br>    num[<span class="hljs-number">0</span>] = <span class="hljs-number">132</span><br></code></pre></td></tr></table></figure><ul><li>添加、删除元素<ul><li>在数组的尾端添加或者删除元素<ul><li><strong>push</strong>在末端添加元素</li><li><strong>pop</strong>在末端取出一个元素</li></ul></li><li>在数组的首段添加或者删除元素（运行速度比尾端的添加、删除操作慢）<ul><li><strong>shift</strong>取出首段的一个元素，整个数组向前移动</li><li><strong>unshift</strong>在首段添加元素，整个数组向后移动</li></ul></li><li>在中间某个位置添加或者删除<ul><li><strong>arr.splice方法</strong>可以做所有事情（添加、删除和替换）</li><li>语法结构：<code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code><ul><li>从 <em>start</em>位置开始，处理数组中的元素</li><li><em>deleteCount</em>：要删除的元素个数，如果为0或者负数表示不删除</li><li><em>item1，item2，…</em>：在添加元素时，需要添加的元素</li></ul></li><li>注意：这个方法会修改原数组</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = [<span class="hljs-number">123</span>, <span class="hljs-number">234</span>, <span class="hljs-number">345</span>, <span class="hljs-number">456</span>]<br><br>    <span class="hljs-comment">// 尾插</span><br>    num.<span class="hljs-title function_">push</span>(<span class="hljs-number">567</span>, <span class="hljs-number">678</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 123, 234, 345, 456, 567, 678</span><br><br>    <span class="hljs-comment">// 尾删</span><br>    num.<span class="hljs-title function_">pop</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 123, 234, 345, 456, 567</span><br><br>    <span class="hljs-comment">// 头插</span><br>    num.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">980</span>, <span class="hljs-number">789</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 980, 789, 123, 234, 345, 456, 567</span><br><br>    <span class="hljs-comment">// 头删</span><br>    num.<span class="hljs-title function_">shift</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 789, 123, 234, 345, 456, 567</span><br><br>    <span class="hljs-comment">// 中间删</span><br>    num.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 从索引为1开始，删除2个元素</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 789, 345, 456, 567</span><br><br>    <span class="hljs-comment">// 中间添加</span><br>    num.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">205</span>, <span class="hljs-number">427</span>) <span class="hljs-comment">// 在索引为1的前面，添加元素</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 789, 205, 427, 345, 456, 567</span><br><br>    <span class="hljs-comment">// 中间即删除又添加（即替换元素）</span><br>    num.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">654</span>) <span class="hljs-comment">// 从引为1开始，删除2个元素, 再添加元素</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num) <span class="hljs-comment">// 789, 654, 345, 456, 567</span><br></code></pre></td></tr></table></figure><ul><li><p>length属性</p><ul><li><em>length属性</em>用于获取数组的长度<ul><li>当我们修改数组的时候，length属性会自动更新</li></ul></li><li>length属性是可写的<ul><li><em>手动增加一个大于默认length的数值</em>，那么会增加数组的长度</li><li>减少它，数组就会被截断</li><li><em>清空数组最简单的方法</em>：arr.length &#x3D; 0</li></ul></li></ul></li><li><p>数组的遍历</p><ul><li>普通for循环遍历</li><li>for..in遍历，获取到索引值</li><li>for..of遍历，获取到每一个元素</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = [<span class="hljs-number">123</span>, <span class="hljs-number">234</span>, <span class="hljs-number">345</span>, <span class="hljs-number">456</span>]<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; num.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num[i])<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> index <span class="hljs-keyword">in</span> num) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index, num[index])<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> item <span class="hljs-keyword">of</span> num) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>数组方法 - slice、cancat、jojin<ul><li><strong>arr.slice</strong>：用于对数组进行截取 ，返回一个新的数组，不会对原数组进行操作<ul><li><code>arr.slice([begin[, end]])</code></li><li>包含begin元素不包含end元素</li></ul></li><li><strong>arr.cancat</strong>：创建一个新数组，其中包含来自其他数组和其他项的值<ul><li><code>var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</code></li></ul></li><li><strong>arr.join</strong>：将一个数组的所有元素链接成一个字符串并返回<ul><li><code>arr.join([separator])</code></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = [<span class="hljs-number">123</span>, <span class="hljs-number">234</span>, <span class="hljs-number">345</span>, <span class="hljs-number">456</span>]<br><br>    <span class="hljs-keyword">var</span> num1 = num.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num1) <span class="hljs-comment">// 234、345</span><br><br>    <span class="hljs-keyword">var</span> num2 = [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]<br><br>    <span class="hljs-keyword">var</span> num3 = num.<span class="hljs-title function_">concat</span>(num2)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num3) <span class="hljs-comment">// 123, 234, 345, 456, 12, 13, 14</span><br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-comment">//123234345456(字符串)</span><br><br></code></pre></td></tr></table></figure><ul><li>查找元素<ul><li><strong>arr.indexOf方法</strong>：查找某个元素的索引<ul><li><code>arr.indexOf(searchElement[, fromIndex])</code></li><li>从fromIndex开始查找，如果找到返回对应的索引，没有找到返回-1</li><li>还有对应的从最后位置开始查找的lastIndexOf</li></ul></li><li><strong>arr.includes方法</strong>：判断数组是否包含某个元素<ul><li><code>arr.includes(valueToFind[, fromIndex])</code></li><li>从索引from开始搜索item，如果找到返回true</li></ul></li><li><strong>forEach</strong>：遍历整个数组<ul><li><code>array.forEach(function(currentValue, index, arr), thisValue)</code></li><li>function(currentValue, index, arr): 必需。对数组中每个元素要执行的函数。该函数有以下三个参数:<ul><li>currentValue: 必需。当前元素的值。</li><li>index: 可选。当前元素的索引值。</li><li>arr: 可选。当前元素所属的数组对象。</li></ul></li><li>thisValue: 可选。传递给函数的值，用于 this 关键词。</li><li><code>forEach()</code> 方法<em>没有返回值</em>,它只是对数组中的每个元素执行指定的操作。</li></ul></li><li><strong>find</strong>：直接查找元素<ul><li><code>array.find(function(currentValue, index, arr), thisValue)</code></li><li><code>function</code>: 一个回调函数,用于测试数组的每个元素。</li><li><code>currentValue</code>: 数组中正在处理的当前元素。</li><li><code>index</code>(可选): 数组中正在处理的当前元素的索引。</li><li><code>arr</code>(可选): 正在使用 <code>find()</code> 方法的数组本身。</li><li><code>thisValue</code>(可选): 可以用来设置回调函数中的 <code>this</code> 值。</li><li> 如果在数组中找到满足条件的<em>第一个元素</em>,则返回该元素的值;否则返回 <code>undefined</code></li></ul></li><li><strong>findIndex</strong>：直接查找索引（用法与find类似）<ul><li><code>array.findIndex(function(currentValue, index, arr), thisValue)</code></li><li> 如果在数组中找到满足条件的第一个元素,则返回该元素的索引;否则返回 <code>-1</code>。</li></ul></li></ul></li><li>排序<ul><li><strong>sort</strong>：对数组进行排序，并且生成一个排序后的新数组<ul><li><code>arr.sort([compareFunction])</code></li><li>compareFunction(a, b)&lt;0, a排在b前面</li><li>compareFunction(a, b)&gt;0, a排在b后面</li></ul></li><li><strong>reverse</strong>：将数组中的元素进行倒置，并且返回该数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> students = [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">var</span> newStus = students.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">items1, items2</span>) &#123;<br><span class="hljs-keyword">return</span> items1 - items2 <span class="hljs-comment">//升序 1, 3, 6, 7</span><br><span class="hljs-comment">// return items2 - items1 降序 7， 6， 3， 1</span><br>&#125;)<br><span class="hljs-keyword">var</span> newStus = students.<span class="hljs-title function_">reverse</span>() <span class="hljs-comment">// 7, 1, 6, 3</span><br></code></pre></td></tr></table></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><ul><li>创建Date对象<ul><li><em>Date的构造函数</em><ul><li>new Date()</li><li>new Date(value) (传入时间戳)</li><li>new Data(dataString)</li><li>new Data(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]])</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-comment">//当前时间</span><br>   <span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1000</span>) <span class="hljs-comment">//传入毫秒数，表示从1970-01-01 00:00:00 UTC 经过的毫秒数</span><br>   <span class="hljs-keyword">var</span> date3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2024-5-27&quot;</span>)<br>   <span class="hljs-keyword">var</span> date4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">2024</span>, <span class="hljs-number">05</span>, <span class="hljs-number">27</span>, <span class="hljs-number">21</span>, <span class="hljs-number">42</span>, <span class="hljs-number">00</span>,<span class="hljs-number">000</span>) <span class="hljs-comment">//年月日时分秒毫秒</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date4)<br></code></pre></td></tr></table></figure><p>![[Pasted image 20240527214831.png]]</p><ul><li>dateString时间的表达方式<ul><li>日期有两种表达方式：RFC 2822标准（默认打印时间格式）和 ISO 8601标准</li><li>转成ISO 8601标准：<code>data.toISOString()</code><ul><li>YYYY：年份，0000~9999</li><li>MM：月份，01~12</li><li>DD：日，01~31</li><li>T：分隔时间和日期，无特殊含义</li><li>HH：小时，00~24</li><li>mm：分钟，00~59</li><li>ss：秒，00~59</li><li>.sss：毫秒</li><li>Z：时区</li></ul></li></ul></li><li>从Data获取信息<ul><li><strong>getFullYear()</strong>：获取年份（4位数）</li><li><strong>getMonth()</strong>：获取月份，从0~11</li><li><strong>getDate()</strong>：获取当月的具体日期，从1~31</li><li><strong>getHours()</strong>：获取小时</li><li><strong>getMinutes()</strong>：获取分钟</li><li><strong>getSeconds()</strong>：获取秒钟</li><li><strong>getMilliseconds()</strong>：获取毫秒</li><li><strong>getDat()</strong>：一周中的第几天（周日是0开始）</li></ul></li><li>Data设置信息的方法<ul><li>**setFullYear(year, [month], [date])</li><li>**setMonth(month, [date])</li><li>**setDate(date)</li><li>**setHours(hour, [min], [sec], [ms])</li><li>**setMinutes(min, [sec], [ms])</li><li>**setSeconds(sec, [ms])</li><li>**setMilliseconds(ms)</li><li><strong>setTime(milliseconds)</strong></li></ul></li><li>Date获取Unix时间戳<ul><li><strong>Unix时间戳</strong>：是一个整数值，表示从1970年1月1日00:00:00 UTC以来的毫秒数</li><li>获取时间戳：<ul><li>new Date.getTime()</li><li>new Date.valueOf()</li><li>+new Date()</li><li>Date.now()</li></ul></li><li>可以用时间戳来测试代码的性能</li></ul></li><li>Date.parse方法<ul><li>Date.parse(str)方法可以从一个字符串中读取日期，并且输出对应的Unix时间戳</li><li>作用等同于 new Date(dateString).getTime()操作</li><li>需要符合RFC2822或ISO 8601日期格式的字符串</li><li>如果输入的格式不能被解析，会返回NaN</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-comment">//当前时间</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">toISOString</span>())<br>   <span class="hljs-comment">// 获取时间信息</span><br>   <span class="hljs-keyword">var</span> year = date.<span class="hljs-title function_">getFullYear</span>()<br>   <span class="hljs-keyword">var</span> month = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span><br>   <span class="hljs-keyword">var</span> day = date.<span class="hljs-title function_">getDate</span>()<br>   <span class="hljs-keyword">var</span> hour = date.<span class="hljs-title function_">getHours</span>()<br>   <span class="hljs-keyword">var</span> minute = date.<span class="hljs-title function_">getMinutes</span>()<br>   <span class="hljs-keyword">var</span> second = date.<span class="hljs-title function_">getSeconds</span>()<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(year, month, day, hour, minute, second)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;year&#125;</span>/<span class="hljs-subst">$&#123;month&#125;</span>/<span class="hljs-subst">$&#123;day&#125;</span> <span class="hljs-subst">$&#123;hour&#125;</span>:<span class="hljs-subst">$&#123;minute&#125;</span>:<span class="hljs-subst">$&#123;second&#125;</span>`</span>)<br><br>   <span class="hljs-comment">// 给date设置时间</span><br>   date.<span class="hljs-title function_">setFullYear</span>(<span class="hljs-number">2044</span>)<br>   <span class="hljs-comment">//自动校验</span><br>   date.<span class="hljs-title function_">setDate</span>(<span class="hljs-number">32</span>)<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date)<br><br>   <span class="hljs-keyword">var</span> startTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>   &#125;<br>   <span class="hljs-keyword">var</span> endTime = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(endTime - startTime)<br></code></pre></td></tr></table></figure><p>![[Pasted image 20240528205053.png]]<br>![[Pasted image 20240528210927.png]]</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript下</title>
      <link href="/posts/2025/04/Fronted/04-%20JavaScript%E9%AB%98%E7%BA%A7/b746f28d.html"/>
      <url>/posts/2025/04/Fronted/04-%20JavaScript%E9%AB%98%E7%BA%A7/b746f28d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><h2 id="this的绑定规则"><a href="#this的绑定规则" class="headerlink" title="this的绑定规则"></a>this的绑定规则</h2><h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3><ul><li>在函数调用的时候，JavaScript会 <em>默认给this绑定一个值</em></li><li>this的 <em>绑定和定义的位置（即编写的位置）</em> 没有关系</li><li>this的 <em>绑定和调用方式以及调用的位置有关系</em></li><li>this <em>是在运行时才被绑定的</em></li></ul><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><ul><li>独立的调用函数this指向window，但在严格模式下独立调用的函数中的this指向的是Undefined(“use strict”)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 默认绑定</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 1.案例一</span></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">      &#125; </span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">foo</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 2.案例二</span></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">test2</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">test3</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">test3</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-title function_">test1</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 3.案例三</span></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">project</span>(<span class="hljs-params">func</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">func</span>()</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jojo&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">bar</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-title function_">project</span>(obj.<span class="hljs-property">bar</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">//这里的this绑定到obj对象</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">bar</span>: foo</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    obj.<span class="hljs-title function_">bar</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><ul><li>执行的操作<ul><li>创建一个全新的对象</li><li>这个新对象会被执行prototype连接</li><li>这个新对象会绑定到函数调用的this上</li><li>如果函数没有返回其他对象，表达式会返回这个新对象</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); </span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;why&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title function_">foo</span>() <span class="hljs-comment">//this绑定foo</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h3><p>call：<code>func.call(thisArg, arg1, arg2, ...)</code><br>apply：<code>func.apply(thisArg, [arg1, arg2, ...]</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;why&quot;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">name, age</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    foo.<span class="hljs-title function_">call</span>(obj, <span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>) <span class="hljs-comment">//执行函数，并且强制this指向obj</span></span><br><span class="language-javascript">    foo.<span class="hljs-title function_">apply</span>(obj, [<span class="hljs-string">&quot;小羊&quot;</span>, <span class="hljs-number">19</span>])</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>bind</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">name, age</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Tom&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> bar = foo.<span class="hljs-title function_">bind</span>(obj, <span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>)</span><br><span class="language-javascript">    <span class="hljs-title function_">bar</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="绑定优先级"><a href="#绑定优先级" class="headerlink" title="绑定优先级"></a>绑定优先级</h3><p>显式 &gt; 隐式<br>new &gt; 隐式<br>new &gt;  bind</p><h3 id="this面试题"><a href="#this面试题" class="headerlink" title="this面试题"></a>this面试题</h3><h4 id="一"><a href="#一" class="headerlink" title="一"></a>一</h4><p>![[Pasted image 20240727141059.png]]</p><h4 id="二"><a href="#二" class="headerlink" title="二"></a>二</h4><p>![[Pasted image 20240727191000.png]]</p><h4 id="三"><a href="#三" class="headerlink" title="三"></a>三</h4><p>![[Pasted image 20240727211810.png]]</p><p>![[Pasted image 20240727211824.png]]</p><h4 id="四"><a href="#四" class="headerlink" title="四"></a>四</h4><p>![[Pasted image 20240727220053.png]]</p><h3 id="手写call、apply、bind函数"><a href="#手写call、apply、bind函数" class="headerlink" title="手写call、apply、bind函数"></a>手写call、apply、bind函数</h3><p>day36</p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li>箭头函数 <em>不会绑定this、arguments属性</em>， 没有显示原型，不能和new一起使用</li><li><code>nums.forEach((item, index, arr) =&gt; &#123; &#125;)</code></li><li>优化：<ul><li>如果只有一个参数，( )可以省略![[Pasted image 20240725150801.png]]</li><li>如果执行体只有一行代码，可以省略大括号，并且会返回这行代码的返回值![[Pasted image 20240725150853.png]]</li><li>如果执行体只返回一个对象，需要给对象加上( )![[Pasted image 20240725150934.png]]</li></ul></li></ul><h1 id="深入浏览器的渲染原理"><a href="#深入浏览器的渲染原理" class="headerlink" title="深入浏览器的渲染原理"></a>深入浏览器的渲染原理</h1><h2 id="网页被解析的过程"><a href="#网页被解析的过程" class="headerlink" title="网页被解析的过程"></a>网页被解析的过程</h2><p>![[Pasted image 20240801121708.png]]</p><h2 id="浏览器的内核"><a href="#浏览器的内核" class="headerlink" title="浏览器的内核"></a>浏览器的内核</h2><ul><li>常见的浏览器内核![[Pasted image 20240801123558.png]]</li><li>浏览器内核也称作浏览器排版引擎</li></ul><h2 id="渲染页面的详细流程"><a href="#渲染页面的详细流程" class="headerlink" title="渲染页面的详细流程"></a>渲染页面的详细流程</h2><p>![[Pasted image 20240801123756.png]]<br>解析HTML生成 DOM Tree ，遇到css文件时，解析CSS生成 Style Rules，这两者的解析过程不产生冲突。DOM Tree 和 Style Rules生成 Render Tree（渲染树，渲染树中没有节点的位置），再通过 Layout进行布局，然后进行绘画和展示</p><h3 id="HTML解析过程"><a href="#HTML解析过程" class="headerlink" title="HTML解析过程"></a>HTML解析过程</h3><ul><li>解析HTML是所有步骤的开始（服务器给浏览器默认返回  .html 文件）</li><li>解析HTML构建 DOM Tree![[Pasted image 20240801124525.png]]</li></ul><h3 id="生成CSS规则"><a href="#生成CSS规则" class="headerlink" title="生成CSS规则"></a>生成CSS规则</h3><ul><li>解析过程中，遇到CSS的 link元素，浏览器会下载对应的CSS文件（下载CSS文件不会影响DOM解析）</li><li>下载完CSS文件，会对CSS文件进行解析，得到对应的 Style Rules（规则树， 也可以称之为CSSOM，CSS对象模型）![[Pasted image 20240801124907.png]]</li></ul><h3 id="构建Render-Tree"><a href="#构建Render-Tree" class="headerlink" title="构建Render Tree"></a>构建Render Tree</h3><ul><li>DOM Tree 和 CSSOM Tree 结合构建 <strong>Render Tree</strong>![[Pasted image 20240801125031.png]]</li><li><em>link元素不会阻碍DOM Tree 的构建过程，但会阻碍 Render Tree 的构建过程</em>，因为在构建Render Tree时，需要对应的CSSOM Tree</li><li><em>Render Tree 和 DOM Tree 并不是一一对应的关系</em>， display为none的元素，不会出现在Render Tree中</li></ul><h3 id="布局（Layout）和绘制（paint）"><a href="#布局（Layout）和绘制（paint）" class="headerlink" title="布局（Layout）和绘制（paint）"></a>布局（Layout）和绘制（paint）</h3><ul><li>在Render Tree上运行 <em>布局</em> 来计算每个节点的几何体<ul><li>Render Tree会显示节点及其他样式，但不显示 <em>每个节点的尺寸、位置</em>等信息</li><li>布局可以确定呈现树中 <em>所有节点的宽度、高度和位置信息</em></li></ul></li><li>将每个节点绘制到屏幕上<ul><li>绘制时，浏览器将布局的每个frame转为屏幕上实际的像素点</li><li>包括将元素的可见部分进行绘制，如 <em>文本、颜色、边框、阴影、替换元素（img等）</em></li></ul></li></ul><h3 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h3><ul><li>回流<ul><li>在第一次确定节点的大小和位置，称之为布局</li><li>之后再进行修改重新计算称为回流</li></ul></li><li>引起回流的情况![[Pasted image 20240801131023.png]]</li><li>重绘<ul><li>第一次渲染内容称之为绘制</li><li>之后重新渲染称之为重绘</li></ul></li><li>引起重绘的情况<ul><li>修改背景色、文字颜色、边框颜色、样式等<br>![[Pasted image 20240801131232.png]]</li></ul></li></ul><h2 id="特殊解析-composite合成"><a href="#特殊解析-composite合成" class="headerlink" title="特殊解析 - composite合成"></a>特殊解析 - composite合成</h2><ul><li>每个合成层都是 <em>单独渲染的</em></li><li>默认情况下，标准流中的内容都是被绘制在同一个图层（Layer）中</li><li>有一些属性绘创建一个新的合成层，利用GPU来加速绘制<ul><li>**3D transforms</li><li>**video、canvas、iframe</li><li>**opacity动画转换时</li><li>**position: fixed(固定定位)</li><li><strong>will-change</strong>（目前还是一个实验性的属性，提前告诉浏览器元素可能发生的变化）</li><li>**animation 或 transition 设置了 opacity(透明度)、transform</li></ul></li><li>分层是以内存管理为代价提高性能，不能作为性能优化策略过度使用</li></ul><h2 id="script元素和页面解析的关系"><a href="#script元素和页面解析的关系" class="headerlink" title="script元素和页面解析的关系"></a>script元素和页面解析的关系</h2><ul><li>浏览器在解析HTML过程中，遇到了 <em>script元素是不能继续构建DOM树的</em>，会停止构建，先下载JavaScript代码，并且执行JavaScript的脚本，等到JavaScript脚本执行结束后，再继续解析HTML，构建DOM树<br>![[Pasted image 20240801142428.png]]</li></ul><h2 id="defer属性"><a href="#defer属性" class="headerlink" title="defer属性"></a>defer属性</h2><ul><li>defer属性告诉浏览器 <em>不要等待脚本下载， 继续解析HTML， 构建DOM Tree</em>， 如果脚本提前下载好了，它会 <em>等待DOM Tree构建完成，在DOMContentLoaded事件完成前先执行defer中的代码</em></li><li>多个带defer的脚本会保持正确的顺序执行</li><li>defer可以提高网页的性能，推荐放在head元素中</li><li><strong>注意：</strong> defer只适用于外部脚本，对于script默认内容会被忽略</li></ul><h2 id="async属性"><a href="#async属性" class="headerlink" title="async属性"></a>async属性</h2><ul><li>async让一个脚本完全独立<ul><li>async脚本不会阻碍浏览器的解析（与defer类似）</li><li><em>async脚本不能保证顺序，它独立下载、独立运行，不会等待其他脚本</em></li><li>async不能保证在DOMContentLoaded之前或者之后执行</li></ul></li><li>defer常用于需要在文档解析后操作DOM的JavaScript代码，并且对多个script文件有顺序要求</li><li>async通常用于独立的脚本，对其他脚本，甚至DOM没有依赖的</li></ul><h1 id="深入JavaScript的运行原理"><a href="#深入JavaScript的运行原理" class="headerlink" title="深入JavaScript的运行原理"></a>深入JavaScript的运行原理</h1><h2 id="V8引擎的执行原理"><a href="#V8引擎的执行原理" class="headerlink" title="V8引擎的执行原理"></a>V8引擎的执行原理</h2><p>![[Pasted image 20240801154302.png]]</p><h3 id="V8引擎的架构"><a href="#V8引擎的架构" class="headerlink" title="V8引擎的架构"></a>V8引擎的架构</h3><p>![[Pasted image 20240801154530.png]]</p><h2 id="JS执行上下文"><a href="#JS执行上下文" class="headerlink" title="JS执行上下文"></a>JS执行上下文</h2><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ul><li>JS引擎内部有一个执行上下文栈（Execution Context Stack，简称ECS），用于执行代码的调用栈</li><li>全局的代码块为了执行会构建一个Global Execution Context（GEC），GEC会被放入ECS中执行</li></ul><h3 id="认识VO对象"><a href="#认识VO对象" class="headerlink" title="认识VO对象"></a>认识VO对象</h3><ul><li>每一个执行上下文会关联一个 <em>VO（Variable Object，变量对象），变量和函数声明</em>会被添加到这个VO对象中</li><li>当全局代码被执行的时候，VO就是GO对象了</li></ul><h3 id="函数执行上下文"><a href="#函数执行上下文" class="headerlink" title="函数执行上下文"></a>函数执行上下文</h3><p>![[Pasted image 20240801172129.png]]</p><h1 id="JavaScript的内存管理和闭包"><a href="#JavaScript的内存管理和闭包" class="headerlink" title="JavaScript的内存管理和闭包"></a>JavaScript的内存管理和闭包</h1><h2 id="JavaScript内存管理"><a href="#JavaScript内存管理" class="headerlink" title="JavaScript内存管理"></a>JavaScript内存管理</h2><ul><li>JavaScript会在 <em>定义数据时</em>为我们分配内存</li><li>JavaScript对于 <em>原始数据类型内存的分配</em>  会在执行时，直接在栈空间进行分配</li><li>对于 <em>复杂数据类型内存的分配</em>  会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用</li></ul><h2 id="垃圾回收（GC）算法"><a href="#垃圾回收（GC）算法" class="headerlink" title="垃圾回收（GC）算法"></a>垃圾回收（GC）算法</h2><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ul><li>当 <em>一个对象有一个引用指向它</em> 时，这个对象的的引用就 +1</li><li>当 <em>一个对象的引用为0</em> 时，这个对象就可以被销毁掉</li><li><strong>弊端</strong>：会产生循环引用![[Pasted image 20240802152232.png]]</li></ul><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><ul><li><em>核心思路：</em> 可达性</li><li><em>实现思路：</em> 设置一个 <em>根对象</em>，垃圾回收器会定期从这个根对象开始，找到所有从根开始有引用到的对象，对于没有引用到的对象，认为是不可用的对象</li><li>这个算法解决了上一个算法产生的循环引用的问题![[Pasted image 20240802154857.png]]</li></ul><h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><p>V8引擎为了进行更好的优化，在算法实现细节上会结合一些其他算法</p><ul><li><strong>标记整理</strong><ul><li>回收期间会将保存的储存对象 <em>搬运汇集到连续的内存空间</em>，从而 <em>整合空闲空间，避免内存碎片化</em></li></ul></li><li><strong>分代收集</strong>：对象被分为 <em>新的</em> 和 <em>旧的</em><ul><li>很多对象完成工作并很快死去，它们会被 <em>很快被清理</em></li><li>那些长期存活的对象会变 <em>老旧</em>，而且 <em>被检查的频次也会减少</em></li></ul></li><li>**增量收集<ul><li>将垃圾收集工作分成几个部分来做，然后将这几部分逐一处理，这样把一个大的延迟分成许多微小的延迟</li></ul></li><li>**闲时收集<ul><li>垃圾收集器 <em>只会在CPU空闲时尝试运行，减少可能对代码执行的影响</em></li></ul></li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h3><ul><li>一个函数和周围的环境的引用捆绑在一起，这样的组合就是闭包</li><li>闭包可以在一个内层函数中访问到其外层函数的作用域</li><li>广义理解：JavaScript中的函数都是闭包</li><li>狭义理解：JavaScript中的一个函数，如果访问了外层作用域的变量，那么它就是一个闭包</li></ul><h1 id="JavaScript函数的增强知识"><a href="#JavaScript函数的增强知识" class="headerlink" title="JavaScript函数的增强知识"></a>JavaScript函数的增强知识</h1><h2 id="函数对象的属性和argumens"><a href="#函数对象的属性和argumens" class="headerlink" title="函数对象的属性和argumens"></a>函数对象的属性和argumens</h2><h3 id="属性name和length"><a href="#属性name和length" class="headerlink" title="属性name和length"></a>属性name和length</h3><ul><li><strong>属性name</strong>：一个函数的名词我们可以通过name来访问![[Pasted image 20240802203605.png]]</li><li><strong>属性length</strong>：返回函数输入参数的个数（rest参数不参与参数的个数）![[Pasted image 20240802203941.png]]</li></ul><h3 id="认识arguments"><a href="#认识arguments" class="headerlink" title="认识arguments"></a>认识arguments</h3><ul><li>arguments是一个类数组对象（不是一个数组类型，而是一个对象类型）<ul><li>它拥有数组的一些特性，如length、可以用Index索引来访问</li><li>但没有数组的一些方法，如filter、map</li></ul></li></ul><h3 id="arguments转Array"><a href="#arguments转Array" class="headerlink" title="arguments转Array"></a>arguments转Array</h3><ul><li>方法一：遍历arguments，添加到一个新数组中![[Pasted image 20240802205908.png]]</li><li>方法二：ES6中的两个方法<ul><li>1.Array.from![[Pasted image 20240802210001.png]]</li><li>2.<code>[...arguments]</code>![[Pasted image 20240802210026.png]]</li></ul></li><li>方法三：调用slice函数的call方法![[Pasted image 20240802210124.png]]</li></ul><h3 id="函数的剩余（rest）参数"><a href="#函数的剩余（rest）参数" class="headerlink" title="函数的剩余（rest）参数"></a>函数的剩余（rest）参数</h3><ul><li>ES6中引用了rest parameter，可以将不定数量的参数放入到一个数组中<ul><li>最后一个参数是 … 为前缀，那么剩余的参数会作为一个数组放到该参数中![[Pasted image 20240803163950.png]]</li></ul></li><li>剩余参数和arguments的区别<ul><li>剩余参数只包含 <em>没有对应形参的实参</em>，arguments对象包含了 <em>传给函数的所有实参</em></li><li><em>arguments对象不是一个数组，只是类数组对象，而rest参数是一个真正的数组，可以进行数组的所有操作</em></li></ul></li><li><strong>剩余参数必须放到最后一个位置，否则会报错</strong></li></ul><h2 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h2><h3 id="理解纯函数"><a href="#理解纯函数" class="headerlink" title="理解纯函数"></a>理解纯函数</h3><ul><li>有确定的输入，一定会产生确定的输出</li><li>函数在执行过程中，不能产生副作用</li></ul><h2 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h2><p>![[Pasted image 20240803194335.png]]</p><h3 id="自动柯里化（了解）"><a href="#自动柯里化（了解）" class="headerlink" title="自动柯里化（了解）"></a>自动柯里化（了解）</h3><p>![[Pasted image 20240803201340.png]]</p><h2 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h2><p>![[Pasted image 20240803203237.png]]</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>![[Pasted image 20240803210307.png]]</p><h1 id="对象增强"><a href="#对象增强" class="headerlink" title="对象增强"></a>对象增强</h1><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><ul><li>Object.defineProperty()方法会直接在对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象：<code>Object.defineProperty(obj, prop, descriptor)</code></li><li>可接受三个参数<ul><li>obj：要定义属性的对象</li><li>prop：要定义或修改属性的名称或Symbol</li><li>descriptor：要定义或修改的属性描述符</li></ul></li><li>返回值被传递给函数的对象</li></ul><h2 id="数据属性描述符"><a href="#数据属性描述符" class="headerlink" title="数据属性描述符"></a>数据属性描述符</h2><p>![[Pasted image 20240805170950.png]]</p><h2 id="存取属性描述符"><a href="#存取属性描述符" class="headerlink" title="存取属性描述符"></a>存取属性描述符</h2><p>![[Pasted image 20240805172134.png]]</p><h2 id="同时定义多个属性"><a href="#同时定义多个属性" class="headerlink" title="同时定义多个属性"></a>同时定义多个属性</h2><ul><li>Object.defineProperties()方法直接在一个对象上定义多个新的属性或修改现有属性，并且返回该对象![[Pasted image 20240805173134.png]]</li></ul><h1 id="ES5中的继承"><a href="#ES5中的继承" class="headerlink" title="ES5中的继承"></a>ES5中的继承</h1><h2 id="对象和函数的原型"><a href="#对象和函数的原型" class="headerlink" title="对象和函数的原型"></a>对象和函数的原型</h2><h3 id="认识对象原型"><a href="#认识对象原型" class="headerlink" title="认识对象原型"></a>认识对象原型</h3><p>![[Pasted image 20240805192039.png]]</p><h3 id="函数对象的原型"><a href="#函数对象的原型" class="headerlink" title="函数对象的原型"></a>函数对象的原型</h3><p>![[Pasted image 20240805192551.png]]<br><strong>将方法放在原型上</strong></p><ol><li>*减少内存占用：<ul><li>当方法定义在对象的实例上时,每个对象都会有一个独立的方法副本,这会浪费内存。</li><li>将方法放在原型上,所有对象实例共享同一个方法,大大减少了内存的使用。</li></ul></li><li><em>提高代码复用性</em>：<ul><li>将方法放在原型上,可以让所有对象实例都能访问和使用这些方法。</li><li>这提高了代码的复用性,避免了在每个对象实例上都定义相同的方法,提高了开发效率。</li></ul></li><li>*动态添加&#x2F;修改方法：<ul><li>通过修改原型,可以动态地为所有对象实例添加或修改方法。</li><li>这使得代码更加灵活和可扩展。</li></ul></li><li><em>保持对象实例的轻量级</em>：<ul><li>将方法放在原型上,可以保持对象实例本身更加简单和轻量级。</li><li>对象实例中只保存自己的属性,方法都存储在原型上,这样可以提高性能。</li></ul></li><li>*继承和多态：<ul><li>通过原型链机制,可以实现继承和多态。</li><li>子类可以重写或扩展从父类继承的方法,实现代码复用和多态特性。<br><strong>注意：</strong> 讲方法放在原型上的方法也叫做实例方法，在没有实例对象的情况下，不能调用此函数</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Students</span>(<span class="hljs-params">name, age, grade</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade;</span><br><span class="language-javascript">    &#125; <span class="hljs-comment">// 定义构造函数</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-title class_">Students</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">running</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; is running&quot;</span>);</span><br><span class="language-javascript">    &#125; <span class="hljs-comment">// 将方法放在原型上</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> std1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>(<span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">100</span>) <span class="hljs-comment">// 创建实例对象</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    std1.<span class="hljs-title function_">running</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h2><p>![[Pasted image 20240806141712.png]]<br>**理解<br>![[Pasted image 20240806145948.png]]</p><p>![[Pasted image 20240806145900.png]]</p><ul><li>重写原型对象![[Pasted image 20240806151052.png]]![[Pasted image 20240806151113.png]]![[Pasted image 20240806151123.png]]![[Pasted image 20240806151136.png]]</li></ul><h2 id="通过原型链实现继承"><a href="#通过原型链实现继承" class="headerlink" title="通过原型链实现继承"></a>通过原型链实现继承</h2><p>创建父类对象，并且作为子类的原型对象![[Pasted image 20240806160312.png]]![[Pasted image 20240806160344.png]]![[Pasted image 20240806160612.png]]</p><h2 id="借用构造函数实现继承"><a href="#借用构造函数实现继承" class="headerlink" title="借用构造函数实现继承"></a>借用构造函数实现继承</h2><p>![[Pasted image 20240806161649.png]]![[Pasted image 20240806161712.png]]![[Pasted image 20240806161725.png]]</p><ul><li>组合原型链和借用构造函数实现继承的问题![[Pasted image 20240806162633.png]]</li></ul><h2 id="寄生组合实现继承"><a href="#寄生组合实现继承" class="headerlink" title="寄生组合实现继承"></a>寄生组合实现继承</h2><p>![[Pasted image 20240806165456.png]]<br>最终实现方案：</p><ul><li>将继承函数封装成工具放在JS文件中![[Pasted image 20240806170337.png]]</li><li>代码![[Pasted image 20240806170358.png]]</li></ul><h2 id="对象的方法补充"><a href="#对象的方法补充" class="headerlink" title="对象的方法补充"></a>对象的方法补充</h2><p>![[Pasted image 20240806173132.png]]</p><h1 id="ES6实现继承"><a href="#ES6实现继承" class="headerlink" title="ES6实现继承"></a>ES6实现继承</h1><h2 id="原型继承关系图"><a href="#原型继承关系图" class="headerlink" title="原型继承关系图"></a>原型继承关系图</h2><p>![[Pasted image 20240806211030.png]]</p><h2 id="class方式定义类"><a href="#class方式定义类" class="headerlink" title="class方式定义类"></a>class方式定义类</h2><ul><li>使用class来定义一个类：<ul><li>类声明和类表达式![[Pasted image 20240807133150.png]]</li></ul></li><li>在创建对象的时候想给类传递一些参数：<ul><li>每个类有一个固定的构造函数方法<strong>constructor</strong></li><li>每个类只能有一个构造函数</li></ul></li><li><strong>注意</strong>：类中定义的多个内容不需要使用 “,” 进行分割</li></ul><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>     <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>       <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>     &#125;<br><br>     <span class="hljs-comment">//running和eating被添加在Person.prototype上</span><br>     <span class="hljs-title function_">running</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is running.`</span>)<br>     &#125;<br><br>     <span class="hljs-title function_">eating</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is eating.`</span>)<br>     &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>)<br>   p1.<span class="hljs-title function_">running</span>()<br>   p1.<span class="hljs-title function_">eating</span>()<br></code></pre></td></tr></table></figure><h3 id="类的静态方法"><a href="#类的静态方法" class="headerlink" title="类的静态方法"></a>类的静态方法</h3><ul><li>静态方法通常用于定义直接使用类来执行的方法，不需要有类的实例，使用 <strong>static关键字</strong>来定义</li><li>类方法里面的this指向类本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>      &#125;<br><br>      <span class="hljs-keyword">static</span> <span class="hljs-title function_">running</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is running.`</span>); <br>      &#125;<br>    &#125;<br><br>    <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">running</span>() <span class="hljs-comment">// 静态方法可以直接通过类名调用，不需要实例化对象,这里的this指向类本身，输出Person is running.</span><br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><ul><li>执行 super.method(…) 来调用一个父类方法</li><li>执行 super(…) 来调用一个父类 constructor (只能在自己的constructor中调用)</li><li><strong>注意：</strong> 在子类的构造函数中使用this或者返回默认对象之前，必须先通过super调用父类的构造函数</li><li>super的使用位置有三个：子类的构造方法、实例方法、静态方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>      &#125;<br>      <span class="hljs-title function_">running</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;running&#x27;</span>)<br>      &#125;<br>      <span class="hljs-title function_">eating</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;eating&#x27;</span>)<br>      &#125;<br><br>      <span class="hljs-keyword">static</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sleeping&#x27;</span>)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>      <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, grade</span>) &#123;<br>        <span class="hljs-comment">// 调用父类构造函数</span><br>        <span class="hljs-variable language_">super</span>(name, age)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade<br>      &#125;<br><br>      <span class="hljs-comment">// 重写父类方法</span><br>      <span class="hljs-title function_">running</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;running in class&#x27;</span>)<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">running</span>() <span class="hljs-comment">// 调用父类方法</span><br>      &#125;<br><br>      <span class="hljs-comment">// 新增方法</span><br>      <span class="hljs-title function_">studying</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;studying&#x27;</span>)<br>      &#125;<br><br>      <span class="hljs-comment">// 重写父类静态方法</span><br>      <span class="hljs-keyword">static</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sleeping in class&#x27;</span>)<br>        <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">sleep</span>() <span class="hljs-comment">// 调用父类静态方法</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> stu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">18</span>)<br>    stu.<span class="hljs-title function_">running</span>()<br>    stu.<span class="hljs-title function_">eating</span>()<br>    stu.<span class="hljs-title function_">studying</span>()<br>    <span class="hljs-title class_">Student</span>.<span class="hljs-title function_">sleep</span>()<br>    <br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="继承内置类"><a href="#继承内置类" class="headerlink" title="继承内置类"></a>继承内置类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-comment">// 1、创建一个新的类，继承内置类 Array</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">xyArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Array</span> &#123;<br>      <span class="hljs-keyword">get</span> <span class="hljs-title function_">lastItem</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>      &#125;<br><br>      <span class="hljs-keyword">get</span> <span class="hljs-title function_">firstItem</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[<span class="hljs-number">0</span>]<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title function_">xyArray</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>) <span class="hljs-comment">// 5</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">lastItem</span>) <span class="hljs-comment">// 5</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">firstItem</span>) <span class="hljs-comment">// 1</span><br><br>    <span class="hljs-comment">// 2、直接对Array进行扩展</span><br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">lastItem</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]<br>    &#125;<br><br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">firstItem</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[<span class="hljs-number">0</span>]<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-property">length</span>) <span class="hljs-comment">// 5</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">lastItem</span>()) <span class="hljs-comment">// 5</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr2.<span class="hljs-title function_">firstItem</span>()) <span class="hljs-comment">// 1</span><br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="类的混入mixins"><a href="#类的混入mixins" class="headerlink" title="类的混入mixins"></a>类的混入mixins</h3><ul><li>JavaScript的类只支持单继承，当我们需要多继承时，可以使用混入![[Pasted image 20240807153120.png]]</li></ul><h2 id="ES6对象的增强"><a href="#ES6对象的增强" class="headerlink" title="ES6对象的增强"></a>ES6对象的增强</h2><h3 id="字面量的增强"><a href="#字面量的增强" class="headerlink" title="字面量的增强"></a>字面量的增强</h3><ul><li>属性的简写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1、属性的增强</span><br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;小明&quot;</span><br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span><br><br>    <span class="hljs-keyword">var</span> obj = &#123;<br>      name, <span class="hljs-comment">// 等同于 name: name</span><br>      age <span class="hljs-comment">// 等同于 age: age</span><br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;Hello World&quot;</span><br>      <span class="hljs-keyword">var</span> info = <span class="hljs-string">&quot;This is a message from &quot;</span><br>      <span class="hljs-keyword">return</span> &#123;<br>        message, <span class="hljs-comment">// 等同于 message: message</span><br>        info <span class="hljs-comment">// 等同于 info: info</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> result = <span class="hljs-title function_">foo</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">message</span>) <span class="hljs-comment">// Hello World</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result.<span class="hljs-property">info</span>) <span class="hljs-comment">// This is a message from </span><br></code></pre></td></tr></table></figure><ul><li>方法的增强</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2、方法的增强</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小明&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 等同于 sayHello: function() &#123;...&#125;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><br>obj.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// Hello, 小明</span><br></code></pre></td></tr></table></figure><ul><li>计算属性名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 3、计算属性名</span><br>    <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;address&quot;</span><br>    <span class="hljs-keyword">var</span> value = <span class="hljs-string">&quot;北京市海淀区&quot;</span><br>    <span class="hljs-keyword">var</span> obj = &#123;<br>      [key]: value <span class="hljs-comment">// 等同于 obj[key] = value</span><br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">address</span>) <span class="hljs-comment">// 北京市海淀区</span><br><br></code></pre></td></tr></table></figure><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><ul><li>数组的解构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.数组的解构语法</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">undefined</span>, <span class="hljs-number">5</span>]<br><br>    <span class="hljs-comment">// 1.1基本用法</span><br>    <span class="hljs-keyword">var</span> [a, b, c] = arr<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c) <span class="hljs-comment">// 1 2 3</span><br><br>    <span class="hljs-comment">// 1.2按照严格的顺序</span><br>    <span class="hljs-keyword">var</span> [a, , c] = arr<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, c) <span class="hljs-comment">// 1 3</span><br><br>    <span class="hljs-comment">// 1.3解构出数组</span><br>    <span class="hljs-keyword">var</span> [a, b, ...arr2] = arr<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, arr2) <span class="hljs-comment">// 1 2 [3, 4, 5]</span><br><br>    <span class="hljs-comment">// 1.4默认值</span><br>    <span class="hljs-keyword">var</span> [a , b, c, d = <span class="hljs-number">4</span>, e] = arr<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c, d, e) <span class="hljs-comment">// 1 2 3 4 5</span><br></code></pre></td></tr></table></figure><ul><li>对象的解构</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 2.对象的解构语法</span><br>    <span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;beijing&#x27;</span>&#125;<br><br>    <span class="hljs-comment">// 2.1基本用法</span><br>    <span class="hljs-keyword">var</span> &#123;name, age, city&#125; = obj<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age, city) <span class="hljs-comment">// zhangsan 20 beijing</span><br><br>    <span class="hljs-comment">// 2.2对象的解构没有顺序，根据key值解构</span><br>    <span class="hljs-keyword">var</span> &#123;age, name, city&#125; = obj<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age, city) <span class="hljs-comment">// zhangsan 20 beijing</span><br><br>    <span class="hljs-comment">// 2.3解构出对象</span><br>    <span class="hljs-keyword">var</span> &#123;name, age, ...obj2&#125; = obj<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age, obj2) <span class="hljs-comment">// zhangsan 20 &#123;city: &quot;beijing&quot;&#125;</span><br><br>    <span class="hljs-comment">// 2.4默认值</span><br>    <span class="hljs-keyword">var</span> &#123;name, age, city, job = <span class="hljs-string">&#x27;teacher&#x27;</span>&#125; = obj<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age, city, job) <span class="hljs-comment">// zhangsan 20 beijing teacher</span><br><br>    <span class="hljs-comment">// 2.5对变量名进行重命名</span><br>    <span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">name</span>: myName, <span class="hljs-attr">age</span>: myAge, <span class="hljs-attr">city</span>: myCity&#125; = obj<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName, myAge, myCity) <span class="hljs-comment">// zhangsan 20 beijing</span><br><br></code></pre></td></tr></table></figure><h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><h2 id="let、const"><a href="#let、const" class="headerlink" title="let、const"></a>let、const</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>let关键字：与var没有太大的区别，都是用于声明一个变量</li><li>const关键字<ul><li>用const关键字声明的变量一旦被赋值，就不能被修改</li><li>如果赋值的是引用类型，那么可以通过引用找到对应的对象，修改对象的内容![[Pasted image 20240810011845.png]]</li></ul></li><li>let、const都不允许重复声明变量</li><li>let、const不会给window上添加任何属性</li></ul><h3 id="let、const的块级作用域"><a href="#let、const的块级作用域" class="headerlink" title="let、const的块级作用域"></a>let、const的块级作用域</h3><ul><li>let、const、function、class声明的标识符具备块级作用域的限制![[Pasted image 20240810022228.png]]</li><li>但是函数拥有块级作用域，但是在外面依然可以访问</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>获取多个按钮监听点击<br>![[Pasted image 20240810023404.png]]</li></ul><h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><ul><li>ES6开始使用模版字符串来嵌入JS的变量或者表达式来进行拼接<ul><li>使用反引号来编写字符串，称为模版字符串</li><li>再通过 <strong>${expression}</strong> 来动态嵌入内容![[Pasted image 20240810025103.png]]</li></ul></li></ul><h3 id="标签模版字符串"><a href="#标签模版字符串" class="headerlink" title="标签模版字符串"></a>标签模版字符串</h3><ul><li>使用标签模版字符串，在调用时插入其他变量<ul><li>模版字符串会被拆分</li><li>第一个元素是数组，是被模版字符串拆分的字符串组合</li><li>后面的元素是一个个模版字符串传入的内容![[Pasted image 20240810030121.png]]</li></ul></li></ul><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><h3 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h3><p>![[Pasted image 20240810032922.png]]<br>![[Pasted image 20240810033004.png]]</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>![[Pasted image 20240810034748.png]]![[Pasted image 20240810034808.png]]<br>![[Pasted image 20240810035320.png]]![[Pasted image 20240810035344.png]]</p><h2 id="Set-Map"><a href="#Set-Map" class="headerlink" title="Set-Map"></a>Set-Map</h2><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><ul><li>基本使用<ul><li>Set中的元素不能重复</li><li>这个功能可以给数组去重![[Pasted image 20240810143447.png]]</li></ul></li><li>常见属性和方法<ul><li>属性<ul><li>size：返回Set中元素的个数</li></ul></li><li>方法<ul><li>add(value)：添加某个元素，返回Set对象本身</li><li>delete(value)：从Set中删除和value值相等的元素，返回Boolean类型</li><li>has(value)：判断Set中是否存在某个元素，返回Boolean类型</li><li>clear()：清空Set中的所有的元素，没有返回值</li><li>forEach(callback, [,thisArg])：通过forEach遍历Set</li></ul></li></ul></li></ul><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>![[Pasted image 20240810145329.png]]<br>![[Pasted image 20240810145349.png]]</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>![[Pasted image 20240810150140.png]]<br>![[Pasted image 20240810150225.png]]</p><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>![[Pasted image 20240810152228.png]]<br>![[Pasted image 20240810152332.png]]</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>用于处理异步的解决方案</li></ul><ol><li><p><strong>Promise 的状态</strong>: Promise 有三种状态:Pending（进行中）、Fulfilled（已成功）和 Rejected（已失败）。这些状态可以帮助我们更好地跟踪异步操作的进度。</p></li><li><p><strong>Promise 的链式调用</strong>: 通过 <code>.then()</code> 和 <code>.catch()</code> 方法,我们可以将多个异步操作串联起来,形成一个 Promise 链。这样可以使代码更加清晰和可读。</p></li><li><p><strong>错误处理</strong>: 在 Promise 链中,只需在最后添加一个 <code>.catch()</code> 方法即可捕获任何一个步骤中出现的错误,大大简化了错误处理的逻辑。</p></li><li><p><strong>async&#x2F;await</strong>: 为了进一步简化 Promise 的使用,ES2017 引入了 <code>async/await</code> 语法糖。使用 <code>async</code> 函数可以让异步代码看起来更像同步代码,大大提高了可读性。</p></li></ol><ul><li>使用基本格式：</li></ul><ol><li><strong>创建 Promise</strong>:<ul><li>使用 <code>new Promise()</code> 创建一个新的 Promise 对象。</li><li>传递一个函数作为参数,这个函数被称为 Promise 执行器(Executor)。</li><li>在 Promise 执行器函数内部,我们执行异步操作。</li><li>如果异步操作成功,调用 <code>resolve(result)</code> 函数,将结果传递出去。</li><li>如果异步操作失败,调用 <code>reject(error)</code> 函数,将错误信息传递出去。</li></ul></li><li><strong>使用 Promise</strong>:<ul><li>通过 <code>.then()</code> 方法处理 Promise 成功的情况。</li><li>通过 <code>.catch()</code> 方法处理 Promise 失败的情况。</li><li>通过 <code>.finally()</code> 方法处理无论成功还是失败都要执行的代码。</li></ul></li><li><strong>Promise 链式调用</strong>:   <ul><li>每次调用 <code>.then()</code> 或 <code>.catch()</code> 方法都会返回一个新的 Promise 对象。</li><li>可以将多个 Promise 操作串联起来,形成 Promise 链。</li><li>下一个 <code>.then()</code> 方法会等待上一个 Promise 完成后再执行。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 执行一些异步操作</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-comment">/* 操作成功 */</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(result);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">reject</span>(error);<br>  &#125;<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 处理成功的结果</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// 处理失败的情况</span><br>&#125;)<br>.<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 无论成功还是失败都会执行的代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>resolve不同值的区别</li></ul><ol><li><strong>传递普通值</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: &#x27;success&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果 <code>resolve()</code> 函数传递一个普通值,这个值会作为 Promise 的 resolve 结果被传递到后续的 <code>.then()</code> 方法中。</li></ul></li><li><strong>传递 Promise 对象</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">innerResolve, innerReject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">innerResolve</span>(<span class="hljs-string">&#x27;inner promise result&#x27;</span>);<br>      &#125;, <span class="hljs-number">2000</span>);<br>    &#125;)<br>  );<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: &#x27;inner promise result&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果 <code>resolve()</code> 函数传递的是另一个 Promise 对象,那么外层 Promise 的状态会跟随内层 Promise 的状态进行变化。</li><li>外层 Promise 会”等待”内层 Promise 完成,然后采用内层 Promise 的状态和结果。</li></ul></li><li><strong>传递 thenable 对象</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myThenable = &#123;<br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;thenable result&#x27;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(myThenable);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: &#x27;thenable result&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果 <code>resolve()</code> 函数传递的是一个具有 <code>.then()</code> 方法的对象(称为 thenable 对象),那么 Promise 会”等待”这个对象执行完 <code>.then()</code> 方法,并采用其返回的结果。</li></ul></li><li><strong>传递 throw 或 reject()</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Something went wrong&#x27;</span>));<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error); <span class="hljs-comment">// 输出: Error: Something went wrong</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果在 Promise 执行器函数内部调用 <code>throw</code> 或 <code>reject()</code> 函数,那么 Promise 的状态会变为 <code>rejected</code>。</li><li>后续的 <code>.catch()</code> 方法会捕获到这个错误,并进行处理。</li></ul></li></ol><h1 id="ES8-ES13"><a href="#ES8-ES13" class="headerlink" title="ES8~ES13"></a>ES8~ES13</h1><h2 id="ES8中对象的相关属性"><a href="#ES8中对象的相关属性" class="headerlink" title="ES8中对象的相关属性"></a>ES8中对象的相关属性</h2><ol><li><strong>Object.values()</strong>:<ul><li>该方法返回一个给定对象自身的所有可枚举属性值的数组。</li><li>它的行为与 <code>Object.keys()</code> 类似,但返回的是属性值,而不是属性名。</li></ul></li><li><strong>Object.entries()</strong>:<ul><li>该方法返回一个给定对象自身可枚举字符串键属性 <code>[key, value]</code> 的数组。</li><li>这个方法提供了一种迭代一个对象的所有属性的便捷方式。</li></ul></li><li><strong>Object.getOwnPropertyDescriptors()</strong>:<ul><li>该方法返回指定对象所有自身属性的描述符。</li><li>这个方法在 <code>Object.create()</code> 时很有用,用于实现属性的复制和继承。</li></ul></li><li><strong>Trailing commas</strong>:<ul><li>Trailing commas 允许在对象字面量、数组字面量、函数参数列表和函数调用中使用尾随逗号。</li><li>这可以使代码更容易维护和扩展,因为添加新属性或参数不会影响前面的代码。</li></ul></li><li><strong>Async functions</strong>:<ul><li>Async functions 是 ES8 中引入的一个重要特性,用于简化异步编程。</li><li>Async 函数返回一个 Promise 对象,可以使用 <code>await</code> 关键字来等待 Promise 完成。</li></ul></li></ol><h2 id="ES8-padStart和padEnd"><a href="#ES8-padStart和padEnd" class="headerlink" title="ES8-padStart和padEnd"></a>ES8-padStart和padEnd</h2><ul><li><code>padStart(targetLength, [padString])</code> 方法将当前字符串填充到指定的长度。填充从字符串的开始(左侧)应用的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用 &#x27;0&#x27; 填充到长度 5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;42&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">// Output: &#x27;00042&#x27;</span><br><br><span class="hljs-comment">// 用空格填充到长度 10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">// Output: &#x27;       foo&#x27;</span><br></code></pre></td></tr></table></figure><ul><li><code>padEnd(targetLength, [padString])</code> 方法将当前字符串填充到指定的长度。填充从字符串的末尾(右侧)应用的。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用 &#x27;.&#x27; 填充到长度 5</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;.&#x27;</span>)); <span class="hljs-comment">// Output: &#x27;hello.&#x27;</span><br><br><span class="hljs-comment">// 用空格填充到长度 10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;foo&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">// Output: &#x27;foo        &#x27;</span><br></code></pre></td></tr></table></figure><p>这些方法在处理金额、日期、编号等数据格式时非常有用,可以帮助我们快速地格式化字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 格式化金额</span><br><span class="hljs-keyword">const</span> amount = <span class="hljs-number">123.45</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(amount.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">// Output: &#x27;0000123.45&#x27;</span><br><br><span class="hljs-comment">// 格式化日期</span><br><span class="hljs-keyword">const</span> date = <span class="hljs-string">&#x27;2023-5-1&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">// Output: &#x27;2023-05-01&#x27;</span><br><br><span class="hljs-comment">// 隐藏卡号</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hideIdCard</span>(<span class="hljs-params">idCard</span>) &#123;<br>  <span class="hljs-keyword">return</span> idCard.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">4</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">18</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hideIdCard</span>(<span class="hljs-string">&#x27;123456789012345678&#x27;</span>)); <span class="hljs-comment">// Output: ***************5678</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hideBankCard</span>(<span class="hljs-params">bankCard</span>) &#123;<br>  <span class="hljs-keyword">const</span> length = bankCard.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">const</span> front = bankCard.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">const</span> back = bankCard.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">4</span>);<br>  <span class="hljs-keyword">return</span> front + <span class="hljs-string">&#x27;*&#x27;</span>.<span class="hljs-title function_">repeat</span>(length - <span class="hljs-number">8</span>) + back;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hideBankCard</span>(<span class="hljs-string">&#x27;1234567890123456&#x27;</span>)); <span class="hljs-comment">// Output: 1234************3456</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">hideBankCard</span>(<span class="hljs-string">&#x27;123456789012345678&#x27;</span>)); <span class="hljs-comment">// Output: 1234************5678</span><br></code></pre></td></tr></table></figure><h2 id="ES9-Object-spread-operators"><a href="#ES9-Object-spread-operators" class="headerlink" title="ES9-Object spread operators"></a>ES9-Object spread operators</h2><ol><li><strong>Spread 操作符 (<code>...</code>)</strong><br>Spread 操作符可以在对象字面量中使用,用于展开一个现有的对象,将其属性复制到新的对象中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalObj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> newObj = &#123; ...originalObj, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj); <span class="hljs-comment">// Output: &#123; a: 1, b: 2, c: 3 &#125;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中,我们使用 Spread 操作符 <code>...</code> 将 <code>originalObj</code> 的属性复制到 <code>newObj</code> 中,并添加了一个新的属性 <code>c</code>。<br>2. <strong>合并多个对象</strong><br>Spread 操作符可以方便地合并多个对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj1 = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">const</span> obj2 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">4</span> &#125;;<br><span class="hljs-keyword">const</span> mergedObj = &#123; ...obj1, ...obj2 &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mergedObj); <span class="hljs-comment">// Output: &#123; a: 1, b: 3, c: 4 &#125;</span><br></code></pre></td></tr></table></figure><p>在这个例子中,我们使用多个 Spread 操作符将 <code>obj1</code> 和 <code>obj2</code> 的属性合并到 <code>mergedObj</code> 中。当有重复的属性时,后面的对象的属性会覆盖前面对象的属性。<br>3. <strong>与解构赋值结合使用</strong><br>Spread 操作符也可以与对象解构赋值结合使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalObj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><span class="hljs-keyword">const</span> &#123; a, ...rest &#125; = originalObj;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// Output: 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rest); <span class="hljs-comment">// Output: &#123; b: 2, c: 3 &#125;</span><br></code></pre></td></tr></table></figure><p>在这个例子中,我们使用对象解构赋值提取 <code>a</code> 属性,并使用 Spread 操作符将剩余的属性赋值给 <code>rest</code> 对象。<br>4. <strong>浅拷贝和深拷贝</strong><br>需要注意的是,Spread 操作符只能进行<strong>浅拷贝</strong>,如果对象中嵌套了其他对象或数组,则需要使用其他方法实现<strong>深拷贝</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> originalObj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125; &#125;;<br><span class="hljs-keyword">const</span> newObj = &#123; ...originalObj &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj.<span class="hljs-property">b</span> === originalObj.<span class="hljs-property">b</span>); <span class="hljs-comment">// Output: true (浅拷贝)</span><br></code></pre></td></tr></table></figure><h2 id="ES10-flat-flatMap"><a href="#ES10-flat-flatMap" class="headerlink" title="ES10-flat flatMap"></a>ES10-flat flatMap</h2><ol><li><strong><code>flat()</code></strong><br><code>flat()</code> 方法用于将嵌套数组”拉平”为一维数组。它接受一个可选的 <code>depth</code> 参数,指定要提取嵌套数组的深度。如果不传 <code>depth</code> 参数,默认深度为 1。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> nestedArray = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nestedArray.<span class="hljs-title function_">flat</span>()); <span class="hljs-comment">// Output: [1, 2, 3, 4, [5, 6]]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nestedArray.<span class="hljs-title function_">flat</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// Output: [1, 2, 3, 4, 5, 6]</span><br></code></pre></td></tr></table></figure><p>在上面的例子中,第一个 <code>flat()</code> 调用将数组拉平一层,第二个调用将数组拉平两层。<br>2. <strong><code>flatMap()</code></strong><br><code>flatMap()</code> 是 <code>map()</code> 和 <code>flat()</code> 的组合。它首先使用提供的映射函数映射每个元素,然后将结果压缩成一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-keyword">const</span> doubledAndFlattened = arr.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> [x, x * <span class="hljs-number">2</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(doubledAndFlattened); <span class="hljs-comment">// Output: [1, 2, 2, 4, 3, 6, 4, 8]</span><br></code></pre></td></tr></table></figure><p>在上面的例子中,我们使用 <code>flatMap()</code> 将每个元素映射为一个包含原始值和其双倍值的数组,然后将这些数组压缩成一个新数组。<br><code>flatMap()</code> 的好处是,它可以在一步操作中完成映射和拉平操作,相比于先使用 <code>map()</code> 再使用 <code>flat()</code>,效率更高。</p><h2 id="ES10-Object-fromEntries"><a href="#ES10-Object-fromEntries" class="headerlink" title="ES10-Object.fromEntries"></a>ES10-Object.fromEntries</h2><ol><li><strong><code>Object.entries()</code></strong><br><code>Object.entries()</code> 方法返回一个给定对象自身可枚举字符串属性 <code>[key, value]</code> 对组成的数组。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><span class="hljs-keyword">const</span> entries = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(entries); <span class="hljs-comment">// Output: [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]]</span><br></code></pre></td></tr></table></figure><p>这个方法在需要遍历对象属性时非常有用,比如使用 <code>for...of</code> 循环:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value);<br>&#125;<br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// a 1</span><br><span class="hljs-comment">// b 2</span><br><span class="hljs-comment">// c 3</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong><code>Object.fromEntries()</code></strong><br><code>Object.fromEntries()</code> 方法执行与 <code>Object.entries()</code> 逆向操作,将一个键值对列表转换为一个对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> entries = [[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>], [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>]];<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(entries);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// Output: &#123; a: 1, b: 2, c: 3 &#125;</span><br></code></pre></td></tr></table></figure><p>这个方法在需要从其他数据结构(如 Map)转换为对象时非常有用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">2</span>]]);<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(map);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// Output: &#123; a: 1, b: 2 &#125;</span><br></code></pre></td></tr></table></figure><p>应用场景<br>![[Pasted image 20240812145943.png]]</p><h2 id="ES10-trimStart-trimEnd"><a href="#ES10-trimStart-trimEnd" class="headerlink" title="ES10-trimStart trimEnd"></a>ES10-trimStart trimEnd</h2><p><code>trim()</code>, <code>trimStart()</code> 和 <code>trimEnd()</code> 是 JavaScript 中用于删除字符串两端空白字符的三个方法。</p><ol><li><strong><code>trim()</code></strong><br><code>trim()</code> 方法返回一个新的字符串,其中从字符串的两端删除了所有空白字符。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;   Hello, world!   &quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trim</span>()); <span class="hljs-comment">// Output: &quot;Hello, world!&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong><code>trimStart()</code></strong><br><code>trimStart()</code> 方法返回一个新的字符串,其中从字符串的开头删除了所有空白字符。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;   Hello, world!   &quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trimStart</span>()); <span class="hljs-comment">// Output: &quot;Hello, world!   &quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong><code>trimEnd()</code></strong><br><code>trimEnd()</code> 方法返回一个新的字符串,其中从字符串的末尾删除了所有空白字符。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> str = <span class="hljs-string">&quot;   Hello, world!   &quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-title function_">trimEnd</span>()); <span class="hljs-comment">// Output: &quot;   Hello, world!&quot;</span><br></code></pre></td></tr></table></figure><p>这三个方法的主要区别在于它们删除空白字符的位置:</p><ul><li><code>trim()</code> 删除字符串两端的空白字符</li><li><code>trimStart()</code> 删除字符串开头的空白字符</li><li><code>trimEnd()</code> 删除字符串末尾的空白字符</li></ul><h2 id="ES11-BigInt"><a href="#ES11-BigInt" class="headerlink" title="ES11-BigInt"></a>ES11-BigInt</h2><p>要表示大于NUmber.MAX_SAFE_INTEGER的数值，需要在数值后面加上n![[Pasted image 20240812151216.png]]</p><h2 id="ES11-Nullish-Coalescing-Operator-空值合并运算符"><a href="#ES11-Nullish-Coalescing-Operator-空值合并运算符" class="headerlink" title="ES11-Nullish Coalescing Operator (空值合并运算符)"></a>ES11-Nullish Coalescing Operator (空值合并运算符)</h2><p>Nullish Coalescing Operator (空值合并运算符) 是 ECMAScript 2020 (ES11) 引入的一个新的运算符,它可以帮助我们处理 <code>null</code> 和 <code>undefined</code> 值。<br>这个运算符的符号是 <code>??</code>它的工作原理是:</p><ol><li>如果左侧的操作数不是 <code>null</code> 或 <code>undefined</code>，则返回左侧的操作数。</li><li>如果左侧的操作数是 <code>null</code> 或 <code>undefined</code>，则返回右侧的操作数。<br>下面是一些例子:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 基本用法</span><br><span class="hljs-keyword">const</span> username = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">const</span> displayName = username ?? <span class="hljs-string">&#x27;Guest&#x27;</span>; <span class="hljs-comment">// 输出: &#x27;Guest&#x27;</span><br><br><span class="hljs-keyword">const</span> age = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> defaultAge = age ?? <span class="hljs-number">30</span>; <span class="hljs-comment">// 输出: 0</span><br><br><span class="hljs-comment">// 与逻辑OR (||) 运算符的比较</span><br><span class="hljs-keyword">const</span> username2 = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">const</span> displayName2 = username2 || <span class="hljs-string">&#x27;Guest&#x27;</span>; <span class="hljs-comment">// 输出: &#x27;Guest&#x27;</span><br></code></pre></td></tr></table></figure><p>在上面的例子中,当 <code>username</code> 为空字符串时,逻辑 OR (<code>||</code>) 运算符将返回 <code>&#39;Guest&#39;</code>。但是,空字符串在 JavaScript 中是一个有效的值,我们可能不希望将其视为”falsy”。这时,Nullish Coalescing Operator 就很有用,它只会在值为 <code>null</code> 或 <code>undefined</code> 时返回右侧操作数。</p><p>另一个常见的用例是设置默认值:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">const</span> displayName = name ?? <span class="hljs-string">&#x27;Guest&#x27;</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;displayName&#125;</span>!`</span>);<br>&#125;<br><br><span class="hljs-title function_">greet</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// 输出: &quot;Hello, Guest!&quot;</span><br><span class="hljs-title function_">greet</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 输出: &quot;Hello, !&quot;</span><br><span class="hljs-title function_">greet</span>(<span class="hljs-string">&#x27;John&#x27;</span>); <span class="hljs-comment">// 输出: &quot;Hello, John!&quot;</span><br></code></pre></td></tr></table></figure><p>在这个例子中,如果 <code>name</code> 参数是 <code>null</code> 或 <code>undefined</code>，Nullish Coalescing Operator 会将 <code>displayName</code> 设置为 <code>&#39;Guest&#39;</code>。但如果 <code>name</code> 是一个空字符串,它仍然会被使用,因为空字符串不是 <code>null</code> 或 <code>undefined</code>。</p><h2 id="ES11-Optional-Chaining-可选链"><a href="#ES11-Optional-Chaining-可选链" class="headerlink" title="ES11-Optional Chaining (可选链)"></a>ES11-Optional Chaining (可选链)</h2><p>Optional Chaining (可选链) 是 ECMAScript 2020 (ES11) 引入的一个新的运算符,用于安全地访问嵌套对象的属性。它的符号是 <code>?.</code><br>Optional Chaining 可以帮助我们避免在访问嵌套对象属性时出现的 <code>TypeError: Cannot read property &#39;x&#39; of undefined</code> 错误。<br>下面是一些例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 不使用可选链</span><br><span class="hljs-keyword">let</span> adventurer = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>  <span class="hljs-attr">cat</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dinah&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(adventurer.<span class="hljs-property">dog</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span><br><br><span class="hljs-comment">// 使用可选链</span><br><span class="hljs-keyword">let</span> adventurer2 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>  <span class="hljs-attr">cat</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dinah&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(adventurer2?.<span class="hljs-property">dog</span>?.<span class="hljs-property">name</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>在第一个例子中,尝试访问 <code>adventurer.dog.name</code> 会抛出 <code>TypeError</code>,因为 <code>adventurer.dog</code> 是 <code>undefined</code>。<br>但在第二个例子中,使用 Optional Chaining 运算符 <code>?.</code> 可以安全地访问嵌套属性。如果 <code>adventurer2.dog</code> 是 <code>undefined</code>,则整个表达式的结果也是 <code>undefined</code>,而不会抛出错误。</p><p>Optional Chaining 也可以与函数调用一起使用:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> customer = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Carl&#x27;</span>,<br>  <span class="hljs-attr">address</span>: &#123;<br>    <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;Seattle&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(customer.<span class="hljs-property">address</span>.<span class="hljs-property">city</span>); <span class="hljs-comment">// &#x27;Seattle&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(customer.<span class="hljs-property">address</span>?.<span class="hljs-property">city</span>); <span class="hljs-comment">// &#x27;Seattle&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(customer.<span class="hljs-property">address</span>?.<span class="hljs-property">getZipCode</span>?.());  <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>在最后一个例子中,即使 <code>customer.address.getZipCode</code> 不存在,使用 Optional Chaining 也不会抛出错误,而是返回 <code>undefined</code>。</p><h2 id="ES12-FinalizationRegistry"><a href="#ES12-FinalizationRegistry" class="headerlink" title="ES12-FinalizationRegistry"></a>ES12-FinalizationRegistry</h2><p>FinalizationRegistry 是 ECMAScript 2021 (ES12) 引入的一个新的 API,它允许在对象被垃圾回收时执行自定义的清理逻辑。<br>FinalizationRegistry 的主要用途是:</p><ol><li><strong>监听对象的清理</strong>:当一个对象被垃圾回收时,FinalizationRegistry 会通知注册的回调函数。这可以用于执行清理操作,比如释放资源、发送通知等。</li><li><strong>避免内存泄漏</strong>:FinalizationRegistry 可以帮助开发者避免内存泄漏,因为它可以确保在对象被销毁时执行清理逻辑。<br> 示例:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建FinalizationRegistry实例</span><br><span class="hljs-keyword">const</span> registry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizationRegistry</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Finalized: <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;);<br><br><span class="hljs-comment">// 注册对象</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;;<br>registry.<span class="hljs-title function_">register</span>(obj, <span class="hljs-string">&#x27;object-1&#x27;</span>);<br><br><span class="hljs-comment">// 手动触发垃圾回收</span><br>obj = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">global</span>.<span class="hljs-title function_">gc</span>(); <span class="hljs-comment">// 在Node.js中手动触发</span><br><br><span class="hljs-comment">// 输出: Finalized: object-1</span><br></code></pre></td></tr></table></figure><p>在上述示例中:</p><ol><li>我们创建了一个 FinalizationRegistry 实例,并传入一个回调函数,该函数将在对象被垃圾回收时被调用。</li><li>我们注册了一个对象 <code>obj</code> 到 FinalizationRegistry,并为其提供了一个标识符 <code>&#39;object-1&#39;</code>。</li><li>我们手动将 <code>obj</code> 设置为 <code>null</code>,然后调用 <code>global.gc()</code> 来触发垃圾回收(在 Node.js 中,需要使用 <code>--expose-gc</code> 标志来启用手动垃圾回收)。</li><li>当对象被垃圾回收时,FinalizationRegistry 会调用我们提供的回调函数,并输出 <code>&#39;Finalized: object-1&#39;</code>。<br>FinalizationRegistry 的一个主要优点是,它不会阻止对象被垃圾回收。相反,它会在对象被回收后执行清理逻辑,这使得它比 <code>WeakMap</code> 和 <code>WeakSet</code> 更加灵活和强大。<br>FinalizationRegistry 的典型用例包括:</li></ol><ul><li>清理 DOM 元素和事件监听器</li><li>关闭数据库连接或释放其他系统资源</li><li>发送对象销毁的通知</li></ul><h2 id="ES12-WeakRefs"><a href="#ES12-WeakRefs" class="headerlink" title="ES12-WeakRefs"></a>ES12-WeakRefs</h2><p>WeakRef 是 ECMAScript 2021 (ES12) 引入的一个新的 API,它允许创建对对象的”弱引用”。这意味着被引用的对象可以被垃圾回收器回收,即使还有 WeakRef 引用它。<br>主要用途:</p><ol><li><strong>避免内存泄漏</strong>: 由于 WeakRef 不会妨碍对象被垃圾回收,因此可以帮助开发者避免内存泄漏的问题。</li><li><strong>缓存模式</strong>: WeakRef 可以用于实现一种”缓存模式”,在需要时重新创建对象,而不是持有永久引用。</li><li><strong>观察对象生命周期</strong>: WeakRef 可以用于观察对象的生命周期,并在对象被垃圾回收时执行相应的清理操作。<br>示例:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建一个对象</span><br><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-comment">// 创建一个 WeakRef 实例</span><br><span class="hljs-keyword">const</span> weakRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakRef</span>(obj);<br><br><span class="hljs-comment">// 手动触发垃圾回收</span><br>obj = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">global</span>.<span class="hljs-title function_">gc</span>(); <span class="hljs-comment">// 在Node.js中手动触发</span><br><br><span class="hljs-comment">// 尝试访问 WeakRef 持有的对象</span><br><span class="hljs-keyword">const</span> refObj = weakRef.<span class="hljs-title function_">deref</span>();<br><span class="hljs-keyword">if</span> (refObj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(refObj.<span class="hljs-property">id</span>); <span class="hljs-comment">// 输出 1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Object has been garbage collected&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>我们创建了一个对象 <code>obj</code>。</li><li>我们使用 <code>new WeakRef(obj)</code> 创建了一个 WeakRef 实例,它持有对 <code>obj</code> 的引用。</li><li>我们手动将 <code>obj</code> 设置为 <code>null</code>,然后调用 <code>global.gc()</code> 来触发垃圾回收(在 Node.js 中,需要使用 <code>--expose-gc</code> 标志来启用手动垃圾回收)。</li><li>我们尝试使用 <code>weakRef.deref()</code> 方法访问 WeakRef 持有的对象。如果对象还存在,则输出 <code>1</code>。否则,输出 <code>&#39;Object has been garbage collected&#39;</code>。</li></ol><p>WeakRef 的一个主要特点是,它不会阻止被引用的对象被垃圾回收。相反,一旦对象没有其他强引用,它就可以被垃圾回收,即使还有 WeakRef 引用它。这使得 WeakRef 非常适合于缓存模式和生命周期观察等用例<br>WeakRef 通常与 FinalizationRegistry 配合使用,后者可以在对象被垃圾回收时执行清理逻辑。这种组合可以帮助开发者更好地管理内存和系统资源。</p><h2 id="ES13-method-at"><a href="#ES13-method-at" class="headerlink" title="ES13-method.at()"></a>ES13-method.at()</h2><p><code>method.at()</code> 是 ECMAScript 2022 (ES13) 引入的一个新的数组方法,它允许使用索引值访问数组元素,并且可以接受负值索引。<br>特点:</p><ol><li><strong>支持负值索引</strong>: <code>at()</code> 方法可以接受负值索引,这意味着可以从数组末尾开始计数。例如, <code>arr.at(-1)</code> 返回数组的最后一个元素。</li><li><strong>返回 undefined 而不是抛出错误</strong>: 如果使用无效的索引值(例如索引超出数组范围),<code>at()</code> 方法不会抛出错误,而是返回 <code>undefined</code>。</li><li><strong>更简洁的语法</strong>: <code>at()</code> 方法提供了一种更简洁的语法来访问数组元素,相比于使用方括号语法 (<code>arr[index]</code>) 更加直观。<br>示例:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">at</span>(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 输出: 3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">at</span>(-<span class="hljs-number">1</span>)); <span class="hljs-comment">// 输出: 5</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">at</span>(<span class="hljs-number">10</span>)); <span class="hljs-comment">// 输出: undefined</span><br></code></pre></td></tr></table></figure><h2 id="ES13-Object-hasOwn-obj-prop"><a href="#ES13-Object-hasOwn-obj-prop" class="headerlink" title="ES13-Object.hasOwn(obj, prop)"></a>ES13-Object.hasOwn(obj, prop)</h2><p><code>Object.hasOwn()</code> 是 ECMAScript 2022 (ES13) 引入的一个新的静态方法,它用于检查一个对象是否包含指定的属性。这个方法是 <code>Object.prototype.hasOwnProperty()</code> 方法的一种更简洁的替代方式。<br>特点:</p><ol><li><strong>更简洁的语法</strong>: <code>Object.hasOwn(obj, prop)</code> 方法提供了一种更简洁的语法来检查对象是否包含指定的属性,相比于使用 <code>obj.hasOwnProperty(prop)</code> 更加简洁。   </li><li><strong>更安全的属性检查</strong>: <code>Object.hasOwn()</code> 避免了原型污染问题,因为它直接在对象上检查属性,而不会受到原型链上的属性影响。这使得它更安全地用于检查对象属性。   </li><li><strong>支持 null 和 undefined</strong>: 与 <code>obj.hasOwnProperty(prop)</code> 不同, <code>Object.hasOwn()</code> 可以接受 <code>null</code> 或 <code>undefined</code> 作为第一个参数,并在这种情况下返回 <code>false</code>。<br>示例:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(obj, <span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(obj, <span class="hljs-string">&#x27;address&#x27;</span>)); <span class="hljs-comment">// false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">hasOwn</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>与 <code>obj.hasOwnProperty(prop)</code> 语法相比, <code>Object.hasOwn()</code> 的优势优势:</p><ul><li>更简洁的语法,更容易阅读和理解。</li><li>避免了原型污染问题,更安全地检查对象属性。</li><li>可以处理 <code>null</code> 和 <code>undefined</code> 参数,返回 <code>false</code>。</li></ul><h1 id="Proxy-Reflect"><a href="#Proxy-Reflect" class="headerlink" title="Proxy-Reflect"></a>Proxy-Reflect</h1><h2 id="Proxy基本使用"><a href="#Proxy基本使用" class="headerlink" title="Proxy基本使用"></a>Proxy基本使用</h2><ul><li>如果我们希望 <em>监听一个对象的相关操作</em>，那么我们可以 <em>先创建一个代理对象（Proxy对象）</em></li><li>之后通过对代理对象的操作来监听我们想要对原对象进行的操作<br>步骤：</li><li>首先需要 <em>new Proxy对象</em>，并且传入需要监听的对象以及一个处理对象，称之为handler<br><code>const p = new Proxy(target, handler)</code></li><li>其次， <em>我们之后的操作都是直接对Proxy的操作</em>，而不是原有的对象，因为我们需要在handler里</li></ul><h2 id="Proxy的捕获器"><a href="#Proxy的捕获器" class="headerlink" title="Proxy的捕获器"></a>Proxy的捕获器</h2><p>如果想要监听某些具体的操作，就可以在handler中添加对应的 <em>捕获器</em><br>![[Pasted image 20240812213843.png]]</p><ul><li>set函数有4个参数<ul><li>target：目标对象（监听的对象）</li><li>property：将被设置的属性key</li><li>value：新属性值</li><li>receiver：调用的代理对象</li></ul></li><li>get函数有3个参数<ul><li>target：目标对象（监听的对象）</li><li>property：将被设置的属性key</li><li>receiver：调用的代理对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">const</span> obj = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;why&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>      <span class="hljs-attr">height</span>: <span class="hljs-number">1.88</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> objProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>      <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, key, value</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`属性<span class="hljs-subst">$&#123;key&#125;</span>被设置成<span class="hljs-subst">$&#123;value&#125;</span>`</span>)<br>        target[key] = value<br>      &#125;,<br>      <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`属性<span class="hljs-subst">$&#123;key&#125;</span>被读取`</span>)<br>        <span class="hljs-keyword">return</span> target[key] <span class="hljs-comment">// 这里返回target[key]，可以让属性的读取操作正常进行</span><br>      &#125;<br>    &#125;)<br><br>    objProxy.<span class="hljs-property">address</span> = <span class="hljs-string">&quot;四川省&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objProxy.<span class="hljs-property">address</span>) <span class="hljs-comment">// 四川省</span><br>    objProxy.<span class="hljs-property">age</span> = <span class="hljs-number">20</span><br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>![[Pasted image 20240812215441.png]]</p><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><ul><li>作用：Reflect 是 JavaScript 中的一个内置对象,它提供了一组方法和属性,用于更好地反映和操作对象。相比于直接使用对象的属性和方法,Reflect 提供了一些额外的功能和便利。</li><li>与Object的区别： Reflect 与 Object 的方法名称很相似,但 Reflect 方法会返回操作结果,而 Object 方法则会返回操作对象本身。![[Pasted image 20240813000221.png]]</li><li>常见方法：</li></ul><ol><li><strong>获取属性值</strong>:<ul><li><code>Reflect.get(target, property[, receiver])</code>: 获取对象 <code>target</code> 的属性 <code>property</code> 的值。</li></ul></li><li><strong>设置属性值</strong>:<ul><li><code>Reflect.set(target, property, value[, receiver])</code>: 设置对象 <code>target</code> 的属性 <code>property</code> 的值为 <code>value</code>。</li></ul></li><li><strong>删除属性</strong>:<ul><li><code>Reflect.deleteProperty(target, property)</code>: 删除对象 <code>target</code> 的属性 <code>property</code>。</li></ul></li><li><strong>检查属性是否存在</strong>:<ul><li><code>Reflect.has(target, property)</code>: 检查对象 <code>target</code> 是否拥有属性 <code>property</code>。</li></ul></li><li><strong>获取对象原型</strong>:<ul><li><code>Reflect.getPrototypeOf(target)</code>: 获取对象 <code>target</code> 的原型。</li></ul></li><li><strong>设置对象原型</strong>:<ul><li><code>Reflect.setPrototypeOf(target, prototype)</code>: 设置对象 <code>target</code> 的原型为 <code>prototype</code></li></ul></li><li><strong>判断对象是否可扩展</strong>:<ul><li><code>Reflect.isExtensible(target)</code>: 判断对象 <code>target</code> 是否可扩展。</li></ul></li><li><strong>冻结对象</strong>:<ul><li><code>Reflect.preventExtensions(target)</code>: 让对象 <code>target</code> 变为不可扩展。</li></ul></li><li><strong>获取自身属性描述符</strong>:<ul><li><code>Reflect.getOwnPropertyDescriptor(target, property)</code>: 获取对象 <code>target</code> 的属性 <code>property</code> 的描述符。</li></ul></li><li><strong>定义属性</strong>:<ul><li><code>Reflect.defineProperty(target, property, descriptor)</code>: 在对象 <code>target</code> 上定义属性 <code>property</code>。</li></ul></li><li><strong>调用函数</strong>:<ul><li><code>Reflect.apply(target, thisArgument, argumentsList)</code>: 使用给定的 <code>this</code> 值和参数列表调用目标函数。</li></ul></li><li><strong>使用 new 创建实例</strong>:<ul><li><code>Reflect.construct(target, argumentsList[, newTarget])</code>: 使用给定的构造函数 <code>target</code> 和参数列表创建一个新实例。<br>![[Pasted image 20240813000437.png]]</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">const</span> obj = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;why&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>      <span class="hljs-keyword">get</span> <span class="hljs-title function_">info</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> objProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>      <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, value, receiver</span>) &#123;<br><br>        <span class="hljs-comment">// target[key] = value</span><br>        <span class="hljs-comment">// return true</span><br>        <span class="hljs-comment">// 好处1、代理对象的目的：不再直接操作原对象</span><br>        <span class="hljs-comment">// 好处2、Reflect.set()方法可以返回一个布尔值，表示是否设置成功</span><br>        <span class="hljs-comment">/* 好处3、</span><br><span class="hljs-comment">          reciver === objProxy,就是外层的Proxy对象</span><br><span class="hljs-comment">          Reflect.set/get最后一个参数receiver可以决定对象访问器的setter/getter的this指向</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Proxy中的设置方法被调用&quot;</span>)<br>        <span class="hljs-keyword">const</span> isSuccess = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value)<br><br>        <span class="hljs-keyword">if</span>(!isSuccess) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;set failed&quot;</span>)<br>        &#125;<br>      &#125;,<br>      <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Proxy中的获取方法被调用&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver)<br>      &#125;<br>    &#125;)<br><br>    objProxy.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;kobe&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objProxy.<span class="hljs-property">info</span>)<br><br></code></pre></td></tr></table></figure><h1 id="Promise-1"><a href="#Promise-1" class="headerlink" title="Promise"></a>Promise</h1><h2 id="异步任务的处理"><a href="#异步任务的处理" class="headerlink" title="异步任务的处理"></a>异步任务的处理</h2><ul><li>我们调用一个函数，这个函数中发送网络请求</li><li>如果 <em>发送网络请求成功了</em>，那么告知调用者发送成功，并且返回相关数据</li><li>如果 <em>发送网络请求失败了</em>，那么告知调用者发送失败，并且告知错误信息![[Pasted image 20240816165910.png]]</li></ul><h2 id="Promise的基本使用"><a href="#Promise的基本使用" class="headerlink" title="Promise的基本使用"></a>Promise的基本使用</h2><ul><li>Promise是一个类，当我们需要的时候，给予调用者一个承诺：待会儿回调函数的时候，就可以创建一个Promise对象</li><li>在通过new创建Promise对象时，我们需要传入一个回调函数，称为executor<ul><li>这个回调函数会被立即执行，并且给传入另外两个回调函数resolve、reject</li><li>调用resolve回调函数时，会执行Promise对象的then方法传入的回调函数</li><li>调用reject回调函数时，会执行Promise对象的catch方法传入的回调函数![[Pasted image 20240816172919.png]]</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">execCode</span>(<span class="hljs-params">counter</span>) &#123;<br>      <span class="hljs-comment">// 异步处理</span><br>      <span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 模拟异步处理</span><br>        <span class="hljs-keyword">if</span>(counter &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">let</span> total = <span class="hljs-number">0</span><br>          <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; counter; i++) &#123;<br>            total += i<br>          &#125;<br>          <span class="hljs-title function_">resolve</span>(total)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">reject</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;counter&#125;</span>输入错误`</span>)<br>        &#125;<br>      &#125;)<br>      <span class="hljs-keyword">return</span> promise<br>    &#125;<br><br>    <span class="hljs-title function_">execCode</span>(<span class="hljs-number">5</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">sucessed</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功：&quot;</span>, sucessed)<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失败：&quot;</span>, error)<br>    &#125;)<br><br>    <span class="hljs-title function_">execCode</span>(-<span class="hljs-number">5</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">sucessed</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功：&quot;</span>, sucessed)<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失败：&quot;</span>, error)<br>    &#125;)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="resolve不同值"><a href="#resolve不同值" class="headerlink" title="resolve不同值"></a>resolve不同值</h2><ol><li><strong>传递普通值</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: &#x27;success&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果 <code>resolve()</code> 函数传递一个普通值,这个值会作为 Promise 的 resolve 结果被传递到后续的 <code>.then()</code> 方法中。</li></ul></li><li><strong>传递 Promise 对象</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">innerResolve, innerReject</span>) =&gt;</span> &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">innerResolve</span>(<span class="hljs-string">&#x27;inner promise result&#x27;</span>);<br>      &#125;, <span class="hljs-number">2000</span>);<br>    &#125;)<br>  );<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: &#x27;inner promise result&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果 <code>resolve()</code> 函数传递的是另一个 Promise 对象,那么外层 Promise 的状态会跟随内层 Promise 的状态进行变化。</li><li>外层 Promise 会”等待”内层 Promise 完成,然后采用内层 Promise 的状态和结果。</li></ul></li><li><strong>传递 thenable 对象</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myThenable = &#123;<br>  <span class="hljs-title function_">then</span>(<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;thenable result&#x27;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">resolve</span>(myThenable);<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: &#x27;thenable result&#x27;</span><br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果 <code>resolve()</code> 函数传递的是一个具有 <code>.then()</code> 方法的对象(称为 thenable 对象),那么 Promise 会”等待”这个对象执行完 <code>.then()</code> 方法,并采用其返回的结果。</li></ul></li><li><strong>传递 throw 或 reject()</strong> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Something went wrong&#x27;</span>));<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error); <span class="hljs-comment">// 输出: Error: Something went wrong</span><br>&#125;);<br></code></pre></td></tr></table></figure><ul><li>如果在 Promise 执行器函数内部调用 <code>throw</code> 或 <code>reject()</code> 函数,那么 Promise 的状态会变为 <code>rejected</code>。</li><li>后续的 <code>.catch()</code> 方法会捕获到这个错误,并进行处理。</li></ul></li></ol><h2 id="then的返回值"><a href="#then的返回值" class="headerlink" title="then的返回值"></a>then的返回值</h2><p><code>Promise</code> 的 <code>then</code> 方法的返回值是一个新的 <code>Promise</code> 对象。这个返回值可以用于实现链式调用。</p><ul><li>关键点</li></ul><ol><li><strong>成功回调的返回值</strong>:<ul><li>如果在 <code>then</code> 的成功回调中返回一个值，这个值将作为下一个 <code>then</code> 的输入。</li><li>如果返回的是一个 <code>Promise</code>，下一个 <code>then</code> 将等待该 <code>Promise</code> 完成。</li></ul></li><li><strong>失败回调的返回值</strong>:<ul><li>如果在 <code>then</code> 的失败回调中返回一个值，该值将被忽略，链中的下一个 <code>then</code> 将继续执行。</li><li>如果返回的是一个 <code>Promise</code>，同样会等待下一个 <code>Promise</code> 完成。</li></ul></li></ol><ul><li>示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-number">42</span>);<br>&#125;);<br><br>promise<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: 42</span><br>        <span class="hljs-keyword">return</span> result + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回 43</span><br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: 43</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(result + <span class="hljs-number">1</span>); <span class="hljs-comment">// 返回一个新的 Promise</span><br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: 44</span><br>    &#125;);<br></code></pre></td></tr></table></figure><h2 id="catch的返回值"><a href="#catch的返回值" class="headerlink" title="catch的返回值"></a>catch的返回值</h2><p><code>Promise</code> 的 <code>catch</code> 方法的返回值也会是一个新的 <code>Promise</code> 对象，具有和 <code>then</code> 方法相似的特性。具体来说，<code>catch</code> 主要用于处理链中的错误，但是它的返回值可以影响后续的链式调用。</p><ul><li>关键点</li></ul><ol><li><strong>处理错误并返回值</strong>:<ul><li>如果 <code>catch</code> 处理了错误并返回一个值，这个值将作为后续链中下一个 <code>then</code> 的输入。</li></ul></li><li><strong>返回新 Promise</strong>:<ul><li>如果在 <code>catch</code> 中返回一个 <code>Promise</code>，下一个 <code>then</code> 会等待这个 <code>Promise</code> 完成，然后将结果传递下去。</li></ul></li></ol><ul><li>示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>);<br>&#125;);<br><br>promise<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 不会执行</span><br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error); <span class="hljs-comment">// 输出: 出错了</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;处理完毕&#x27;</span>; <span class="hljs-comment">// 返回一个字符串</span><br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: 处理完毕</span><br>    &#125;);<br></code></pre></td></tr></table></figure><ul><li>如果我们希望后续继续执行catch，那么需要抛出一个异常![[Pasted image 20240816202837.png]]</li></ul><h2 id="finally的回调"><a href="#finally的回调" class="headerlink" title="finally的回调"></a>finally的回调</h2><p><code>Promise</code> 的 <code>finally</code> 方法用于在 <code>Promise</code> 操作结束后执行一个回调函数，无论是成功还是失败。这使得 <code>finally</code> 非常适合用于清理或执行一些始终需要进行的操作，比如关闭文件、清理资源等。</p><ul><li>特点</li></ul><ol><li><strong>不影响链的结果</strong>:<ul><li><code>finally</code> 的回调不会接收 <code>Promise</code> 的结果或错误。</li><li>无论前面的 <code>then</code> 或 <code>catch</code> 是否成功，<code>finally</code> 始终会执行。</li></ul></li><li><strong>返回值</strong>:<ul><li><code>finally</code> 返回一个新的 <code>Promise</code>，其解析方式与前面的 <code>Promise</code> 一致。</li><li>如果在 <code>finally</code> 中返回一个值或 <code>Promise</code>，将不会影响前面 <code>then</code> 或 <code>catch</code> 的结果。</li></ul></li></ol><ul><li>示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> success = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 模拟操作成功或失败</span><br><br>    <span class="hljs-keyword">if</span> (success) &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;成功&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败&#x27;</span>);<br>    &#125;<br>&#125;);<br><br>promise<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// 输出: 成功</span><br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error); <span class="hljs-comment">// 不会执行</span><br>    &#125;)<br>    .<span class="hljs-title function_">finally</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;清理操作&#x27;</span>); <span class="hljs-comment">// 输出: 清理操作</span><br>    &#125;);<br></code></pre></td></tr></table></figure><h2 id="Promise类方法"><a href="#Promise类方法" class="headerlink" title="Promise类方法"></a>Promise类方法</h2><p><code>Promise</code> 的类方法提供了用于创建和操作 <code>Promise</code> 实例的多种功能。以下是主要的 <code>Promise</code> 类方法及其描述：</p><h3 id="1-Promise-resolve-value"><a href="#1-Promise-resolve-value" class="headerlink" title="1. Promise.resolve(value)"></a>1. <code>Promise.resolve(value)</code></h3><ul><li><strong>功能</strong>: 返回一个以给定值解析后的 <code>Promise</code> 对象。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise1 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">42</span>);<br>promise1.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)); <span class="hljs-comment">// 输出: 42</span><br></code></pre></td></tr></table></figure><h3 id="2-Promise-reject-reason"><a href="#2-Promise-reject-reason" class="headerlink" title="2. Promise.reject(reason)"></a>2. <code>Promise.reject(reason)</code></h3><ul><li><strong>功能</strong>: 返回一个以给定原因拒绝后的 <code>Promise</code> 对象。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise2 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>);<br>promise2.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error)); <span class="hljs-comment">// 输出: 出错了</span><br></code></pre></td></tr></table></figure><h3 id="3-Promise-all-iterable"><a href="#3-Promise-all-iterable" class="headerlink" title="3. Promise.all(iterable)"></a>3. <code>Promise.all(iterable)</code></h3><ul><li><strong>功能</strong>: 接受一个可迭代对象（如数组），当所有 <code>Promise</code> 都已成功时，返回一个新的 <code>Promise</code>，并解析为一个数组，包含所有 <code>Promise</code> 的结果。如果其中任何一个 <code>Promise</code> 被拒绝，它将立即返回拒绝状态。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise3 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>]);<br><br>promise3.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(values); <span class="hljs-comment">// 输出: [1, 2, 3]</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-Promise-allSettled-iterable"><a href="#4-Promise-allSettled-iterable" class="headerlink" title="4. Promise.allSettled(iterable)"></a>4. <code>Promise.allSettled(iterable)</code></h3><ul><li><strong>功能</strong>: 接受一个可迭代对象，返回一个新的 <code>Promise</code>，当所有 <code>Promise</code> 的状态都已确定时（不论成功还是失败），以数组的形式解析，数组中的每个对象描述了每个 <code>Promise</code> 的结果。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise4 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">allSettled</span>([<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败&#x27;</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>)<br>]);<br><br>promise4.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">results</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>    <span class="hljs-comment">// 输出: [</span><br>    <span class="hljs-comment">//   &#123; status: &#x27;fulfilled&#x27;, value: 1 &#125;,</span><br>    <span class="hljs-comment">//   &#123; status: &#x27;rejected&#x27;, reason: &#x27;失败&#x27; &#125;,</span><br>    <span class="hljs-comment">//   &#123; status: &#x27;fulfilled&#x27;, value: 3 &#125;</span><br>    <span class="hljs-comment">// ]</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="5-Promise-any-iterable"><a href="#5-Promise-any-iterable" class="headerlink" title="5. Promise.any(iterable)"></a>5. <code>Promise.any(iterable)</code></h3><ul><li><strong>功能</strong>: 接受一个可迭代对象，返回一个新的 <code>Promise</code>。只要有一个 <code>Promise</code> 成功，它就会解析为那个成功的值。如果所有 <code>Promise</code> 都被拒绝，则返回一个拒绝的 <code>Promise</code>，其理由是一个 <code>AggregateError</code>。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise5 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">any</span>([<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败1&#x27;</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;失败2&#x27;</span>)<br>]);<br><br>promise5.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// 输出: 3</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-Promise-race-iterable"><a href="#6-Promise-race-iterable" class="headerlink" title="6. Promise.race(iterable)"></a>6. <code>Promise.race(iterable)</code></h3><ul><li><strong>功能</strong>: 接受一个可迭代对象，返回一个新的 <code>Promise</code>，只要有一个 <code>Promise</code> 完成或被拒绝，返回的 <code>Promise</code> 就会返回这个完成或被拒绝的值。</li><li><strong>示例</strong>:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">const</span> promise6 = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;快速完成&#x27;</span>), <span class="hljs-number">100</span>)),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;慢完成&#x27;</span>), <span class="hljs-number">200</span>))<br>]);<br><br>promise6.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// 输出: 快速完成</span><br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="迭代器和生成器"><a href="#迭代器和生成器" class="headerlink" title="迭代器和生成器"></a>迭代器和生成器</h1><h2 id="什么是迭代器"><a href="#什么是迭代器" class="headerlink" title="什么是迭代器"></a>什么是迭代器</h2><p>![[Pasted image 20240816214845.png]]![[Pasted image 20240816214905.png]]![[Pasted image 20240817154234.png]]</p><h2 id="自定义可迭代对象"><a href="#自定义可迭代对象" class="headerlink" title="自定义可迭代对象"></a>自定义可迭代对象</h2><p>![[Pasted image 20240817155356.png]]</p><h2 id="可迭代对象的应用"><a href="#可迭代对象的应用" class="headerlink" title="可迭代对象的应用"></a>可迭代对象的应用</h2><p>![[Pasted image 20240817162522.png]]</p><h2 id="什么是生成器"><a href="#什么是生成器" class="headerlink" title="什么是生成器"></a>什么是生成器</h2><p>![[Pasted image 20240817191031.png]]</p><h2 id="生成器函数参数返回值"><a href="#生成器函数参数返回值" class="headerlink" title="生成器函数参数返回值"></a>生成器函数参数返回值</h2><ul><li>在中间位置直接return</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;结束&#x27;</span>; <span class="hljs-comment">// 在这里返回，终止生成器</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>; <span class="hljs-comment">// 此行不会被执行</span><br>&#125;<br><br><span class="hljs-keyword">const</span> gen = <span class="hljs-title function_">generatorFunction</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 1, done: false &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 2, done: false &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: &#x27;结束&#x27;, done: true &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><ul><li>给函数每次执行的时候传入参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">name1</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部：111&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部：222&#x27;</span>);<br>      <span class="hljs-keyword">const</span> name2 = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;aaaa&quot;</span><br><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部：333&#x27;</span>);<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部：444&#x27;</span>);<br>      <span class="hljs-keyword">const</span> name3 = <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;bbbb&quot;</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部：555&#x27;</span>); <br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;内部：666&#x27;</span>);<br>      <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;cccc&quot;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span><br>    &#125;<br><br>    <span class="hljs-keyword">const</span> bar = <span class="hljs-title function_">foo</span>(<span class="hljs-string">&quot;next1&quot;</span>)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-title function_">next</span>()) <span class="hljs-comment">// &#123;value: &quot;aaaa&quot;, done: false&#125;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;next2&quot;</span>)) <span class="hljs-comment">// &#123;value: &quot;bbbb&quot;, done: false&#125;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;next3&quot;</span>)) <span class="hljs-comment">// &#123;value: &quot;cccc&quot;, done: true&#125;</span><br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="生成器函数提前结束"><a href="#生成器函数提前结束" class="headerlink" title="生成器函数提前结束"></a>生成器函数提前结束</h2><ul><li><ol><li>使用 <code>return</code> 语句</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;结束&#x27;</span>; <span class="hljs-comment">// 提前结束</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>; <span class="hljs-comment">// 不会被执行</span><br>&#125;<br><br><span class="hljs-keyword">const</span> gen = <span class="hljs-title function_">generatorFunction</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 1, done: false &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 2, done: false &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: &#x27;结束&#x27;, done: true &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><ul><li><ol start="2"><li>使用 <code>throw</code> 语句</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e); <span class="hljs-comment">// 捕获错误</span><br>    &#125;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>; <span class="hljs-comment">// 如果被抛出错误，将不会执行</span><br>&#125;<br><br><span class="hljs-keyword">const</span> gen = <span class="hljs-title function_">generatorFunction</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 1, done: false &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 2, done: false &#125;</span><br>gen.<span class="hljs-keyword">throw</span>(<span class="hljs-string">&#x27;捕获错误&#x27;</span>); <span class="hljs-comment">// 输出: 捕获错误</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><ul><li><ol start="3"><li>使用 <code>return</code> 结合 <code>next()</code></li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generatorFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-keyword">const</span> gen = <span class="hljs-title function_">generatorFunction</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: 1, done: false &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-keyword">return</span>(<span class="hljs-string">&#x27;提前结束&#x27;</span>)); <span class="hljs-comment">// 输出: &#123; value: &#x27;提前结束&#x27;, done: true &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>()); <span class="hljs-comment">// 输出: &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><h2 id="生成器替代迭代器"><a href="#生成器替代迭代器" class="headerlink" title="生成器替代迭代器"></a>生成器替代迭代器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">start, end</span>) &#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = start; i &lt;= end; i++) &#123;<br>        <span class="hljs-keyword">yield</span> i<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> gen = <span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gen.<span class="hljs-title function_">next</span>())<br><br>    <span class="hljs-keyword">const</span> names = [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-string">&#x27;David&#x27;</span>]<br>    <span class="hljs-keyword">function</span>* <span class="hljs-title function_">nameGenerator</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">yield</span>* names<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> nameGen = <span class="hljs-title function_">nameGenerator</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameGen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameGen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameGen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameGen.<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="异步处理方案"><a href="#异步处理方案" class="headerlink" title="异步处理方案"></a>异步处理方案</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">     需求：</span><br><span class="hljs-comment">     1、发送一次网络请求，等到这次网络请求的结果</span><br><span class="hljs-comment">     2、再发送一次网络请求，并将这次网络请求的结果作为参数，再次发送网络请求</span><br><span class="hljs-comment">     3、再次发送网络请求，并将这次网络请求的结果作为参数，再次发送网络请求</span><br><span class="hljs-comment">     4、最后一次的网络请求的结果作为最终结果</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-comment">// 异步请求代码结构</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">requestData</span>(<span class="hljs-params">url</span>) &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>       <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>         <span class="hljs-title function_">resolve</span>(url)<br>       &#125;, <span class="hljs-number">2000</span>);<br>     &#125;)<br>   &#125;<br><br>   <span class="hljs-comment">// 方法一：回调地域</span><br>   <span class="hljs-comment">// function getData() &#123;</span><br>   <span class="hljs-comment">//   requestData(&quot;why&quot;).then(res1 =&gt; &#123;</span><br>   <span class="hljs-comment">//     console.log(&quot;第一次结果：&quot;, res1)</span><br>   <span class="hljs-comment">//     requestData(res1 + &quot;aaa&quot;).then(res2 =&gt; &#123;</span><br>   <span class="hljs-comment">//       console.log(&quot;第二次结果：&quot;, res2)</span><br>   <span class="hljs-comment">//       requestData(res2 + &quot;bbb&quot;).then(res3 =&gt; &#123;</span><br>   <span class="hljs-comment">//         console.log(&quot;第三次结果：&quot;, res3)</span><br>   <span class="hljs-comment">//       &#125;)</span><br>   <span class="hljs-comment">//     &#125;)</span><br>   <span class="hljs-comment">//   &#125;)</span><br>   <span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">// 方法二：使用Promise进行重构（解决回调地狱）</span><br>   <span class="hljs-comment">// function getData() &#123;</span><br>   <span class="hljs-comment">//   requestData(&quot;why&quot;).then(res1 =&gt; &#123;</span><br>   <span class="hljs-comment">//     console.log(&quot;第一次结果：&quot;, res1)</span><br>   <span class="hljs-comment">//     return requestData(res1 + &quot;aaa&quot;)</span><br>   <span class="hljs-comment">//   &#125;).then(res2 =&gt; &#123;</span><br>   <span class="hljs-comment">//     console.log(&quot;第二次结果：&quot;, res2)</span><br>   <span class="hljs-comment">//     return requestData(res2 + &quot;bbb&quot;)</span><br>   <span class="hljs-comment">//   &#125;).then(res3 =&gt; &#123;</span><br>   <span class="hljs-comment">//     console.log(&quot;第三次结果：&quot;, res3)</span><br>   <span class="hljs-comment">//     requestData(res3 + &quot;ccc&quot;)</span><br>   <span class="hljs-comment">//   &#125;)</span><br>   <span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">// 方法三：使用生成器进行重构</span><br>   <span class="hljs-comment">// function* getData() &#123;</span><br>   <span class="hljs-comment">//   const res1 = yield requestData(&quot;why&quot;)</span><br>   <span class="hljs-comment">//   console.log(&quot;第一次结果：&quot;, res1)</span><br>   <span class="hljs-comment">//   const res2 = yield requestData(res1 + &quot;aaa&quot;)</span><br>   <span class="hljs-comment">//   console.log(&quot;第二次结果：&quot;, res2)</span><br>   <span class="hljs-comment">//   const res3 = yield requestData(res2 + &quot;bbb&quot;)</span><br>   <span class="hljs-comment">//   console.log(&quot;第三次结果：&quot;, res3)</span><br>   <span class="hljs-comment">// &#125;</span><br><br>   <span class="hljs-comment">// const gen = getData()</span><br>   <span class="hljs-comment">// gen.next().value.then(res1 =&gt; &#123;</span><br>   <span class="hljs-comment">//   gen.next(res1).value.then(res2 =&gt; &#123;</span><br>   <span class="hljs-comment">//     gen.next(res2).value.then(res3 =&gt; &#123;</span><br>   <span class="hljs-comment">//       gen.next(res3)</span><br>   <span class="hljs-comment">//     &#125;)</span><br>   <span class="hljs-comment">//   &#125;)</span><br>   <span class="hljs-comment">// &#125;)</span><br><br>   <span class="hljs-comment">// 方法四：使用async/await进行重构</span><br>     <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">const</span> res1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestData</span>(<span class="hljs-string">&quot;why&quot;</span>)<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第一次结果：&quot;</span>, res1)<br>       <span class="hljs-keyword">const</span> res2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestData</span>(res1 + <span class="hljs-string">&quot;aaa&quot;</span>)<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第二次结果：&quot;</span>, res2)<br>       <span class="hljs-keyword">const</span> res3 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestData</span>(res2 + <span class="hljs-string">&quot;bbb&quot;</span>)<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;第三次结果：&quot;</span>, res3)<br>     &#125;<br>   <span class="hljs-title function_">getData</span>()<br><br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="async、await-队列"><a href="#async、await-队列" class="headerlink" title="async、await - 队列"></a>async、await - 队列</h1><h2 id="异步函数async-function"><a href="#异步函数async-function" class="headerlink" title="异步函数async function"></a>异步函数async function</h2><ul><li></li></ul><h2 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h2><p>![[Pasted image 20240819154154.png]]<br>处理异步请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">requestData</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">reject</span>(<span class="hljs-string">&quot;error message&quot;</span>)<br>      &#125;, <span class="hljs-number">2000</span>);<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> res1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestData</span>(<span class="hljs-string">&quot;why&quot;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1)<br>    <span class="hljs-keyword">const</span> res2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">requestData</span>(<span class="hljs-string">&quot;how&quot;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2)<br>  &#125;<br><br>  <span class="hljs-title function_">getData</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  &#125;)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>![[Pasted image 20240819193235.png]]</p><h2 id="浏览器中的JavaScript线程"><a href="#浏览器中的JavaScript线程" class="headerlink" title="浏览器中的JavaScript线程"></a>浏览器中的JavaScript线程</h2><p>![[Pasted image 20240819205046.png]]</p><h2 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h2><p>![[Pasted image 20240819205801.png]]</p><h2 id="微任务和宏任务"><a href="#微任务和宏任务" class="headerlink" title="微任务和宏任务"></a>微任务和宏任务</h2><p>![[Pasted image 20240819210919.png]]</p><h2 id="Promise面试题"><a href="#Promise面试题" class="headerlink" title="Promise面试题"></a>Promise面试题</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;script start&quot;</span>)<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout1&quot;</span>)<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>()<br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>          <span class="hljs-title function_">resolve</span>()<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;then4&quot;</span>)<br>        &#125;)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;then2&quot;</span>)<br>      &#125;)<br>    &#125;)<br>    <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;promise1&quot;</span>)<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;then1&quot;</span>)<br>    &#125;)<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;setTimeout2&quot;</span>)<br>    &#125;)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br><br>    <span class="hljs-title function_">queueMicrotask</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;queueMicrotask1&quot;</span>)<br>    &#125;)<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;then3&quot;</span>)<br>    &#125;)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;script end&quot;</span>)<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     代码执行顺序：</span><br><span class="hljs-comment">      script start</span><br><span class="hljs-comment">      promise1</span><br><span class="hljs-comment">      2</span><br><span class="hljs-comment">      script end</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      then1</span><br><span class="hljs-comment">      queueMicrotask1</span><br><span class="hljs-comment">      then3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      setTimeout1</span><br><span class="hljs-comment">      then2</span><br><span class="hljs-comment">      then4</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      setTimeout2</span><br><span class="hljs-comment">    */</span><br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async1</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 start&#x27;</span>)<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">async2</span>()<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">async2</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;async2&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>)<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>)<br>    &#125;, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-title function_">async1</span>()<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span> (<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>      <span class="hljs-title function_">resolve</span>()<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>)<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      代码执行顺序：</span><br><span class="hljs-comment">      script start</span><br><span class="hljs-comment">      async1 start</span><br><span class="hljs-comment">      async2</span><br><span class="hljs-comment">      promise1</span><br><span class="hljs-comment">      script end</span><br><span class="hljs-comment">      async1 end</span><br><span class="hljs-comment">      promise2</span><br><span class="hljs-comment">      setTimeout</span><br><span class="hljs-comment">    */</span><br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h3><p>![[Pasted image 20240820191231.png]]</p><h3 id="Error类型"><a href="#Error类型" class="headerlink" title="Error类型"></a>Error类型</h3><p>![[Pasted image 20240820191257.png]]<br>![[Pasted image 20240820191347.png]]</p><h3 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h3><p>![[Pasted image 20240820191801.png]]</p><h1 id="Storage和正则表达式"><a href="#Storage和正则表达式" class="headerlink" title="Storage和正则表达式"></a>Storage和正则表达式</h1><h2 id="认识Storage"><a href="#认识Storage" class="headerlink" title="认识Storage"></a>认识Storage</h2><p>![[Pasted image 20240821160128.png]]</p><h3 id="Storage的基本使用"><a href="#Storage的基本使用" class="headerlink" title="Storage的基本使用"></a>Storage的基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-comment">// token操作</span><br>    <span class="hljs-keyword">let</span> token = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>)<br>    <span class="hljs-keyword">if</span>(!token) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;从服务器获取token&quot;</span>)<br>      token = <span class="hljs-string">&quot;aaaaaaaaa&quot;</span><br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;token&quot;</span>, token)<br>    &#125;<br><br>    <span class="hljs-comment">// 用户名和密码操作</span><br>    <span class="hljs-keyword">let</span> username = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;username&quot;</span>)<br>    <span class="hljs-keyword">let</span> password = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;password&quot;</span>)<br>    <span class="hljs-keyword">if</span>(!username || !password) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;从服务器获取用户名和密码&quot;</span>)<br>      username = <span class="hljs-string">&quot;admin&quot;</span><br>      password = <span class="hljs-string">&quot;123456&quot;</span><br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;username&quot;</span>, username)<br>      <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;password&quot;</span>, password)<br>    &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="localStorage和sessionStorage的区别"><a href="#localStorage和sessionStorage的区别" class="headerlink" title="localStorage和sessionStorage的区别"></a>localStorage和sessionStorage的区别</h3><p>![[Pasted image 20240821160903.png]]</p><h3 id="Storage工具封装"><a href="#Storage工具封装" class="headerlink" title="Storage工具封装"></a>Storage工具封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">isLoacl = <span class="hljs-literal">true</span></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span> = isLocal ? <span class="hljs-variable language_">localStorage</span> : <span class="hljs-variable language_">sessionStorage</span><br>  &#125;<br><br>  <span class="hljs-title function_">setCache</span>(<span class="hljs-params">key, value</span>) &#123;<br>    <span class="hljs-keyword">if</span>(!value) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;value error: value 必须有值&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(value) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>.<span class="hljs-title function_">setItem</span>(key, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(value))<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">getCache</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>.<span class="hljs-title function_">getItem</span>(key)<br>    <span class="hljs-keyword">if</span> (res) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-title function_">removeCache</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>.<span class="hljs-title function_">removeItem</span>(key)<br>  &#125;<br><br>  <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storage</span>.<span class="hljs-title function_">clear</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> localCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>(<span class="hljs-literal">true</span>)<br><span class="hljs-keyword">const</span> sessionCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><ul><li>使用单个字符串来描述、匹配一系列句法规则的字符串，是一种字符串匹配利器，可以帮助我们搜索、获取、替代字符串</li><li>正则表达式主要由两部分组成：模式和修饰符![[Pasted image 20240821170906.png]]</li></ul><h3 id="正则表达式的使用方法"><a href="#正则表达式的使用方法" class="headerlink" title="正则表达式的使用方法"></a>正则表达式的使用方法</h3><ul><li>JavaScript的正则表达式被用于RegExp的exec和test方法，String的match、matchAll、replace、search、split方法![[Pasted image 20240821172016.png]]![[Pasted image 20240821173022.png]]<br> ![[Pasted image 20240821173046.png]]</li></ul><h3 id="修饰符flag的使用"><a href="#修饰符flag的使用" class="headerlink" title="修饰符flag的使用"></a>修饰符flag的使用</h3><p>![[Pasted image 20240821173451.png]]</p><h3 id="正则表达式规则"><a href="#正则表达式规则" class="headerlink" title="正则表达式规则"></a>正则表达式规则</h3><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p>![[Pasted image 20240821174044.png]]</p><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>![[Pasted image 20240821182149.png]]</p><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>![[Pasted image 20240821193427.png]]</p><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p>![[Pasted image 20240821193816.png]]</p><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><p>![[Pasted image 20240821195144.png]]<br>![[Pasted image 20240821195046.png]]</p><h4 id="贪婪和惰性"><a href="#贪婪和惰性" class="headerlink" title="贪婪和惰性"></a>贪婪和惰性</h4><p>![[Pasted image 20240821200334.png]]<br>![[Pasted image 20240821200355.png]]</p><h4 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h4><p>![[Pasted image 20240821201218.png]]<br>![[Pasted image 20240821201443.png]]<br>![[Pasted image 20240821201509.png]]</p><h4 id="正则练习-歌词解析"><a href="#正则练习-歌词解析" class="headerlink" title="正则练习-歌词解析"></a>正则练习-歌词解析</h4><p>![[Pasted image 20240822152859.png]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseLyric</span>(<span class="hljs-params">lyricstring</span>) &#123;<br>  <span class="hljs-comment">// 根据\n切割字符串</span><br>  <span class="hljs-keyword">const</span> lyricLineStrings = lyricstring.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br>  <span class="hljs-comment">// console.log(lyricLineStrings)</span><br><br>  <span class="hljs-comment">// 根据每一行歌词进行解析</span><br>  <span class="hljs-keyword">const</span> timeRe = <span class="hljs-regexp">/\[(\d&#123;2&#125;):(\d&#123;2&#125;)\.(\d&#123;2,3&#125;)\]/i</span><br>  <span class="hljs-keyword">const</span> lyricInfos = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> lineString <span class="hljs-keyword">of</span> lyricLineStrings) &#123;<br>    <span class="hljs-comment">// 获取时间</span><br>    <span class="hljs-keyword">const</span> result = lineString.<span class="hljs-title function_">match</span>(timeRe)<br>    <span class="hljs-keyword">if</span>(!result) <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">const</span> minuteTime = result[<span class="hljs-number">1</span>] * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">const</span> secondTime = result[<span class="hljs-number">2</span>] * <span class="hljs-number">1000</span><br>    <span class="hljs-keyword">const</span> millisecondTime = result[<span class="hljs-number">3</span>].<span class="hljs-property">length</span> === <span class="hljs-number">3</span>? result[<span class="hljs-number">3</span>] : result[<span class="hljs-number">3</span>] * <span class="hljs-number">10</span><br>    <span class="hljs-keyword">const</span> time = minuteTime + secondTime + millisecondTime<br><br>    <span class="hljs-comment">// 获取歌词</span><br>    <span class="hljs-keyword">const</span> content = lineString.<span class="hljs-title function_">replace</span>(timeRe, <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">trim</span>()<br><br>    <span class="hljs-comment">// 保存歌词信息</span><br>    lyricInfos.<span class="hljs-title function_">push</span>(&#123;<br>      time,<br>      content <br>    &#125;)<br>  &#125;<br><br>    <span class="hljs-keyword">return</span> lyricInfos<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="正则练习-时间格式化"><a href="#正则练习-时间格式化" class="headerlink" title="正则练习-时间格式化"></a>正则练习-时间格式化</h4><p>![[Pasted image 20240822161914.png]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h2 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;&lt;/h2&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">formatTime</span>(<span class="hljs-params">timestamp, fmtString</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 将时间戳转化为Date</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(timestamp)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 将正则和值匹配</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> dateO = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;y+&quot;</span>: date.<span class="hljs-title function_">getFullYear</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;M+&quot;</span>: date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;d+&quot;</span>: date.<span class="hljs-title function_">getDate</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;h+&quot;</span>: date.<span class="hljs-title function_">getHours</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;m+&quot;</span>: date.<span class="hljs-title function_">getMinutes</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-string">&quot;s+&quot;</span>: date.<span class="hljs-title function_">getSeconds</span>(),</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> dateO) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> keyRe = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(key) <span class="hljs-comment">// 构造正则表达式</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 如果正则表达式匹配到fmtString中，则替换</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span>(keyRe.<span class="hljs-title function_">test</span>(fmtString)) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">const</span> value = (dateO[key] + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-comment">// 补零</span></span></span><br><span class="language-javascript"><span class="language-xml">          fmtString = fmtString.<span class="hljs-title function_">replace</span>(keyRe, value) <span class="hljs-comment">// 替换</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> fmtString</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> timeEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.time&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> productJSON = &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      name : <span class="hljs-string">&quot;iphone&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      newPrice : <span class="hljs-number">10000</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      oldPrice : <span class="hljs-number">8000</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      endTime : <span class="hljs-number">1659252290626</span> </span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    timeEl.<span class="hljs-property">textContent</span> = <span class="hljs-title function_">formatTime</span>(productJSON.<span class="hljs-property">endTime</span>, <span class="hljs-string">&quot;yyyy/MM/dd hh:mm:ss&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="防抖、节流、深拷贝、事件总线"><a href="#防抖、节流、深拷贝、事件总线" class="headerlink" title="防抖、节流、深拷贝、事件总线"></a>防抖、节流、深拷贝、事件总线</h1><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><h3 id="认识防抖debounce函数"><a href="#认识防抖debounce函数" class="headerlink" title="认识防抖debounce函数"></a>认识防抖debounce函数</h3><p>![[Pasted image 20240822171403.png]]</p><h3 id="手动实现防抖函数"><a href="#手动实现防抖函数" class="headerlink" title="手动实现防抖函数"></a>手动实现防抖函数</h3><ul><li>基本实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>      <span class="hljs-keyword">const</span> <span class="hljs-title function_">_debounce</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          <span class="hljs-title function_">fn</span>()<br>          timer = <span class="hljs-literal">null</span><br>        &#125;, delay)<br>      &#125;<br>      <span class="hljs-keyword">return</span> _debounce<br>    &#125;<br>  &lt;/script&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> cnt = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;cnt++&#125;</span>次输入`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>绑定this</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>      <span class="hljs-keyword">const</span> _debounce = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args) <span class="hljs-comment">//这里的this绑定到inputEl</span><br>          timer = <span class="hljs-literal">null</span><br>        &#125;, delay)<br>      &#125;<br>      <span class="hljs-keyword">return</span> _debounce<br>    &#125;<br>  &lt;/script&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> cnt = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;cnt++&#125;</span>次输入`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>实现取消功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>      <span class="hljs-comment">// 用于记录上一次事件触发的timer</span><br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>      <span class="hljs-comment">// 触发事件时执行的函数</span><br>      <span class="hljs-keyword">const</span> _debounce = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-comment">// 如果有再次触发事件，那么取消上一次的事件</span><br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br><br>        <span class="hljs-comment">// 延迟去执行对应 fn函数</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args) <span class="hljs-comment">//这里的this绑定到inputEl</span><br>          timer = <span class="hljs-literal">null</span><br>        &#125;, delay)<br>      &#125;<br><br>      <span class="hljs-comment">// 给_debounce添加一个cancel方法，用于取消防抖</span><br>      _debounce.<span class="hljs-property">cancel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _debounce<br>    &#125;<br>  &lt;/script&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> cnt = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;cnt++&#125;</span>次输入`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>立即执行功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-params">fn, delay, immediate = <span class="hljs-literal">true</span></span>) &#123;<br>      <span class="hljs-comment">// 用于记录上一次事件触发的timer</span><br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>      <span class="hljs-keyword">let</span> isInvoke = <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否立即执行</span><br><br>      <span class="hljs-comment">// 触发事件时执行的函数</span><br>      <span class="hljs-keyword">const</span> _debounce = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-comment">// 如果有再次触发事件，那么取消上一次的事件</span><br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br><br>        <span class="hljs-comment">// 如果是立即执行，那么立即执行对应 fn函数</span><br>        <span class="hljs-keyword">if</span>(immediate &amp;&amp; !isInvoke) &#123;<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>          isInvoke = <span class="hljs-literal">true</span><br>          <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-comment">// 延迟去执行对应 fn函数</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args) <span class="hljs-comment">//这里的this绑定到inputEl</span><br>          <span class="hljs-comment">// 重置timer和isInvoke</span><br>          timer = <span class="hljs-literal">null</span><br>          isInvoke = <span class="hljs-literal">false</span><br>        &#125;, delay)<br>      &#125;<br><br>      <span class="hljs-comment">// 给_debounce添加一个cancel方法，用于取消防抖</span><br>      _debounce.<span class="hljs-property">cancel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>        <span class="hljs-comment">// 重置timer和isInvoke</span><br>        timer = <span class="hljs-literal">null</span><br>        isInvoke = <span class="hljs-literal">false</span><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _debounce<br>    &#125;<br>  &lt;/script&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> cnt = <span class="hljs-number">1</span></span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第<span class="hljs-subst">$&#123;cnt++&#125;</span>次输入:`</span>, <span class="hljs-variable language_">this</span>, event)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>获取返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-params">fn, delay, immediate = <span class="hljs-literal">true</span>, resultCallback</span>) &#123;<br>      <span class="hljs-comment">// 用于记录上一次事件触发的timer</span><br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br>      <span class="hljs-keyword">let</span> isInvoke = <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否立即执行</span><br><br>      <span class="hljs-comment">// 触发事件时执行的函数</span><br>      <span class="hljs-keyword">const</span> _debounce = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 如果有再次触发事件，那么取消上一次的事件</span><br>                <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br><br>                <span class="hljs-keyword">let</span> res = <span class="hljs-literal">undefined</span><br>                <span class="hljs-comment">// 如果是立即执行，那么立即执行对应 fn函数</span><br>                <span class="hljs-keyword">if</span>(immediate &amp;&amp; !isInvoke) &#123;<br>                  res = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>                  <span class="hljs-keyword">if</span> (resultCallback) <span class="hljs-title function_">resultCallback</span>(res)<br>                  <span class="hljs-title function_">resolve</span>(res)<br>                  isInvoke = <span class="hljs-literal">true</span><br>                  <span class="hljs-keyword">return</span><br>                &#125;<br><br>                <span class="hljs-comment">// 延迟去执行对应 fn函数</span><br>                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                  res = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args) <span class="hljs-comment">//这里的this绑定到inputEl</span><br>                  <span class="hljs-keyword">if</span> (resultCallback) <span class="hljs-title function_">resultCallback</span>(res)<br>                  <span class="hljs-title function_">resolve</span>(res)<br>                  <span class="hljs-comment">// 重置timer和isInvoke</span><br>                  timer = <span class="hljs-literal">null</span><br>                  isInvoke = <span class="hljs-literal">false</span><br>                &#125;, delay);<br>              &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-title function_">reject</span>(error)<br>              &#125;<br>            &#125;)<br>          &#125;<br>          <span class="hljs-comment">// 给_debounce添加一个cancel方法，用于取消防抖</span><br>        _debounce.<span class="hljs-property">cancel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>            <span class="hljs-comment">// 重置timer和isInvoke</span><br>            timer = <span class="hljs-literal">null</span><br>             isInvoke = <span class="hljs-literal">false</span><br>        &#125;<br>      <span class="hljs-keyword">return</span> _debounce<br>    &#125;<br>  &lt;/script&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> myDebounce = <span class="hljs-title function_">yy_debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">name, age, height</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`name: <span class="hljs-subst">$&#123;name&#125;</span>, age: <span class="hljs-subst">$&#123;age&#125;</span>, height: <span class="hljs-subst">$&#123;height&#125;</span>`</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jojo&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>, <span class="hljs-literal">false</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">myDebounce</span>(<span class="hljs-string">&quot;jojo&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1.80</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>可以用underscore库</p><h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><h3 id="认识节流throttle函数"><a href="#认识节流throttle函数" class="headerlink" title="认识节流throttle函数"></a>认识节流throttle函数</h3><p>![[Pasted image 20240825101157.png]]</p><h3 id="手动实现节流函数"><a href="#手动实现节流函数" class="headerlink" title="手动实现节流函数"></a>手动实现节流函数</h3><ul><li>实现思路<br>![[Pasted image 20240825103812.png]]</li><li>基本实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-params">fn, interval</span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-number">0</span><br><br>      <span class="hljs-keyword">const</span> _throttle = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> noeTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>        <span class="hljs-keyword">const</span> waitTime = interval - (noeTime - startTime)<br>        <span class="hljs-keyword">if</span>(waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-title function_">fn</span>()<br>          startTime = noeTime<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _throttle<br>    &#125;<br><br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>this绑定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-params">fn, interval</span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-number">0</span><br><br>      <span class="hljs-keyword">const</span> _throttle = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> noeTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>        <span class="hljs-keyword">const</span> waitTime = interval - (noeTime - startTime)<br>        <span class="hljs-keyword">if</span>(waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>          startTime = noeTime<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _throttle<br>    &#125;<br><br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;input:&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, event)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>控制立即执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-params">fn, interval, leading = <span class="hljs-literal">false</span></span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-number">0</span><br><br>      <span class="hljs-keyword">const</span> _throttle = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-comment">// 获取当前时间</span><br>        <span class="hljs-keyword">const</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br><br>        <span class="hljs-comment">// 对立即执行函数进行控制</span><br>        <span class="hljs-keyword">if</span>(!leading &amp;&amp; startTime === <span class="hljs-number">0</span>) &#123;<br>          startTime = nowTime<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> waitTime = interval - (nowTime - startTime)<br>        <span class="hljs-keyword">if</span>(waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>          startTime = nowTime<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _throttle<br>    &#125;<br><br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;input:&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, event)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>尾部执行控制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-params">fn, interval, &#123;leading = <span class="hljs-literal">false</span>, trailing = <span class="hljs-literal">true</span>&#125; = &#123;&#125;</span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>      <span class="hljs-keyword">const</span> _throttle = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-comment">// 获取当前时间</span><br>        <span class="hljs-keyword">const</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br><br>        <span class="hljs-comment">// 对立即执行函数进行控制</span><br>        <span class="hljs-keyword">if</span>(!leading &amp;&amp; startTime === <span class="hljs-number">0</span>) &#123;<br>          startTime = nowTime<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> waitTime = interval - (nowTime - startTime)<br>        <span class="hljs-keyword">if</span>(waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">if</span> (timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>          startTime = nowTime<br>          timer = <span class="hljs-literal">null</span><br>          <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-comment">// 节流函数尾部执行控制</span><br>        <span class="hljs-keyword">if</span> (trailing &amp;&amp; !timer) &#123;<br>          timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>            startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>            timer = <span class="hljs-literal">null</span><br>          &#125;, waitTime)<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _throttle<br>    &#125;<br><br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;input:&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, event)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>, &#123;<span class="hljs-attr">trailing</span>: <span class="hljs-literal">true</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>取消尾部功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-params">fn, interval, &#123;leading = <span class="hljs-literal">false</span>, trailing = <span class="hljs-literal">true</span>&#125; = &#123;&#125;</span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>      <span class="hljs-keyword">const</span> _throttle = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-comment">// 获取当前时间</span><br>        <span class="hljs-keyword">const</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br><br>        <span class="hljs-comment">// 对立即执行函数进行控制</span><br>        <span class="hljs-keyword">if</span>(!leading &amp;&amp; startTime === <span class="hljs-number">0</span>) &#123;<br>          startTime = nowTime<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> waitTime = interval - (nowTime - startTime)<br>        <span class="hljs-keyword">if</span>(waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-keyword">if</span> (timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>          fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>          startTime = nowTime<br>          timer = <span class="hljs-literal">null</span><br>          <span class="hljs-keyword">return</span><br>        &#125;<br><br>        <span class="hljs-comment">// 节流函数尾部执行控制</span><br>        <span class="hljs-keyword">if</span> (trailing &amp;&amp; !timer) &#123;<br>          timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>            startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>            timer = <span class="hljs-literal">null</span><br>          &#125;, waitTime)<br>        &#125;<br>      &#125;<br><br>      _throttle.<span class="hljs-property">cancel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>        startTime = <span class="hljs-number">0</span><br>        timer = <span class="hljs-literal">null</span><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _throttle<br>    &#125;<br><br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> buttonEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;input:&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, event)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>, &#123;<span class="hljs-attr">trailing</span>: <span class="hljs-literal">true</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    buttonEl.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      inputEl.<span class="hljs-property">oninput</span>.<span class="hljs-title function_">cancel</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>获取返回值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-params">fn, interval, &#123;leading = <span class="hljs-literal">false</span>, trailing = <span class="hljs-literal">true</span>&#125; = &#123;&#125;</span>) &#123;<br>      <span class="hljs-keyword">let</span> startTime = <span class="hljs-number">0</span><br>      <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span><br><br>      <span class="hljs-keyword">const</span> _throttle = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-comment">// 获取当前时间</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> nowTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br><br>            <span class="hljs-comment">// 对立即执行函数进行控制</span><br>            <span class="hljs-keyword">if</span>(!leading &amp;&amp; startTime === <span class="hljs-number">0</span>) &#123;<br>              startTime = nowTime<br>            &#125;<br><br>            <span class="hljs-keyword">const</span> waitTime = interval - (nowTime - startTime)<br>            <span class="hljs-keyword">if</span>(waitTime &lt;= <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-keyword">if</span> (timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>              <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>              <span class="hljs-title function_">resolve</span>(res)<br>              startTime = nowTime<br>              timer = <span class="hljs-literal">null</span><br>              <span class="hljs-keyword">return</span><br>            &#125;<br><br>            <span class="hljs-comment">// 节流函数尾部执行控制</span><br>            <span class="hljs-keyword">if</span> (trailing &amp;&amp; !timer) &#123;<br>              timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> res = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>                <span class="hljs-title function_">resolve</span>(res)<br>                startTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()<br>                timer = <span class="hljs-literal">null</span><br>              &#125;, waitTime);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">catch</span> (error) &#123;<br>            <span class="hljs-title function_">reject</span>(error)<br>          &#125;<br>        &#125;)<br>      &#125;<br><br>      _throttle.<span class="hljs-property">cancel</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(timer) <span class="hljs-built_in">clearTimeout</span>(timer)<br>        startTime = <span class="hljs-number">0</span><br>        timer = <span class="hljs-literal">null</span><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> _throttle<br>    &#125;<br><br>  &lt;/script&gt;<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> inputEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">const</span> buttonEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    inputEl.<span class="hljs-property">oninput</span> = <span class="hljs-title function_">yy_throttle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;input:&#x27;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, event)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jojo&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;, <span class="hljs-number">1000</span>, &#123;<span class="hljs-attr">trailing</span>: <span class="hljs-literal">true</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span></span><br><span class="language-javascript"><span class="language-xml">    buttonEl.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      inputEl.<span class="hljs-property">oninput</span>.<span class="hljs-title function_">cancel</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><ul><li>深拷贝函数的基本使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">const</span> objType = <span class="hljs-keyword">typeof</span> obj<br>      <span class="hljs-keyword">return</span> (obj !== <span class="hljs-literal">null</span>) &amp;&amp; (objType === <span class="hljs-string">&quot;object&quot;</span> || objType === <span class="hljs-string">&quot;function&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 深拷贝函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">isObject</span>(obj)) &#123;<br>        <span class="hljs-keyword">return</span> obj<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> newObj = &#123;&#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        newObj[key] = <span class="hljs-title function_">deepCopy</span>(obj[key])<br>      &#125;<br>      <span class="hljs-keyword">return</span> newObj<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> info = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jojo&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">friend</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小羊&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>        <span class="hljs-attr">address</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>          <span class="hljs-attr">detail</span>: <span class="hljs-string">&quot;成都市&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> newObj = <span class="hljs-title function_">deepCopy</span>(info)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>区分数组与对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">const</span> objType = <span class="hljs-keyword">typeof</span> obj<br>      <span class="hljs-keyword">return</span> (obj !== <span class="hljs-literal">null</span>) &amp;&amp; (objType === <span class="hljs-string">&quot;object&quot;</span> || objType === <span class="hljs-string">&quot;function&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 深拷贝函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">isObject</span>(obj)) &#123;<br>        <span class="hljs-keyword">return</span> obj<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> newObj = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        newObj[key] = <span class="hljs-title function_">deepCopy</span>(obj[key])<br>      &#125;<br>      <span class="hljs-keyword">return</span> newObj<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> info = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jojo&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">friend</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小羊&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>        <span class="hljs-attr">address</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>          <span class="hljs-attr">detail</span>: <span class="hljs-string">&quot;成都市&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">cnt</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> newObj = <span class="hljs-title function_">deepCopy</span>(info)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>其他类型处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">const</span> objType = <span class="hljs-keyword">typeof</span> obj<br>      <span class="hljs-keyword">return</span> (obj !== <span class="hljs-literal">null</span>) &amp;&amp; (objType === <span class="hljs-string">&quot;object&quot;</span> || objType === <span class="hljs-string">&quot;function&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 深拷贝函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">obj</span>) &#123;<br><br>      <span class="hljs-comment">// symbol类型</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;symbol&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Symbol</span>(obj.<span class="hljs-property">description</span>)<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">isObject</span>(obj)) &#123;<br>        <span class="hljs-keyword">return</span> obj<br>      &#125;<br><br>      <span class="hljs-comment">// set类型</span><br>      <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Set</span>) &#123;<br>        <span class="hljs-keyword">const</span> newSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> setItem <span class="hljs-keyword">of</span> obj) &#123;<br>          newSet.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">deepCopy</span>(setItem))<br>        &#125;<br>        <span class="hljs-keyword">return</span> newSet<br>      &#125;<br><br>      <span class="hljs-comment">// function类型,不需要深拷贝</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> obj<br>      &#125;<br><br>      <span class="hljs-comment">// key为symbol类型</span><br>      <span class="hljs-keyword">const</span> symbolKeys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> symbolKey <span class="hljs-keyword">of</span> symbolKeys) &#123;<br>        obj[symbolKey] = <span class="hljs-title function_">deepCopy</span>(obj[symbolKey])<br>      &#125;<br><br>      <span class="hljs-comment">// 如果是对象类型</span><br>      <span class="hljs-keyword">const</span> newObj = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125;<br>      map.<span class="hljs-title function_">set</span>(obj, newObj)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        newObj[key] = <span class="hljs-title function_">deepCopy</span>(obj[key])<br>      &#125;<br>      <span class="hljs-keyword">return</span> newObj<br>    &#125;<br><br><br>    <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">const</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;s1&quot;</span>)<br>    <span class="hljs-keyword">const</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;s2&quot;</span>)<br>    <span class="hljs-keyword">const</span> info = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jojo&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">friend</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小羊&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>        <span class="hljs-attr">address</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>          <span class="hljs-attr">detail</span>: <span class="hljs-string">&quot;成都市&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">cnt</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>      &#125;,<br>      <span class="hljs-attr">set</span>: set,<br>      <span class="hljs-attr">running</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;running&quot;</span>)<br>      &#125;,<br>      <span class="hljs-attr">symbolKey</span>: <span class="hljs-title class_">Symbol</span>,<br>      <br>      [s1]: <span class="hljs-string">&quot;s1&quot;</span>,<br>      [s2]: <span class="hljs-string">&quot;s2&quot;</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">const</span> newObj = <span class="hljs-title function_">deepCopy</span>(info)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>函数的循环引用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">obj</span>) &#123;<br>      <span class="hljs-keyword">const</span> objType = <span class="hljs-keyword">typeof</span> obj<br>      <span class="hljs-keyword">return</span> (obj !== <span class="hljs-literal">null</span>) &amp;&amp; (objType === <span class="hljs-string">&quot;object&quot;</span> || objType === <span class="hljs-string">&quot;function&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 深拷贝函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">obj, map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">WeakMap</span>()</span>) &#123;<br><br>      <span class="hljs-comment">// symbol类型</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;symbol&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Symbol</span>(obj.<span class="hljs-property">description</span>)<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">isObject</span>(obj)) &#123;<br>        <span class="hljs-keyword">return</span> obj<br>      &#125;<br><br>      <span class="hljs-comment">// set类型</span><br>      <span class="hljs-keyword">if</span>(obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Set</span>) &#123;<br>        <span class="hljs-keyword">const</span> newSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> setItem <span class="hljs-keyword">of</span> obj) &#123;<br>          newSet.<span class="hljs-title function_">add</span>(<span class="hljs-title function_">deepCopy</span>(setItem))<br>        &#125;<br>        <span class="hljs-keyword">return</span> newSet<br>      &#125;<br><br>      <span class="hljs-comment">// function类型,不需要深拷贝</span><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&quot;function&quot;</span>) &#123;<br>        <span class="hljs-keyword">return</span> obj<br>      &#125;<br><br>      <span class="hljs-comment">// key为symbol类型</span><br>      <span class="hljs-keyword">const</span> symbolKeys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> symbolKey <span class="hljs-keyword">of</span> symbolKeys) &#123;<br>        obj[symbolKey] = <span class="hljs-title function_">deepCopy</span>(obj[symbolKey], map)<br>      &#125;<br><br>      <span class="hljs-comment">// 如果是对象类型</span><br>      <span class="hljs-keyword">if</span>(map.<span class="hljs-title function_">get</span>(obj)) &#123;<br>        <span class="hljs-keyword">return</span> map.<span class="hljs-title function_">get</span>(obj)<br>      &#125;<br>      <span class="hljs-keyword">const</span> newObj = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(obj) ? [] : &#123;&#125;<br>      map.<span class="hljs-title function_">set</span>(obj, newObj)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        newObj[key] = <span class="hljs-title function_">deepCopy</span>(obj[key], map)<br>      &#125;<br>      <span class="hljs-keyword">return</span> newObj<br>    &#125;<br><br><br>    <span class="hljs-keyword">const</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">const</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;s1&quot;</span>)<br>    <span class="hljs-keyword">const</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;s2&quot;</span>)<br>    <span class="hljs-keyword">const</span> info = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;jojo&quot;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>,<br>      <span class="hljs-attr">friend</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;小羊&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">19</span>,<br>        <span class="hljs-attr">address</span>: &#123;<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;四川&quot;</span>,<br>          <span class="hljs-attr">detail</span>: <span class="hljs-string">&quot;成都市&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">cnt</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>      &#125;,<br>      <span class="hljs-attr">set</span>: set,<br>      <span class="hljs-attr">running</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;running&quot;</span>)<br>      &#125;,<br>      <span class="hljs-attr">symbolKey</span>: <span class="hljs-title class_">Symbol</span>,<br>      <br>      [s1]: <span class="hljs-string">&quot;s1&quot;</span>,<br>      [s2]: <span class="hljs-string">&quot;s2&quot;</span><br>    &#125;<br><br>    info.<span class="hljs-property">self</span> = info<br><br>    <span class="hljs-keyword">const</span> newObj = <span class="hljs-title function_">deepCopy</span>(info)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newObj)<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><ul><li>实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">yy_EventBus</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 用于存储所有注册的事件及其对应的回调函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span> = &#123;&#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 注册事件监听器</span><br>  <span class="hljs-title function_">on</span>(<span class="hljs-params">eventName, eventFn</span>) &#123;<br>    <span class="hljs-comment">// 获取指定事件名称下的回调函数列表</span><br>    <span class="hljs-keyword">let</span> eventFns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[eventName]<br>    <span class="hljs-comment">// 如果列表不存在,则创建一个新的列表</span><br>    <span class="hljs-keyword">if</span>(!eventFns) &#123;<br>      eventFns = []<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[eventName] = eventFns<br>    &#125;<br>    <span class="hljs-comment">// 将新的回调函数添加到列表中</span><br>    eventFns.<span class="hljs-title function_">push</span>(eventFn)<br>  &#125;<br><br>  <span class="hljs-comment">// 取消事件监听器</span><br>  <span class="hljs-title function_">off</span>(<span class="hljs-params">eventName, eventFn</span>) &#123;<br>    <span class="hljs-comment">// 获取指定事件名称下的回调函数列表</span><br>    <span class="hljs-keyword">let</span> eventFns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[eventName]<br>    <span class="hljs-comment">// 如果列表不存在,则直接返回</span><br>    <span class="hljs-keyword">if</span> (!eventFns) <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment">// 遍历列表,找到与传入的 eventFn 相同的函数,并从列表中移除</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; eventFns.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">const</span> fn = eventFns[i]<br>      <span class="hljs-keyword">if</span>(fn === eventFn) &#123;<br>        eventFns.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">break</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果列表中已经没有回调函数了,则从 eventMap 中移除该事件</span><br>    <span class="hljs-keyword">if</span>(eventFns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[eventName]<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 发布事件,触发指定事件名称下的所有回调函数</span><br>  <span class="hljs-title function_">emit</span>(<span class="hljs-params">eventName, ...args</span>) &#123;<br>    <span class="hljs-comment">// 获取指定事件名称下的回调函数列表</span><br>    <span class="hljs-keyword">let</span> eventFns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">eventMap</span>[eventName]<br>    <span class="hljs-comment">// 如果列表不存在,则直接返回</span><br>    <span class="hljs-keyword">if</span>(!eventFns) <span class="hljs-keyword">return</span> <br>    <span class="hljs-comment">// 遍历列表,依次执行回调函数,并传递参数</span><br>    eventFns.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">fn</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">fn</span>(...args)<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建一个事件总线实例</span><br><span class="hljs-keyword">const</span> eventBus = <span class="hljs-keyword">new</span> <span class="hljs-title function_">yy_EventBus</span>()<br><br><span class="hljs-comment">// 注册事件监听器</span><br>eventBus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;navclick&quot;</span>, <span class="hljs-function">(<span class="hljs-params">name, age, height</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`navclick: <span class="hljs-subst">$&#123;name&#125;</span>, <span class="hljs-subst">$&#123;age&#125;</span>, <span class="hljs-subst">$&#123;height&#125;</span>`</span>)<br>&#125;)<br><br><span class="hljs-comment">// 另一个事件监听器</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">click</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;click&quot;</span>)<br>&#125;<br>eventBus.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;navclick&quot;</span>, click)<br><br><span class="hljs-comment">// 2 秒后取消 click 监听器</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  eventBus.<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;navclick&quot;</span>, click)<br>&#125;, <span class="hljs-number">2000</span>)<br><br><span class="hljs-comment">// 点击按钮时触发事件</span><br><span class="hljs-keyword">const</span> navBtnEl = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.nav-btn&quot;</span>)<br>navBtnEl.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;navBtnEl clicked&quot;</span>)<br>  eventBus.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;navclick&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">25</span>, <span class="hljs-number">170</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JavaScript网络编程"><a href="#JavaScript网络编程" class="headerlink" title="JavaScript网络编程"></a>JavaScript网络编程</h1><h2 id="前后端分离的优势"><a href="#前后端分离的优势" class="headerlink" title="前后端分离的优势"></a>前后端分离的优势</h2><p>![[Pasted image 20240825203521.png]]</p><ul><li>服务器端渲染过程![[Pasted image 20240825203823.png]]</li><li>前后端分离渲染过程![[Pasted image 20240825203756.png]]</li></ul><h2 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h2><h3 id="什么是Http"><a href="#什么是Http" class="headerlink" title="什么是Http"></a>什么是Http</h3><p>![[Pasted image 20240825204441.png]]![[Pasted image 20240825204459.png]]</p><h3 id="网页中资源的获取"><a href="#网页中资源的获取" class="headerlink" title="网页中资源的获取"></a>网页中资源的获取</h3><p>![[Pasted image 20240825204658.png]]</p><h3 id="Http的组成"><a href="#Http的组成" class="headerlink" title="Http的组成"></a>Http的组成</h3><p>![[Pasted image 20240825211123.png]]</p><h3 id="Http的版本"><a href="#Http的版本" class="headerlink" title="Http的版本"></a>Http的版本</h3><p>![[Pasted image 20240825211713.png]]</p><h3 id="Http的请求方式"><a href="#Http的请求方式" class="headerlink" title="Http的请求方式"></a>Http的请求方式</h3><p>![[Pasted image 20240825212611.png]]</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>![[Pasted image 20240826111103.png]]<br>![[Pasted image 20240826110852.png]]</p><h4 id="Response响应状态码"><a href="#Response响应状态码" class="headerlink" title="Response响应状态码"></a>Response响应状态码</h4><p>![[Pasted image 20240826120304.png]]</p><ul><li>MDN响应码地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">HTTP 响应状态码 - HTTP | MDN (mozilla.org)</a><br>![[Pasted image 20240826120226.png]]</li></ul><h2 id="XHR发送请求"><a href="#XHR发送请求" class="headerlink" title="XHR发送请求"></a>XHR发送请求</h2><h3 id="XHR发送请求的基本过程"><a href="#XHR发送请求的基本过程" class="headerlink" title="XHR发送请求的基本过程"></a>XHR发送请求的基本过程</h3><h4 id="AJAX发送请求"><a href="#AJAX发送请求" class="headerlink" title="AJAX发送请求"></a>AJAX发送请求</h4><p>![[Pasted image 20240826150750.png]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><br>    <span class="hljs-comment">// 1.创建XMLHttpRequest对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br>    <span class="hljs-comment">// 2.监听状态的改变</span><br>    xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">// 将字符串转化为json对象</span><br>      <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> !== <span class="hljs-title class_">XMLHttpRequest</span>.<span class="hljs-property">DONE</span>) <span class="hljs-keyword">return</span> <br>      <span class="hljs-keyword">const</span> resJSON = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">response</span>)<br>      <span class="hljs-keyword">const</span> banner = resJSON.<span class="hljs-property">data</span>.<span class="hljs-property">banner</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(banner)<br>    &#125;<br><br>    <span class="hljs-comment">// 3.配置请求open</span><br>    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>) <span class="hljs-comment">// 请求方式和请求地址</span><br><br>    <span class="hljs-comment">// 4.发送请求send</span><br>    xhr.<span class="hljs-title function_">send</span>()<br><br>  &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="XMLHttpRequest的state"><a href="#XMLHttpRequest的state" class="headerlink" title="XMLHttpRequest的state"></a>XMLHttpRequest的state</h4><p>![[Pasted image 20240826153519.png]]<br>![[Pasted image 20240826153458.png]]</p><h4 id="其他事件监听"><a href="#其他事件监听" class="headerlink" title="其他事件监听"></a>其他事件监听</h4><p>![[Pasted image 20240826154018.png]]</p><h4 id="响应数据和类型"><a href="#响应数据和类型" class="headerlink" title="响应数据和类型"></a>响应数据和类型</h4><p>![[Pasted image 20240826160123.png]]</p><h4 id="HTTP响应的状态status"><a href="#HTTP响应的状态status" class="headerlink" title="HTTP响应的状态status"></a>HTTP响应的状态status</h4><p>![[Pasted image 20240826160737.png]]</p><h3 id="GET-POST请求传递参数"><a href="#GET-POST请求传递参数" class="headerlink" title="GET&#x2F;POST请求传递参数"></a>GET&#x2F;POST请求传递参数</h3><p>![[Pasted image 20240826212439.png]]![[Pasted image 20240826212419.png]]</p><h3 id="ajax网络请求封装"><a href="#ajax网络请求封装" class="headerlink" title="ajax网络请求封装"></a>ajax网络请求封装</h3><ul><li>可以使用axios库</li><li>ajax封装</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  url,</span><br><span class="hljs-params">  method = <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="hljs-params">  data = &#123;&#125;,</span><br><span class="hljs-params">  success,</span><br><span class="hljs-params">  failure</span><br><span class="hljs-params">&#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-comment">// 1.创建XMLHttpRequest对象</span><br>  <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br>  <span class="hljs-comment">// 2.监听数据</span><br>  xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>      success &amp;&amp; <span class="hljs-title function_">success</span>(xhr.<span class="hljs-property">response</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      failure &amp;&amp; <span class="hljs-title function_">failure</span>(&#123; <span class="hljs-attr">status</span>: xhr.<span class="hljs-property">status</span>, <span class="hljs-attr">message</span>: xhr.<span class="hljs-property">statusText</span>&#125;)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 3.设置类型</span><br>  xhr.<span class="hljs-property">responseType</span> = <span class="hljs-string">&quot;json&quot;</span><br><br>  <span class="hljs-comment">// 4.配置请求open</span><br>  <span class="hljs-keyword">if</span>(method.<span class="hljs-title function_">toUpperCase</span>() === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>    <span class="hljs-keyword">const</span> queryStrings = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> data) &#123;<br>      queryStrings.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;data[key]&#125;</span>`</span>)<br>    &#125;<br>    url = url + <span class="hljs-string">&quot;?&quot;</span> + queryStrings.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>    xhr.<span class="hljs-title function_">open</span>(method, url)<br>    xhr.<span class="hljs-title function_">send</span>()<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    xhr.<span class="hljs-title function_">open</span>(method, url)<br>    xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>    xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>ajax-promise封装</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">&#123;</span><br><span class="hljs-params">  url,</span><br><span class="hljs-params">  method = <span class="hljs-string">&quot;get&quot;</span>,</span><br><span class="hljs-params">  data = &#123;&#125;,</span><br><span class="hljs-params">&#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1.创建XMLHttpRequest对象</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><br>    <span class="hljs-comment">// 2.监听数据</span><br>    xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>        <span class="hljs-title function_">resolve</span>(xhr.<span class="hljs-property">response</span>)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(&#123; <span class="hljs-attr">status</span>: xhr.<span class="hljs-property">status</span>, <span class="hljs-attr">message</span>: xhr.<span class="hljs-property">statusText</span>&#125;)<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 3.设置类型</span><br>    xhr.<span class="hljs-property">responseType</span> = <span class="hljs-string">&quot;json&quot;</span><br><br>    <span class="hljs-comment">// 4.配置请求open</span><br>    <span class="hljs-keyword">if</span>(method.<span class="hljs-title function_">toUpperCase</span>() === <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> queryStrings = []<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> data) &#123;<br>        queryStrings.<span class="hljs-title function_">push</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;data[key]&#125;</span>`</span>)<br>      &#125;<br>      url = url + <span class="hljs-string">&quot;?&quot;</span> + queryStrings.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>      xhr.<span class="hljs-title function_">open</span>(method, url)<br>      xhr.<span class="hljs-title function_">send</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      xhr.<span class="hljs-title function_">open</span>(method, url)<br>      xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)<br>      xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data))<br>    &#125;<br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="过期时间和取消请求"><a href="#过期时间和取消请求" class="headerlink" title="过期时间和取消请求"></a>过期时间和取消请求</h3><p>![[Pasted image 20240827115020.png]]</p><h3 id="Fetch和Fetch-API"><a href="#Fetch和Fetch-API" class="headerlink" title="Fetch和Fetch API"></a>Fetch和Fetch API</h3><h4 id="认识Fetch和API"><a href="#认识Fetch和API" class="headerlink" title="认识Fetch和API"></a>认识Fetch和API</h4><p>![[Pasted image 20240827133055.png]]![[Pasted image 20240827133115.png]]</p><h4 id="Fetch数据的响应"><a href="#Fetch数据的响应" class="headerlink" title="Fetch数据的响应"></a>Fetch数据的响应</h4><p>![[Pasted image 20240827133215.png]]<br>![[Pasted image 20240827134223.png]]<br>![[Pasted image 20240827134242.png]]<br>![[Pasted image 20240827134254.png]]<br>![[Pasted image 20240827134308.png]]</p><h3 id="XMLHttpRequest文件上传"><a href="#XMLHttpRequest文件上传" class="headerlink" title="XMLHttpRequest文件上传"></a>XMLHttpRequest文件上传</h3><p>![[Pasted image 20240827164139.png]]![[Pasted image 20240827164146.png]]![[Pasted image 20240827164213.png]]</p><h3 id="Fetch文件上传"><a href="#Fetch文件上传" class="headerlink" title="Fetch文件上传"></a>Fetch文件上传</h3><p>![[Pasted image 20240827164955.png]]</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MinVue</title>
      <link href="/posts/2025/04/Fronted/MinVue/4a7e677b.html"/>
      <url>/posts/2025/04/Fronted/MinVue/4a7e677b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Mini Vue<br>前言<br>在尝试读懂这篇文章之前，请保证已经学习过面向对象基本知识、HTML基础、JS基础，并且有过一定的实践开发基础，不然可能会有非常多的小问号。<br>如果不满足上述条件，也可以试着读一读，不必为其中不懂的内容感到焦虑，后面都能学会的。</p><p>本文旨在教会读者实现一个精简版的Vue，很多Vue的功能会被简化，但是核心思想是相通的。<br>本文会尽可能通俗易懂、避开JS的各种生僻特性。<br>我们先不说Vue的事情，让我们先通过一些场景了解一点前置知识和概念——只需要知道大概是什么，没必要咬文嚼字：<br>一个场景里的概念：响应式数据、依赖、数据劫持、MVVM和双向绑定<br>看看这段代码：<br>JavaScript<br>&#x2F;&#x2F; 我们希望这个关系恒成立： y &#x3D; 2 * x + 1<br>let x &#x3D; 10<br>let y &#x3D; 2 * x + 1<br>x &#x3D; 20<br>&#x2F;&#x2F; x变了，但是y却不会发生变化<br>我们希望，x变化时y能自动地变化，而不是我们还需要手动赋值多此一举。<br>那么怎么实现呢？这里有一种思路是，设置一个角色专门监听x的变化，在察觉x变化时能够通知y发生变化。</p><p>这很容易做到，JS为我们提供了一个API，Object.defineProperty：<br>JavaScript<br>const data &#x3D; {<br>  x: 10,<br>  y: 21<br>};</p><p>&#x2F;&#x2F; 监听 data.x 的 修改<br>Object.defineProperty(data, ‘x’, {<br>  set(value) {<br>    data.y &#x3D; value * 2 + 1; &#x2F;&#x2F; 当 x 修改时，通知 y 发生相应变化<br>  }<br>});</p><p>console.log(‘一开始:’, data.y); &#x2F;&#x2F; 21<br>data.x &#x3D; 100;<br>console.log(‘x变化后:’, data.y); &#x2F;&#x2F; 201</p><p>在Vue中，将普通数据变成响应式数据的过程，就叫数据劫持。<br>而Object.defineProperty扮演的这个角色，在下文中被称为 数据劫持者（hijacker）</p><p>回到web中，JS的DOM操作是如何去修改视图的呢？<br>让我们再看看一个DOM操作修改<input />内容的例子：<br>JavaScript<br>let value &#x3D; document.querySelector(‘input’).value; &#x2F;&#x2F; 1.获取input当前内容</p><p>value &#x3D; Number(value) + 1; &#x2F;&#x2F; 2. 修改内容</p><p>document.querySelector(‘input’).value &#x3D; value; &#x2F;&#x2F; 3.重新赋值<br>我们能不能将第3步干掉？重新赋值看上去太多此一举了！<br>结合上文x和y的关系，相信大家应该是灵光一闪。<br>我们这里先抛出问题，暂时不考虑其中具体的实现细节。<br>响应式数据指的是，依赖变化时，该数据会自动变化。如上文的y就是响应式数据，x则是其依赖，响应式数据和其依赖总是能表达为y&#x3D;F(x)。</p><p>M-V-VM是一种技术架构，M代表数据层(Model)，V代表视图层(View)，VM(ViewModel)在这里则是Vue代表的层次。</p><p>VM层会监听另外两层的变化，在其中一个变化时，使另外一个发生相应的变化，即VM层将V层和M层进行了双向绑定——V&#x3D;F1(M)且M&#x3D;F2(V),V与M互为依赖。<br>具体一点：<br>1.用户在输入框输入了123（V层），内存里与之关联的数据自动变为123（M层）<br>2.通过代码修改内存的数据为123（M层），界面上与之关联的部分自动变为123（V层）</p><p>Vue通过建立MVVM架构实现了双向的响应式，即双向绑定。</p><p>又一个场景里的概念：观察者模式、依赖收集<br>HTML<br>&#x2F;&#x2F; 这是伪代码，一种简写，只是意会，并不实际有效<br>&#x2F;&#x2F; value&#x3D;{v}是我虚构的一种语法，{v}表示使用JS变量里面的v<br>&#x2F;&#x2F; 请记住上面这个写法，下文还会提到 </p><script>    let v = 1;</script><div>    <input value={v} />    <input value={v} /></div>上述HTML片段中，两个<input />内使用了一个JS变量v。我们实现一下对v变化的监听，察觉到它发生变化的时机，然后及时通知到两个<input />的value改变：JavaScript// 监听v，一旦v变化，就改变两个input的值Object.defineProperty(window, 'v', () => {    set(value) {        const inputDoms = document.querySelectorAll('input')        inputDoms[0].value = value         inputDoms[1].value = value    }    })注意，这里我们能进行通知，是因为这个片段很简单，我们能直接看到v被使用的位置，所以可以写像创建上文x与y的关系那样的代码。<p>但是，如果我们的项目有无穷多处都依赖了v, 那我们还能一个一个手动去实现每一个响应式数据吗？<br>所以我们面临一个问题：怎么快速修改所有v？</p><p>这里我们需要先学习业界大佬们总结的23种设计模式之一，观察者模式<br>什么是观察者模式？<br>这个模式中一共有2个角色，发布者与观察者。<br>发布者好比一个UP主，观察者就是ta的粉丝，当UP发视频的时候，粉丝就会第一时间收到通知。<br>让我们用代码表述一下：</p><p>我们的问题解决了——怎么快速修改所有v:<br>通过发布者通知所有观察者执行update方法修改数据，就实现了修改所有v。<br>我们可以手动创建一个发布者，但是新的问题是，我们该怎么创建观察者？<br>让我们分析一下该怎么做，就像是把大象放进冰箱一样，凡事都只需要三步：<br>1.观察局势，发现很多地方都使用了变量v，比如<input value={v}><br>2.特殊标记这些v的位置<br>3.让被标记的变量成为观察者</p><p>怎么标记呢？那就是创造一种语法，比如<input value={v}>中的{v}<br>然后通过一些暴力巧妙的操作，遍历所有HTML，找到其中格式满足{xxx}的内容，将其变成观察者即可。<br>同时，我们会用巧妙的操作实现一种逻辑，在观察者产生的时候，它会主动关注发布者。<br>具体怎么操作，我们后面再谈。<br>寻找被特殊标记的变量的过程，就是依赖收集；将标记变量转化为响应式的过程，就是数据劫持；<br>至此，我们实现了单向的响应式，在publisher的内容被修改时触发publish方法通知所有存在于HTML片段里面的observer一起修改——也就是完成了V&#x3D;F1(M)。</p><p>那双向绑定，M&#x3D;F2(V)怎么实现呢？<br>有了上述的铺垫之后就非常简单了！视图层(V层)的变动主要是来自于用户的输入（键盘输入、鼠标点击等），所以我们只需要监听一些用户操作事件就好，比如当用户输入时，让publisher进行通知就行了。<br>代码示意如下：<br>JavaScript</p><div>    <input value={v} /> // 用户在这里标签上进行输入    <input value={v} /></div>    <script>    // ... 省略一堆代码    const inputDom1 = document.querySelector('input')    // 监听键盘输入    inputDom1.oninput = (e) => {        // 一旦用户进行输入，就让UP主（publisher）把新的值告诉其他所有粉丝（观察者）        publisher.publish(e.target.value)    }</script><p>再一个场景里的概念：虚拟DOM和Diff算法<br>让我们先来讲个故事：<br>某个疯狂星期四，乐程的xxl点外卖。打开某团先点了一份黄金鸡块，五分钟后，觉得不够吃又点了一份吮指原味鸡，再过了五分钟，觉得有点渴于是又点了一杯肥宅快乐水…<br>这个故事给我们什么启发？<br>很明显，这样多次操作下来，需要支付多次配送费用，显然不如一次性点完所有来得划算</p><p>在web中也是类似的：<br>JS引擎和处理HTML的渲染引擎不在同一个进程下，每当用JS去操作HTML（DOM操作），都需要开辟一个跨进程的通道，这种操作开销不小。<br>看不懂没关系，我们通俗一点说，<br>相当于，JS和HTML是不在同一个国家的，JS要去处理HTML相关的事情，就得花大价钱买机票出国去做，做完了又得买机票回来继续做自己的事情，如果下次又有HTML的事情要处理，那么就又得买机票出国…<br>这种开销是昂贵的。</p><p>所以，如果JS能先把要处理的DOM统一记录下来，之后一次性处理完，就能节省许多不必要的开销。<br>而这种记录，就是虚拟DOM。</p><p>众所周知，HTML会被解析为DOM树，下图左侧HTML对应就是右侧的DOM树：<br>DOM这个词严格来说指的是DOM树，其中每个节点就叫DOM节点，而DOM元素专指标签。<br>但是口头上，DOM、DOM树、DOM节点这几个词经常混用，并不做严格的区分…</p><p>我们为了更明确地表示区分，在提到虚拟DOM的语境下，会把DOM称为真实DOM。<br>虚拟DOM就是用JS代码表示上图右侧结构(主要看a标签那一块的表示就好了)：<br>JavaScript<br>const visualDom &#x3D; {<br>    tag: ‘html’  &#x2F;&#x2F; 标签名<br>    props: {},   &#x2F;&#x2F; 标签的属性<br>    content: [   &#x2F;&#x2F; 标签的内容<br>        {<br>            tag: ‘head’,<br>            props: {},<br>            content: []<br>        },<br>        {<br>            tag: ‘body’,<br>            props: ‘’,<br>            content: [<br>                {<br>                    tag: ‘a’,<br>                    props: {<br>                        href: ‘xxx’<br>                    },<br>                    content: [<br>                        ‘a的内容’ &#x2F;&#x2F; 内容可以直接就是一个字符串,所以后面需要区分,是字符串还是标签<br>                    ]<br>                },<br>                ‘123’<br>            ]<br>        }<br>    ]<br>}<br>之后，每次JS先在自己家里把要做的改变记录好，后面出国就能一次性把所有事情办完，节省开销。</p><p>那么如何构建虚拟DOM呢？让我们一步一步考虑：<br>1.起初，遍历所有真实DOM，产生上述结构。<br>2.当发送改变时，比如新增&#x2F;删除了一些标签，我们得先在虚拟DOM记录这种改变——这时候问题出现了！<br>我们怎么知道这种改变发生在虚拟DOM的哪个位置？又重新遍历所有真实DOM节点产生新的结构吗？这听上去开销也太大了，甚至比我们使用虚拟DOM前的情况还要大，那这简直是得不偿失。</p><p>所以我们需要一些算法来优化一下，也就是Diff算法。<br>Diff算法不是具体某个算法，而是像DP一样，是一类算法，解决的问题是如何尽快找出两份内容中不同的部分。</p><p>准备开始<br>在了解了上面所有概念之后，我们最后来进行一点总结。<br>我们要做的是My-Vue，所以简称为MUE吧</p><p>在正式开始之前，希望大家能先去体验一下真正的Vue。<br>由于Mue的语法模仿的是Vue2, 所以推荐大家选择Vue2进行体验。<br>因为Vue3语法发生了一些变化，可能会给大家带来一些困扰。</p><p>但无论什么版本，底层原理还是基本一致的。</p><p>体验到什么程度？只需要看看大概长啥样，自己再写一点响应式数据试一下就行了。</p><p>让我们梳理一下上面三个场景中提到的内容，整体流程大概是这样的：<br>其中需要注意的是，我们之前提到的观察者模式中，没有实现反向通知的能力，这点会在下文提及<br>让我们准备一下文件结构：</p><p>其中index.html和main.js中的内容分别是：<br>JavaScript<br><!DOCTYPE html></p><html><head>  <title>Mue</title></head><body>  <div id="app">    <div>{msg}</div>    <input type="text" value="{msg}">  </div></body><script type="module" src="./main.js"></script></html>如果一切顺利，html中出现的{msg}将被替换成Hello MueJavaScriptimport Mue from '../mue-core/mue.js';<p>window.mue &#x3D; new Mue({<br>  el: ‘#app’,<br>  data: {<br>    msg: ‘Hello MUE!’<br>  },<br>});<br>和上文一样，接下来涉及到面向对象的部分，我们都用Class进行实现。<br>JS中，Class本质是Function，这意味着可以用Function实现——并且这是更推荐的做法。<br>但是考虑到大家的面向对象基础更多来自于Java，用Class实现应该更容易上手。<br>实现核心能力<br>实现：ViewModel层核心 Mue<br>非常简单，主要是记录一下el和data。<br>el即对应的真实DOM节点，后续我们将把整个项目挂载到el上。<br>然后创建数据劫持者Hijacker和模板编译者Compiler即可。<br>JavaScript<br>import Hijacker from ‘..&#x2F;mue-core&#x2F;hijacker.js’;<br>import Compiler from ‘.&#x2F;compiler.js’;<br>class Mue {<br>  constructor(options) {<br>    &#x2F;&#x2F; element的简写。作为项目挂载的根节点。<br>    this.el &#x3D; document.querySelector(options.el);<br>    this.data &#x3D; options.data;<br>    new Hijacker(this, ‘data’);<br>    new Compiler(this); &#x2F;&#x2F; 把整个mue都传给Compiler<br>  }<br>}</p><p>export default Mue;</p><p>实现：发布者 Publisher<br>比较简单，基本和之前提到的部分一致，不再过多赘述：<br>JavaScript<br>&#x2F;&#x2F; 发布者<br>class Publisher {<br>  constructor(data) {<br>    this.viewers &#x3D; [];<br>  }</p><p>  addViewer(viewer) {<br>    this.viewers.push(viewer);<br>  }</p><p>  publish() {<br>    this.viewers.forEach((viewer) &#x3D;&gt; {<br>      viewer.update();<br>    });<br>  }<br>}</p><p>export default Publisher;</p><p>实现：数据劫持者 Hijacker<br>考虑到大家的JS基础，我们这里先简单说明一个JS的知识点，this指向。<br>本文的目的不是学习this，所以只做不严谨且粗略的介绍。（如果你已经弄懂了this，请跳过这个部分）<br>上文已经用到过不少了，看到这里相信也也应该知道Class中的this大部分时候的意思就是”我自己”。<br>我们上文也提到了，Class本质是Function，而且Function内部也有this。<br>大部分情况下，一个函数的this指向这个函数的调用者。来看看下面这个例子：<br>JavaScript<br>&#x2F;&#x2F; case 1：类的方法<br>class A {<br>  testThis() {<br>    console.log(this);<br>  }<br>}<br>new A().testThis(); &#x2F;&#x2F; A</p><p>&#x2F;&#x2F; case 2: 全局函数<br>function B() {<br>  console.log(this);<br>}<br>B(); &#x2F;&#x2F; (浏览器环境下)window。 因为这是window.B()的缩写</p><p>&#x2F;&#x2F; case 3: 类的方法中使用全局函数<br>class C {<br>  testThis() {<br>    B();<br>  }<br>}<br>new C().testThis(); &#x2F;&#x2F; (浏览器环境下)window, 因为还是 window.B()</p><p>&#x2F;&#x2F; case 4: 为了让 类的方法中使用的全局函数 访问到 类的this, 我们需要这么改：<br>function Dfunction(that) {<br>  console.log(that);<br>}<br>class Dclass {<br>  testThis() {<br>    const that &#x3D; this; &#x2F;&#x2F; 这里多开一个变量的确是不必要的，这里这么做是为了强调这种处理方式<br>    Dfunction(that);<br>  }<br>}<br>new Dclass().testThis(); &#x2F;&#x2F; Dclass</p><p>另外，数据劫持还需要注意一个事情就是，可能出现下面这样树形的数据，所以我们需要进行一个遍历处理，这里我们采用递归实现。<br>JavaScript<br>const data &#x3D; {<br>    a: {<br>        aa:123,<br>        ab: {<br>            aba: ‘hhh’<br>        }<br>    }，<br>    b: ‘aaaaaaa’<br>}</p><p>好了，现在让我们来实现Hijacker:<br>JavaScript<br>import Publisher from “.&#x2F;publisher.js”;<br>&#x2F;&#x2F; 数据劫持者<br>class Hijacker {<br>  constructor(mue, data) {<br>    this.hijack(mue, data);<br>  }</p><p>  &#x2F;&#x2F; Object.defineProperty劫持数据需要拿到 该数据节点 及 其父级对象<br>  hijack(object, key) {<br>    &#x2F;&#x2F; 创建发布者<br>    const publisher &#x3D; new Publisher();<br>    let value &#x3D; object[key];</p><pre><code>if (!value) &#123;  return;&#125; else if (typeof value === &#39;object&#39;) &#123; // 当前节点是树，递归;  Object.keys(value).forEach((key) =&gt; &#123;    this.hijack(value, key);  &#125;);&#125; else &#123; // 当前节点是叶子节点；object则是其父级节点  // 上文提到的知识点：JS的this指向  const that = this;    // 开始劫持数据  Object.defineProperties(object, value, &#123;    // 记住这个get, 这个很重要    get() &#123;  // 实现反向通知的核心步骤，具体怎么回事在实现Viewer时进一步说明      if (Publisher.target) &#123;         publisher.addViewer(Publisher.target);      &#125;      return value;    &#125;,    set(newValue) &#123;      if (value === newValue) &#123; // 防止死循环: 更新-&gt;触发publish-&gt;更新-&gt;...        return      &#125;      value = newValue;      that.hijack(object, newValue); // 提防一首新的数据是树形结构，递归一下      publisher.publish();    &#125;  &#125;);&#125;</code></pre><p>  }<br>}</p><p>export default Hijacker</p><p>实现：观察者 Viewer<br>观察者也非常容易实现，只需要在之前提到过的代码上加一点点内容实现反向通知即可：<br>JavaScript<br>import Publisher from “.&#x2F;publisher.js”;<br>&#x2F;&#x2F; 观察者<br>class Viewer {<br>  constructor(mue, dataKey, updateHandler) {<br>    this.mue &#x3D; mue; &#x2F;&#x2F; 传说中的vm层，即mue实例<br>    this.dataKey &#x3D; dataKey; &#x2F;&#x2F; 数据的键<br>    this.updateHandler &#x3D; updateHandler; &#x2F;&#x2F; 用来更新视图层(V层)的方法</p><pre><code>// 这里是反向通知的关键操作：// 绑定一个静态属性。相当于在Publisher内部创建一个“全局”变量，记录是哪个观察者触发的反向通知Publisher.target = this;// 这里使用了 mue.data[dataKey]，将触发劫持者设置的 get方法：// 反向通知 publisher邀请当前这个viewer成为观察者（也可以理解为viewer主动成为观察者）this.oldValue = mue.data[dataKey];// 结束，标记为空，释放内存Publisher.target = null;</code></pre><p>  }</p><p>  update() {<br>    const newValue &#x3D; this.mue.data[dataKey];<br>    if (this.oldValue &#x3D;&#x3D;&#x3D; newValue) { &#x2F;&#x2F; 同样地，没有更新就啥也不干<br>      return;<br>    }<br>    &#x2F;&#x2F; 更新视图，实现 V &#x3D; F1(M)<br>    this.updateHandler(newValue);<br>  }<br>}</p><p>export default Viewer;<br>让我们分析一下其中Publisher.viewer是一个什么操作：</p><p>在创建Viewer的时候，会给Publisher添加一个静态属性viewer，记录一下当前是在创建哪个观察者。<br>静态属性可以理解为，在Publisher上创建的一个全局变量<br>然后使用这个观察者对应的值时，会触发get方法，让观察者实例publisher将刚刚记录的观察者添加进观察者队列——看上去就像是观察者一创建就主动关注了发布者一样。</p><p>这里其实有个有意思的小知识点，就顺口提一句：<br>import的内容是原数据的引用而不是拷贝，所以我们可以在viewer.js引入的Publisher上绑定新的值，然后在hijacker.js中访问到这些值。</p><p>实现：模板编译者 Compiler</p><p>这个是五个角色中最难的一个部分了。<br>在开始写代码前我们仍然需要介绍一堆前置概念。<br>1.首先我们要复习一下JS的DOM类型——请记住DOM也是有类型的，常见的类型如下表所示：<br>类型说明编号图示参考<br>元素每一个标签都是一个元素节点，如 <div> 、 <span><br>1</p><p>属性id 、class 、style等2<br>文本元素节点或属性节点中的文本内容<br>3<br>注释注释，比如<!-- xxx -->8<br>文档也叫根节点，即document9<br>2.然后再让我们了解一下 伪数组。<br>JavaScript<br>&#x2F;&#x2F; 伪数组也叫类数组，本质是对象，只不过键是0-N, 就像是下面这样<br>const objectArray &#x3D; {<br>    0: ‘aaa’,<br>    1: ‘bbb’,<br>    2: ‘ccc’<br>}</p><p>console.log(objectArray[0]) &#x2F;&#x2F; aaa<br>什么场景下会出现伪数组？<br>比如document.querySelectorAll的返回值、函数的arguments参数列表等都是伪数组。<br>3.如果要把伪数组变为数组，可以使用Array.from方法:<br>JavaScript</p><div id="app">    <span>Hello</span>    World</div><script>  const dom = document.querySelector('#app')  const children = dom.childNodes // 获取当前节点的所有子节点。可以以此进行前序遍历  console.log('伪数组', children)  console.log('真数组', Array.from(children))</script>那为什么要把伪数组转为真数组呢？因为伪数组是对象，不具有数组的某些方法，比如push和pop，许多场景下使用起来不方便。那JS设计者为什么要搞出伪数组这种东西？据JS之父自己坦白——"当初只用了十天就搞完了...现在看起来确实设计得太糙了..."4.最后，我们需要简单认识一下正则表达式（regular expression）。实现Compiler只会简单用到一点正则，所以这里只给出3种case给大家了解一下概念，不做过多深入:JavaScriptconst reg = /\{(.+?)\}/; // 正则表达式。这个能够匹配形如 {xxx} 的字符串, ()表示要获取的部分const str = '这是{msg}';<p>&#x2F;&#x2F; case 1: 用正则表达式去匹配字符串<br>console.log(reg.test(str)); &#x2F;&#x2F; true</p><p>&#x2F;&#x2F; case 2: 用字符串去匹配正则表达式<br>console.log(str.match(reg)); &#x2F;&#x2F; [ ‘{msg}’, ‘msg’, index: 2, input: ‘这是{msg}’, …]</p><p>&#x2F;&#x2F; case 3: 替换匹配内容<br>const data &#x3D; ‘swpu-lec, yyds’;<br>console.log(str.replace(reg, data));  &#x2F;&#x2F; 这是swpu-lec, yyds    </p><p>由于主题是Vue，而且正则又博大精深，所以限于篇幅此处不做更多介绍了。如果对此感兴趣，可以学习：<br>[该类型的内容暂不支持下载]</p><p>熟悉了以上内容后，先来大体看看我们要做的东西。<br>内容比较多，我们拆成了几个层次分开看，首先我们需要一个大体的框架如下：<br>JavaScript<br>import Viewer from “.&#x2F;viewer.js”;<br>&#x2F;&#x2F; 模板编译者<br>class Compiler {<br>  constructor(mue) {<br>    this.mue &#x3D; mue;<br>    this.el &#x3D; mue.el;<br>    this.compile(this.el);<br>  }</p><p>  &#x2F;&#x2F; 开始编译<br>  compile(el) {<br>    const childNodes &#x3D; el.childNodes; &#x2F;&#x2F; 真实DOM伪数组<br>    const childNodesList &#x3D; Array.from(childNodes); &#x2F;&#x2F; 转为真数组，进而可以用数组的api</p><pre><code>// 前序遍历整个DOM树childNodesList.forEach((node,) =&gt; &#123;  // 判断是什么类型的DOM, 扔给不同的处理方法  if (node.nodeType === 1) &#123; // 元素类型    this.compileForElement(node);  &#125; else if (node.nodeType === 3) &#123; // 文本类型    this.compileForText(node);  &#125;  // 如果还有子节点，递归获取下一层  if (node.childNodes.length) &#123;    this.compile(node);  &#125;&#125;);</code></pre><p>  }<br>  &#x2F;&#x2F; TODO: 主要就是实现这俩函数：<br>  &#x2F;&#x2F; 处理元素类型DOM<br>  compileForElement(node) {}<br>  &#x2F;&#x2F; 处理文本类型DOM<br>  compileForText(node) {}<br>}</p><p>export default Compiler;<br>怎么实现函数呢？既然我们都说过正则匹配了，那么也会用上吧：<br>JavaScript<br>&#x2F;&#x2F; 处理元素类型DOM<br>  compileForElement(node) {<br>    const reg &#x3D; &#x2F;{(.+?)}&#x2F;; &#x2F;&#x2F; 正则表达式，匹配形如 {xxx} 的字符串<br>    const allAttributes &#x3D; Array.from(node.attributes); &#x2F;&#x2F; 将节点的所有属性，处理为数组</p><pre><code>// 遍历数组，处理每个属性allAttributes.forEach((attribute) =&gt; &#123;  // 比如 data=&quot;&#123;msg&#125;&quot;, attribute.name就是&quot;data&quot;, attribute.value就是&quot;&#123;msg&#125;&quot;  const text = attribute.value;  const matchRes = text.match(reg);  if (matchRes) &#123; // 如果包含形如 &#123;xxx&#125; 的部分    const dataKey = matchRes[1];    // 比如匹配的是&quot;&#123;msg&#125;&quot;, matchRes[1]就是&quot;msg&quot;        // 创建观察者，触发相关逻辑    new Viewer(this.mue, dataKey, (newValue) =&gt; &#123;      node.textContent = newValue;    &#125;);    const newValue = this.mue.data[dataKey];    node.value = text.replace(reg, newValue); // 将 &#123;xxx&#125; 替换为具体的值    // 监听键盘输入，完成双向绑定，M=F2(V)    node.addEventListener(&#39;input&#39;, () =&gt; &#123;       this.mue.data[dataKey] = node.value;    &#125;);  &#125;&#125;);</code></pre><p>  }</p><p>  &#x2F;&#x2F; 处理文本类型DOM<br>  compileForText(node) {<br>    const reg &#x3D; &#x2F;{(.+?)}&#x2F;;<br>    const text &#x3D; node.textContent;<br>    const matchRes &#x3D; text.match(reg);</p><pre><code>if (matchRes) &#123;  // 与上面的方法基本上一样的逻辑  const dataKey = matchRes[1];   const newText = this.mue.data[dataKey];  node.textContent = text.replace(reg, newText);   new Viewer(this.mue, dataKey, (newText) =&gt; &#123;    node.textContent = newText;  &#125;);&#125;</code></pre><p>  }<br>至此，MUE已经基本完成了。可以打开HTML页面体验一下成果了！<br>但也再额外给一点开放性挑战，感兴趣可以做一做：<br>JavaScript<br>&#x2F;&#x2F; challenge 1：if、else-if、else，当值为布尔或可以类型转换为布尔时，进行相应的渲染控制</p><div>    <div if="{false}">A</div>    <div else-if="{0}">B</div>    <div else="{true}">C</div></div>// challenge 2：循环渲染, 其中arr是一个数组，element是其元素，index是其下标<div for="i:arr">    <span>{i}</span></div><p>【废弃】实现性能优化<br>我们不需要下述的性能优化方案——因为我们有了超越虚拟DOM性能的方案<br>实现：虚拟DOM<br>经过一番体验后就发现，如果非常快速地输入中文的话，可能会导致双向绑定出错…<br>这是因为，目前我们是每输入一个字符都会触发一次真实DOM的更改，高频且大量的操作就可能超出浏览器处理数据的极限（输入频率超过浏览器最大渲染频率），出现数据和视图不一致的情况…<br>总结就是，太卡了，需要优化一下，那么就像是我们上文提到的，实现一下虚拟DOM。<br>实现：Diff算法<br>如果我们没有虚拟DOM，那么我们或许可以不使用Diff算法？</p><p>实现更多场景<br>我突然意识到这不仅是一次尝试，更是一个开发真实可用的框架的好机会！<br>由于Mue名字寓意太明显了抄袭痕迹太重，所以正式版改名叫Mud吧，寓意非常丰富：<br>1.实现思路借鉴了Vue，React(JSX)，Svelte等多个框架，是各种东西糊成的一坨<br>2.实现并不精致，但是容易被塑造成各种形状，朴素实用<br>3.泥巴里面可以催生出很多东西，以此为基础可以产生更多技术框架<br>4.出淤泥而不染<br>（我的确是在自吹自擂）</p><ol><li>在多种模块化规范下使用Mud.js<br>先简单介绍一下JS的模块化规范：<br>规范名称说明示例<br>umd几乎是前端诞生以来，就有了雏形，但是一直到2009年左右才终于形成正式的规范<script src="xxx" /></li></ol><p>像这样引入的就是umd包<br>cjsNodeJS的伴生产物，也是2009年左右形成的规范const a = require(&#39;a&#39;)<br>module.exports = {}<br>像这样的导入、导出的则是cjs包</p><p>esm<br>ECMAScript官方2015年推出的规范，JS正统import a from &#39;a&#39;<br>export default b<br>像这样导入、导出的则是esm包<br>cmd和amd<br>2009年前后出现，现如今使用频率较低，不在本次兼容的范围内。?（不详）<br>我们将借助rollup的能力实现一套代码转变为多种规范的包<br>在这之前你一定听说过webpack或者vite——不使用这些是因为它们太重了，我们这里只是需要简单地转变规范，所以轻量小巧的rollup就成了首选。<br>相信配置一套满足上述要求的rollup文件不会困扰大家，所以交由大家自行实现。<br>在打包完成后，引入不同规范的包：<br>umd<br>非常容易实现，但是需要输入完整路径（形如../node_modules/mud/umd/index.js）<br>cjs<br>由于node和node_modules的关系不一般，所以只需要require直接导入包名即可(require(&#39;mud&#39;))<br>esm<br>这是最难的一个部分，需要有webpack等打包构建工具（这就埋下了一个伏笔——我们需要构建一个脚手架；还有，我个人更倾向用vite）</p><p>这里为了更好地验证包发布的效果，这里可以使用工具yalc来模拟验证</p><ol start="2"><li><p>比虚拟DOM更直接的内容更新办法<br>相比虚拟DOM，其实有个更简单且还算高效的办法——innerHTML<br>一键替换内容<br>这样的实现将会减小代码体积，并且在常规情况下的效率会高于虚拟DOM</p></li><li><p>模块化<br>受到腾讯的微前端框架无界的启发，我们想到了一种不一样的模块化方案：<br>先到根目录下src/index.html中写入（根组件）<br>HTML</p><!DOCTYPE html></li></ol><html><head>  <title>Mud.js</title>  <link rel="stylesheet" href="./index.css"></head><body>  <div id="app">      <div>{msg}</div>      <input type="text" value="{msg}">      <!-- 这个就是我们的组件了 -->      <component1 />   </div></body><script type="module" src="./xxx/Mud.js"></script><script>new Mud({  el: '#app',  data: {    msg: 'Hello Mud!',    arr: ['Someday', 'I', 'Will', 'Be', 'Like', 'You'],    cnt: 1,  },  <p>  components: {<br>    component1: &#39;src/components/component1/index.html&#39;<br>  }<br>});<br>const plus = () =&gt; {<br>  mud.data.cnt ++<br>}<br></script></p></html>然后这里是模块src/components/component1/index.html：HTML<div>这是组件</div><script> new Mud({  el: '#component1',  data: {},});   </script><p>怎么引入模块呢？<br>1.从根组件开始解析（模板编译的过程），访问每个DOM节点时，通过字符串比较发现了非原生标签，那么我们就推断这是一个Mud组件<br>2.要求用户手写组件注册（id: path) ，据此便能够通过组件名称（即id），找到对应的文件路径，用ajax等方式请求下来（异步解析非常高效，也为ssr提供了能力），直接替换原来的组件标签的innerHTML即可<br>3.注意，替换之后，该组件内部可能还有组件，也遵循上述规则进行解析——这样的设计，我们便以一种非常简单的方式实现了单页面应用、组件化设计，它的特点是渲染顺序是先序，更新粒度是一个组件——所以我们不需要Diff，并且</p><ol start="4"><li>更好的数据劫持<br>初步实现<br>将Object.defineProperty换为Proxy，这样我们就能够在不重写方法的前提下监听到数组的push、pop等操作了。这是一个改动量非常大的工作，但是很显然，它的收益是相当可观的。<br>多级调用<br>还需要支持对象多级调用，思路就是通过点来分割即可。</li></ol><p>性能优化<br>对于已经被劫持过的数据，我们要防止其被再次劫持以避免不必要的性能开销。</p><ol start="5"><li>【TODO】更好的观察者模式<br>现在的观察者都是不具名的，存在很多性能问题：<br>1.一处变量a改变时，除了通知其他变量a更新之外，还会通知变量b更新。<br>2.比如handleIf中，反复改变状态时，会创建大量重复的观察者。</li></ol><p>优化的方案也比较简单，将Publisher的数组改为一个Set，通过键名指定更新某一个变量。<br>6. 丰富语法<br>现在已经实现了插值语法、for循环等，目前还打算实现以下语法<br>if系列<br>If else-if else, 这是vue中非常优秀的一个设计，抄了<br>for<br>组件参数传递<br>父级组件中：<br>HTML<br><component1  a={xxx} /></p><script>new Mud({    data: {        xxx:1    }})</script><p>子级组件中：<br>会把这个组件标签上所有的属性搜刮下来，然后自动放到props.data中（之后，props将作为一个关键字，不允许用户自定义data叫props）：<br>HTML</p><div>    </div><script>new Mud({    data: {},})</script><p>另外还有props.child的操作，这个则是react中非常符合直觉的设计：<br>父组件中<br>JavaScript<br><component1  a={xxx}><br>   <div>这是嵌入的内容</div><br></component1></p><script>new Mud({    data: {        xxx:1    }})</script><p>子组件中：<br>结合if等语法可以实现非常多骚操作，而且这部分由于是用innerHTML直接插入的，所以还可以使用子组件中的变量<br>JavaScript</p><div>    </div><script>new Mud({    data: {},})</script><p>Watch监听<br>即让用户手动监听数据，这个比较简单，将观察者的内部方法暴露出去即可</p><ol start="7"><li><p>实现生命周期<br>对此，我们还得仔细思考一下，到底是实现Hook还是生命周期<br>onMounted<br>直接在挂载的时候加个函数就行了</p></li><li><p>更多生态<br>实现Mud-Doc：Mud官方文档<br>【TODO】实现Root：Mud框架的路由<br>实现Mud-Cli：快速搭建Mud项目<br>【TODO】产出Mud-Demo：利用Mud快速构建优秀的作品</p></li></ol><p>组件样式库<br>暂时使用开源的xy-ui:<a href="https://github.com/xboxyan">https://github.com/xboxyan</a><br>可以先考虑 semi-ui</p><p>发布上线<br>测试点</p><ol><li><p>内容插值语法<br>☑常规的基础数据插值，如{a}<br>☑特殊的基础数据插值，如NaN，undefined，null，空字符串，symbol，基本数学运算表达式，三元表达式<br>对于undefined和symbol，插值语法不解析，其余均正常<br>☑常规的引用数据类型插值，如{b}，其中b&#x3D;{name: 1}<br>支持n级连续调用，但是Proxy的setter并没有生效（已修复）<br>☑特殊的引用数据类型插值，如空对象, 函数表达式，函数运算结果，new新建对象<br>对于函数表达式，竟然会直接获取到运算结果，出乎意料<br>☑更多插值方式，如直接插入表达式，插入函数调用，插入连续调用<br>暂不打算支持插入表达式和函数调用<br>☑非常极端的插值方式，如不填写任何变量，填写不存在的变量，填写特殊符号，填写标签<br>很好，填写标签也是能够如预期的一样进行<br>☑两个对象内有相同的属性名字<br>☑在插值语法的括号两侧写入其他内容，如aaaa{a}aa<br>会把两侧的其他内容覆盖掉（已修复）</p></li><li><p>属性插值语法<br>☑常规的属性插值，如input&#x3D;”{a}”, 其中a&#x3D;1<br>☑不恰当的插值，如input属性需要number或string等类型的数据，但是插入函数、对象等<br>☑更多插值方式，如插入表达式，插入函数调用，连续调用<br>同上，暂不打算支持直接插入表达式和函数调用<br>☑错误的插值，如填写不存在的变量，特殊符号，标签</p></li><li><p>if系列<br>（由于if-else和else暂未上线，所以暂时满足2.属性插值语法的标准即可判定为通过）<br>☑满足 2.属性插值语法 中的要求</p></li><li><p>for循环<br>☑满足 2.属性插值语法 中的要求<br>☑插入非数组元素<br>对于形如() &#x3D;&gt; [1]的值，会无法解析！<br>但是之前在data中直接写函数表达式的话，是能够解析返回值的，所以这里后续最好统一一下。<br>另外，最好再支持一下下标。</p></li><li><p>组件化<br>☑参数传递满足 2.属性插值语法 中的要求<br>□远程组件<br>只是试试能不能，不作为必要的测试标准<br>☑传递多个参数<br>☑组件多级嵌套<br>☑一个父组件多个子组件<br>☑传递连续调用的对象<br>☑传递函数<br>是比较符合预期的，能够实现组件通信<br>不过有个问题是，直接在script宏任务中访问window.mud是undefined，大概是还没有加载上<br>只能够异步地调用函数<br>☑传递同一个变量，以及改个名字之后重复传递<br>☑特殊的组件调用，如父子相互引用，兄弟引用，自己调用自己<br>自己调用自己：只会进行一次，递归会被阻止<br>父子相互引用：被浏览器阻止，子组件引用父组件失败</p></li><li><p>兼容性<br>☑移动端设备<br>☑Chrome&#x2F;Edge(其他浏览器暂时不用管)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 进一步学习vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minvue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习日记</title>
      <link href="/posts/2025/04/Fronted/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/c4f4b3de.html"/>
      <url>/posts/2025/04/Fronted/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/c4f4b3de.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="祖传三件套"><a href="#祖传三件套" class="headerlink" title="祖传三件套"></a>祖传三件套</h1><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>我是看的黑马程序员的课, 这个B站上面有很多资源<br>建议时间: 三天</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>黑马 + 📶学长发的三件套资料<br>黑马通俗易懂,;<br>coderwhy讲的更深入, 会涉及许多其他的知识, 听完后可以跟着做一个项目, 巩固css知识,;<br>框框css学的比较差, ┭┮﹏┭┮</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>JavaScript就全看的coderwhy发的资料了, 讲的非常的细致, 从es6之前到后面的新版本es.<br>个人建议可以把coderwhy的js视频全部看一遍, 重点学习他标注重点的视频</p><p>中间如果有看不懂的, 不要急. 掘金上面有很多前端大佬分享的笔记, 可以在上面淘淘. 或者直接问ai. 还能直接在官方文档里面找答案<br>学js的时候一定不要急啊, 越急学的越慢, 还学不好</p><p>框框学js的时候心态感觉就不好. 现在想来完全没必要啊. 只要每天按部就班的在学, js在暑假之前是能学的差不多的, 心再急也没必要. 希望大家能有一个良好的心态学习, 因为让人崩溃的知识后面还有很多</p><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><p>看完js, 恭喜你, 马上就要进入框架的学习了<br>后面还有node和工具的学习, 不要急, 你已经离成功不远了</p><p>按照我们这届的进度来看, 你们会在期末周的时候学到这(另有卷王我不说)(学的慢一点的贝贝也不用着急, 每个人有自己学习的节奏, 踏踏实实的学号每一步就是最棒的). </p><p>这时候的心态就非常的浮躁啊, 本来要放假了, 心就静不下来. 再加上刚学完三件套, 心中成就感满满, 马上要学的这些短时间内又用不上, 学的时候跟三件套扯不上太多关系. buff叠满了</p><p>既然学不好了, 那就干脆别学了吧(不是, 我乱说的)</p><p>个人推荐一下学习的重点 (yi):</p><ul><li>node (全看完)</li><li>Es module (全看完)</li><li>npm (重点掌握)</li><li>webpack(可以只看一半, 后面做项目遇到了再来学习也不迟)</li><li>git(重中之重, git远不止这些运用, 还需要在B站上继续进修)</li></ul><p>学完这些, 希望前端仔仔们都能拥有一个光明的未来<img src="/image.png" alt="alt text"></p><h2 id="学-vue-前"><a href="#学-vue-前" class="headerlink" title="学 vue 前"></a>学 vue 前</h2><p>搭建小兔鲜项目时发现什么都不懂, 个人推荐可以只跟着打完前三天的, 了解项目的基本构造, 之后就可以开始vue的学习啦!<br>![[前端了解&#x2F;小兔鲜&#x2F;vue项目结构.canvas]]</p><h1 id="学-vue"><a href="#学-vue" class="headerlink" title="学 vue"></a>学 vue</h1><p>学习vue前可以先找一个速通typescript (一二十分钟)来看一看, 后面学vue的时候遇到不会的语法了再去网上找</p><p>我当时是看的这个视频<a href="https://www.bilibili.com/video/BV1Za4y1r7KE?p=67&vd_source=26eb5025743189cb77f15d6e356b6da3">【尚硅谷Vue3入门到实战，最新版vue3+TypeScript前端开发教程】https://www.bilibili.com/video/BV1Za4y1r7KE?p=67&amp;vd_source&#x3D;26eb5025743189cb77f15d6e356b6da3</a><br>暑假的时候学的, 学了十天(内容不多, 但是自己玩玩耍耍, 白天的时候打游戏去了, 只有晚上的时候学了点)</p><p>不知道大家学这个的手是什么时候, 按照正常上学时候的速度, 应该能在<code>5-10</code>天学完, 拖太长了也不好</p><h1 id="练习vue"><a href="#练习vue" class="headerlink" title="练习vue"></a>练习vue</h1><p>不知道这个时候你们有自己的博客没有</p><p>看着学长学姐们自己写的博客, 我是真心动啊, 于是马上安排</p><p>在网上找的教程, 用 <code>hexo</code> 框架搭了一个博客, 中间出了一些小故障, 请问了学长, 最后也是顺利完成喽. </p><p>(可以租一个域名, 在网上看看, 找个便宜点的, 把博客挂在上面)</p><p>在就是装饰 + 整理以前的笔记</p><h1 id="第二次项目"><a href="#第二次项目" class="headerlink" title="第二次项目"></a>第二次项目</h1><p>2025-7-10<br>学完vue, 第二次搭小兔鲜啦</p><p>搭之前在网上找了一圈, 发现现阶段还是这个更合适一些</p><p>这个项目不需要多难, 越简单越好, 毕竟是学完vue的第一个项目, 主要目的是过一遍vue的知识点.<br>等熟悉完vue在学习新的技术也不迟</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端三件套 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
